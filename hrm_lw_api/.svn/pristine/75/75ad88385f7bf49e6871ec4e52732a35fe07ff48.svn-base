using HRMS.API.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Web.Http;
using HRMS.Data;
using System.Drawing;
using System.Text;
using System.Security.Cryptography;
using System.Diagnostics;

namespace HRMS.API.Controllers
{

    public class UserController : ApiController
    {
        public static string connectionString = ConfigurationManager.ConnectionStrings["db_hrmsEntities.Properties.Settings.db_hrmsConnectionString"].ConnectionString;
        public static Boolean SendEmailProcess = true;
        public string Set_PassKey = "7386t189-58c0-c495-8ff0-d0fnov0a29ta";
        private string setview = "";
        private string setadd = "";
        private string setedit = "";
        private string setdel = "";
        private string setact = "";
        private double? gleavebalance = 0;
        private double? gaddleave = 0;
        private double? guseleave = 0;

        private double? CLentitlement;
        private double? CLbalancelastmonth;
        private double? CLusedthismonth;
        private double? CLremain;
        private double? ALentitlement;
        private double? ALbalancelastmonth;
        private double? ALusedthismonth;
        private double? AEworkingthismonth;
        private double? AKremain;
        private float? DILBalance;
        private float? DILUsed;

        //[HttpPost]
        //[Route("api/User/sendEmail")]
        public static Boolean SendMeail(string recvieverAddress, string subject, string body, string sendFrom, string empid, string userAdd, Boolean sendNow, string linkForm)
        {
            if (SendEmailProcess == false)
            {
                return false;
            }            
            try
            {
                int SetStatus = 0;
                if (sendNow == true)
                {
                    SetStatus = 1;
                }  

                int empid_int = int.Parse(empid);
                int useradd_int = int.Parse(userAdd);
                string fullMessage = "";
                if (linkForm != "")
                {
                    fullMessage = body + Environment.NewLine + "<br>Link <a href='http://hrm.laoworldpublic.com:8080/hrms/service.jsp?p=" + linkForm + "'>LWPC HR SYSTEM</a><br>";
                } else
                {
                    fullMessage = body + Environment.NewLine + "<br>Link <a href='http://hrm.laoworldpublic.com:8080/hrms'>LWPC HR SYSTEM</a><br>";
                }

                //string fullMessage = body + Environment.NewLine + "Link href='http://hrm.laoworldpublic.com:8080/hrms'>PWPC HR SYSTEM.";
                using (var db = new db_hrmsEntities())
                {
                    db.tb_email_send.Add(new tb_email_send()
                    {
                        emp_id = empid_int,
                        email_address = recvieverAddress.Trim(),
                        email_subject = subject,
                        emil_body = fullMessage,
                        sendFrom = sendFrom,
                        status_id = SetStatus,
                        user_add = useradd_int,
                        date_add = DateTime.Now
                    });
                    db.SaveChanges();
                }
                return true;
            }
            catch (Exception ex)
            {
                //WriteLogFile("SendMeail" + ex.Message);
                return false;
            }
        }     
         
        public static Boolean SingleNotification(string device_token, string noti_title, string noti_body, string empid, string sendFrom, string userAdd, Boolean sendNow)
        {           
            try
            {
                int SetStatus = 0;
                if (sendNow == true)
                {
                    SetStatus = 1;
                }
                int empid_int = int.Parse(empid);
                int useradd_int = int.Parse(userAdd);
                using (var db = new db_hrmsEntities())
                {
                    
                    db.tb_noti_send.Add(new tb_noti_send()
                    {
                        empID = empid_int,
                        Device_token = device_token.Trim(),
                        Noti_title = noti_title,
                        Noti_body = noti_body,
                        sendFrom = sendFrom,
                        status_id = SetStatus,
                        user_add = useradd_int,
                        date_add = DateTime.Now
                    });
                    db.SaveChanges();
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        void insertLog (string token, string logeven, string logmodules, string olddata, string newdata)
        {
            using (var db = new db_hrmsEntities())
            {
                try
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //   where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == token || c.webTokenKey == token)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //string newdata = "";
                        string command;
                        string result = "0";
                        //newdata = "name1 = " + data.ethnicName1.Trim() + "; name2 =" + data.ethnicName2.Trim() + "; status_ID = 3";

                        command = "Exec pd_insertTb_log @logdate = '" + DateTime.Now + "', @loguser = " + ds_tokey.userID + ", @logeven = '"+ logeven +"', @logmodules = '"+ logmodules +"', @oldData = N'"+ olddata +"', @newData = N'" + newdata + "'";
                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(command, myConnection))
                            {
                                //Error this
                                //Result = (int)myCommand.ExecuteScalar();

                                object value = myCommand.ExecuteScalar();
                                if (value != null)
                                {
                                    result = value.ToString();
                                }
                                myConnection.Close();
                                // return result;
                            }
                        }
                    }

                }
                catch (Exception ex)
                {

                }
                
            }
        }
       
        private List<MyRequestResultViewModel> MyRequestListViewModel(int empID, string lang, string requestID)
        {
            List<MyRequestResultViewModel> ResultObject = new List<MyRequestResultViewModel>();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds = (from c in db.v_request_all
                              where c.empID == empID
                              select new
                              {
                                  c.leaveRequestNo,
                                  c.empID,                            
                                  c.date_add,
                                  c.user_add,                                
                                  c.noted,
                                  c.fileAttached,
                                  c.requestType,
                                  c.managerID,
                                  c.firstName1,
                                  c.lastName1,
                                  c.firstName2,
                                  c.lastName2,
                                  c.status_text
                              }).ToList();

                    if (requestID != null || requestID != "")
                    {
                        ds = (from c in db.v_request_all
                              where c.empID == empID && c.leaveRequestNo == requestID
                              select new
                              {
                                  c.leaveRequestNo,
                                  c.empID,                             
                                  c.date_add,
                                  c.user_add,                    
                                  c.noted,
                                  c.fileAttached,
                                  c.requestType,
                                  c.managerID,
                                  c.firstName1,
                                  c.lastName1,
                                  c.firstName2,
                                  c.lastName2,
                                  c.status_text
                              }).ToList();
                    }
                    if (ds.Count > 0)
                    {
                        if (lang == "1" || lang == null)
                        {

                            ResultObject = ds.Select(c => new MyRequestResultViewModel()
                            {
                                RequestID = c.leaveRequestNo.ToString(),
                                RequestNo = c.leaveRequestNo.ToString(),
                                RequestType = c.requestType,
                                managerName = c.firstName1.ToString() + " " + c.lastName1.ToString(),
                                SubmitDate = c.date_add.ToString(),
                                statusText = c.status_text,
                                fileName = "123.jpg",
                                //attachedFile = c.fileAttached
                                attachedFile = null

                            }).ToList();
                        }
                        else if (lang == "2")
                        {
                            ResultObject = ds.Select(c => new MyRequestResultViewModel()
                            {
                                RequestID = c.leaveRequestNo.ToString(),
                                RequestNo = c.leaveRequestNo.ToString(),
                                RequestType = c.requestType,
                                managerName = c.firstName2.ToString() + " " + c.lastName2.ToString(),
                                SubmitDate = c.date_add.ToString(),
                                statusText = c.status_text,
                                fileName = "123.jpg",
                                //attachedFile = c.attachfile
                                attachedFile = null
                            }).ToList();
                        }
                    }
                }
                return ResultObject;
            }
            catch (Exception ex)
            {
                WriteLogFile("MyRequestListViewModel" + ex.Message);
                return null;
            }


        }
        private List<ApprovedCommentResult> ApprovedCommitView(string requestID, string lang)
        {
            List<ApprovedCommentResult> ResultObject = new List<ApprovedCommentResult>();
            try
            {
                int NewRequestID = int.Parse(requestID);
                using (var db = new db_hrmsEntities())
                {
                    var ds = (from c in db.v_approved
                              where c.leaveRequestID == NewRequestID
                              select new
                              {
                                  c.leaveApproveID,
                                  c.leaveApproveNo,
                                  c.firstName1,
                                  c.lastName1,
                                  c.firstName2,
                                  c.lastName2,
                                  c.noted,
                                  c.date_add
                              }).ToList();
                    if (ds.Count > 0)
                    {
                        if (lang == "1" || lang == null)
                        {

                            ResultObject = ds.Select(c => new ApprovedCommentResult()
                            {
                                approvedName = c.firstName1.ToString() + " " + c.lastName1.ToString(),
                                comment = c.noted,
                                approvedDate = c.date_add.ToString()
                            }).ToList();
                        }
                        else if (lang == "2")
                        {
                            ResultObject = ds.Select(c => new ApprovedCommentResult()
                            {
                                approvedName = c.firstName2.ToString() + " " + c.lastName2.ToString(),
                                comment = c.noted,
                                approvedDate = c.date_add.ToString()
                            }).ToList();
                        }
                    }
                    else
                    {
                        return null;
                    }
                }
                return ResultObject;
            }
            catch (Exception ex)
            {
                WriteLogFile("ApprovedCommitView" + ex.Message);
                return null;
            }
        }
        private List<RequestItemDetailResultViewModel> MyRquestItemView(string requestID, string lang)
        {
            List<RequestItemDetailResultViewModel> ResultObject = new List<RequestItemDetailResultViewModel>();
            try
            {
                int newRequestID = int.Parse(requestID);
                using (var db = new db_hrmsEntities())
                {
                    var ds_item = (from c in db.v_myRequest
                                   where c.leaveRequestID == newRequestID
                                   select new
                                   {
                                       c.leaveRequestID,
                                       c.leaveRequestNo,
                                       c.firstName1,
                                       c.lastName1,
                                       c.firstName2,
                                       c.lastName2,
                                       c.leaveDay,
                                       c.startDate,
                                       c.endDate,
                                       c.amountDay,
                                       c.noted,
                                       c.returnDate,
                                       c.respfirstName1,
                                       c.resplastName1,
                                       c.respfirstName2,
                                       c.resplastName2
                                   }).ToList();
                    if (ds_item.Count > 0)
                    {
                        if (lang == "1" || lang == null)
                        {

                            ResultObject = ds_item.Select(c => new RequestItemDetailResultViewModel()
                            {
                                itemID = c.leaveRequestID.ToString(),
                                itemType = c.firstName1.ToString() + " " + c.lastName1.ToString() ,
                                duration = c.amountDay.ToString(),
                                strDate = c.startDate.ToString(),
                                endDate = c.endDate.ToString(),
                                returnDate = c.returnDate.ToString(),
                                RequestFor = c.leaveDay.ToString(),
                                requestReason = c.noted.ToString(),
                                responseName = c.respfirstName1.ToString() + " " + c.resplastName1.ToString()
                            }).ToList();
                        }
                        else if (lang == "2")
                        {
                            ResultObject = ds_item.Select(c => new RequestItemDetailResultViewModel()
                            {
                                itemID = c.leaveRequestID.ToString(),
                                itemType = c.firstName2.ToString() + " " + c.lastName2.ToString(),
                                duration = c.amountDay.ToString(),
                                strDate = c.startDate.ToString(),
                                endDate = c.endDate.ToString(),
                                returnDate = c.returnDate.ToString(),
                                RequestFor = c.leaveDay.ToString(),
                                requestReason = c.noted.ToString(),
                                responseName = c.respfirstName2.ToString() + " " + c.resplastName2.ToString()
                            }).ToList();
                        }
                    }
                }
                return ResultObject;
            }
            catch (Exception ex)
            {
                WriteLogFile("MyRquestItemView" + ex.Message);

                return null;
            }


        }
          

        public static Byte[] fileTobase64(string filePath, string fileNmae)
        {
            byte[] fileBase64=null;
            try
            {
                using (Image image = Image.FromFile(filePath + "/" + fileNmae))
                {
                    using (MemoryStream m = new MemoryStream())
                    {
                        image.Save(m, image.RawFormat);
                        fileBase64 = m.ToArray();
                        // Convert byte[] to Base64 String
                        // base64String = Convert.ToBase64String(fileBase64);
                        //return base64String;
                    }
                }
                return fileBase64;
            } catch (Exception )
            {
                return null;
            }            
        }

        [HttpPost]
        [Route("api/User/Login")]
        public LoginResult Login(LoginParam data)
        {
            int GET_UserID;
            int GET_StaffID;
            int GET_UserIDUpdate;
            string SET_Token;
            var ret = new LoginResult();
          //  WriteLogFile("login from u:" + data.UserName + ", P:"+ data.UserPassword +", passkey: " + data.Passkey);
            if (data.Passkey != Set_PassKey)
            {
                ret.ModelErrors = "Token key fail";
                ret.ResultObject = null;
                ret.StatusCode = 400;
                ret.IsSuccess = false;
                ret.CommonErrors = "Passkey not correct";
                return ret;
            }

            try
            {
                using (var db = new db_hrmsEntities())
                {
                    string userlogin = data.UserName;
                    string loweruserlogin = userlogin.ToLower();
                    string pass = data.UserPassword;
                    pass = Base64Encode(pass + loweruserlogin);

                    var ds = (from c in db.v_users
                              where c.username == loweruserlogin && c.pwd == pass
                              select new
                              {
                                  c.userID,
                                  c.empID,
                                  c.empNo,
                                  c.username,
                                  c.firstName1,
                                  c.lastName1,
                                  c.firstName2,
                                  c.lastName2,
                                  c.empMobile,
                                  c.empEmail,
                                  c.empTitleName,
                                  c.unitName1,
                                  c.unitName2,
                                  c.deptName1,
                                  c.deptName2,
                                  c.companyName1,
                                  c.companyName2,
                                  c.companyPhone,
                                  c.empPhoto,
                                  c.roleID,
                                  c.langID
                              }).FirstOrDefault();

                    if (ds != null)
                    {
                        Guid g = Guid.NewGuid();
                        //GET_UserID = int.Parse(ds.userID.ToString());
                        GET_UserID = int.Parse(ds.empID.ToString());
                        GET_StaffID = int.Parse(ds.empID.ToString());
                        GET_UserIDUpdate = int.Parse(ds.userID.ToString());
                        SET_Token = g.ToString();

                        List<LoginResultUserInfoViewModel> ResultObject = new List<LoginResultUserInfoViewModel>();
                        ResultObject.Add(new LoginResultUserInfoViewModel
                        {
                            UserId = GET_UserID.ToString(),
                            userEmail = ds.empEmail,
                            emp_no = ds.empNo,
                            lao_fullname = ds.firstName1 + " " + ds.lastName1,
                            eng_fullname = ds.firstName2 + " " + ds.lastName2,
                            emp_mobile = ds.empMobile,
                            emp_title = ds.empTitleName,
                            emp_dep = ds.deptName1,
                            emp_company = ds.companyName1,
                            companyTel = ds.companyPhone,
                            emp_photo = fileTobase64("D:/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/hrms/psImages", ds.empPhoto.ToString()),
                            TokenKey = SET_Token,
                            roleID = ds.roleID.ToString(),
                            langID = ds.langID.ToString()
                        });

                        ret.ModelErrors = null;
                        ret.ResultObject = ResultObject;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;

                        // update token key
                        if (data.webToken == null || data.webToken == "") {
                            if (data.Device_token != "")
                            {
                                var ds_user = (from c in db.tb_users
                                               where c.empID == GET_StaffID && c.userID == GET_UserIDUpdate
                                               select c).FirstOrDefault();
                                if (ds_user != null)
                                {
                                    ds_user.appTokenKey = SET_Token;
                                    ds_user.Device_token = data.Device_token.ToString();
                                }
                                db.SaveChanges();
                            }
                            else
                            {
                                var ds_user = (from c in db.tb_users
                                               where c.empID == GET_StaffID && c.userID == GET_UserIDUpdate
                                               select c).FirstOrDefault();
                                if (ds_user != null)
                                {
                                    ds_user.appTokenKey = SET_Token;
                                }
                                db.SaveChanges();
                            }
                        } else
                        {                           
                                var ds_user = (from c in db.tb_users
                                               where c.empID == GET_StaffID && c.userID == GET_UserIDUpdate
                                               select c).FirstOrDefault();
                                if (ds_user != null)
                                {
                                    ds_user.webTokenKey = SET_Token;                                   
                                }
                                db.SaveChanges();                            
                        }
                                             
                        return ret;
                    } else
                    {
                        WriteLogFile("not found user ");
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Error";
                        return ret;
                    }
                }

            }
            catch (Exception ex)
            {
                var st = new StackTrace(ex, true);
                var frame = st.GetFrame(0);
                
                //WriteLogFile("Error login line:" + frame.GetFileLineNumber() + ". Error details: " + ex.StackTrace + ex.Message);
                ret.ModelErrors = "Error login line: " + frame.GetFileLineNumber() + ". Error details: " + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }                    
        }

        private List<EventHolidayViewModelResult> EventHolidayViewModel(int MonthView)
        {
            List<EventHolidayViewModelResult> ResultObject = new List<EventHolidayViewModelResult>();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds = (from c in db.v_publicHoliday
                              where c.status_ID == 1 && c.MonthHoliday == MonthView
                              orderby c.publicHoliday ascending
                              select new
                              {
                                  c.publicHoliday,
                                  c.publicHolidayName1,
                                  c.MonthHolidayText
                              }).ToList();
                    if (ds.Count > 0)
                    {
                        ResultObject = ds.Select(c => new EventHolidayViewModelResult()
                        {
                            eventDate = c.publicHoliday.ToString(),
                            eventNoted = c.publicHolidayName1.ToString()
                        }).ToList();
                    }
                    return ResultObject;
                }
            }
            catch (Exception ex)
            {
                WriteLogFile("EventHolidayViewModel" + ex.Message);
                return null;
            }
        }

        private List<PublicHolidayViewModelResult> HolidayViewModel(int Yearview)
        {
            List<PublicHolidayViewModelResult> ResultObject = new List<PublicHolidayViewModelResult>();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds = (from c in db.v_publicHoliday
                              where c.status_ID == 3 && c.YearHoliday == Yearview
                              group c by new { c.YearHoliday, c.MonthHoliday, c.MonthHolidayText } into g
                              select new
                              {
                                  g.Key.YearHoliday,
                                  g.Key.MonthHoliday,
                                  g.Key.MonthHolidayText
                              }
                              ).ToList();
                    if (ds.Count > 0)
                    {

                        ResultObject = ds.Select(c => new PublicHolidayViewModelResult()
                        {
                            month = c.MonthHolidayText.ToString(),
                            Events = EventHolidayViewModel(int.Parse(c.MonthHoliday.ToString()))
                        }).ToList();

                    }
                    return ResultObject;
                }
            }
            catch (Exception ex)
            {
                WriteLogFile("HolidayViewModel" + ex.Message);
                return null;
            }
        }

        [HttpPost]
        [Route("api/User/permission")]
        public PermissionResult Permission(PermissionParam data)
        {
            var ret = new PermissionResult();
            int GET_UserID;
           // WriteLogFile("Permission " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {

                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID,
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        GET_UserID = int.Parse(ds_tokey.empID.ToString());

                        //// update CountItem
                        //string Command = " EXEC p_noti @emp_id = '" + GET_UserID + "' ";
                        //using (SqlConnection myConnection = new SqlConnection(connectionString))
                        //{
                        //    myConnection.Open();
                        //    using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                        //    {
                        //        string Result = (string)myCommand.ExecuteScalar(); // returns the first column of the first row
                        //    }
                        //}

                        // return permission
                        var ds_per = db.v_app_permission.Where(c => c.empID == GET_UserID).ToList();
                        if (ds_per != null)
                        {
                            List<PermissionInfoViewModel> ResultObject = new List<PermissionInfoViewModel>();
                            ResultObject = ds_per.Select(c => new PermissionInfoViewModel()
                            {
                                roleName = c.roleName,
                                app_permissionName = c.app_permissionName,
                                app_view = c.app_view.ToString(),
                                app_add = c.app_add.ToString(),
                                app_edit = c.app_edit.ToString(),
                                app_action = c.app_action.ToString(),
                                CountItem = c.CountItem.ToString(),
                                app_permission = c.app_permissionId.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have permission for access ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No permission access";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/CompanyList")]
        public CompanyListResult CompanyList(publicHolidayListParam data)
        {
            var ret = new CompanyListResult();
            WriteLogFile("CompanyListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 15 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.tb_company
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.companyID,
                                            c.companyCode,
                                            c.companyName1,
                                            c.companyName2,
                                            c.companyPhone,
                                            c.companyFax,
                                            c.companyWebsite,
                                            c.companyFaebook,
                                            c.companyLogo
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<CompanyListViewModelResult> ResultObject = new List<CompanyListViewModelResult>();                                                  
                            ResultObject = ds_leave.Select(c => new CompanyListViewModelResult()
                            {
                                companyID = c.companyID.ToString(),
                                companyCode = c.companyCode.ToString(),
                                companyName1 = c.companyName1.ToString(),
                                companyName2 = c.companyName2.ToString(),
                                companyPhone = c.companyPhone.ToString(),
                                companyFax = c.companyFax.ToString(),
                                companyWebsite = c.companyWebsite.ToString(),
                                companyFaebook = c.companyFaebook.ToString(),
                                companyLogo = c.companyLogo.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewCompany")]
        public CompanyListResult NewCompany(NewCompanyParam data)
        {

            var ret = new CompanyListResult();
             WriteLogFile("NewCompany " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 15 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {                        
                        db.tb_company.Add(new tb_company()
                        {
                            companyCode = data.companyCode.ToString(),
                            companyName1 = data.companyName1.ToString(),
                            companyName2 = data.companyName1.ToString(),
                            companyPhone = data.companyPhone.ToString(),
                            companyFax = data.companyFax.ToString(),
                            companyWebsite = data.companyWebsite.ToString(),
                            companyFaebook = data.companyFaebook.ToString(),
                            companyLogo = data.companyLogo.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewCompany";
                        string olddata = "";
                        string newdata = "companycode = " + data.companyCode.Trim() + "; comname1 =" + data.companyName1.Trim() + "; comname2="+ data.companyName2 +"; " +
                            "phone ="+ data.companyPhone +"; fax = "+ data.companyFax +"; website="+ data.companyWebsite +"; " +
                            "facebook = "+ data.companyFaebook +"; logo="+ data.companyLogo +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateCompany")]
        public CompanyListResult UpdateCompany(UpdateCompanyParam data)
        {
            var ret = new CompanyListResult();
            WriteLogFile("UpdateCompany " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 15 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {                       
                        var ds_update = (from c in db.tb_company
                                         where c.companyID == data.companyID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "companycode = " + ds_update.companyCode.Trim() + "; comname1 =" + ds_update.companyName1.Trim() + "; comname2=" + ds_update.companyName2 + "; " +
                           "phone =" + ds_update.companyPhone + "; fax = " + ds_update.companyFax + "; website=" + ds_update.companyWebsite + "; " +
                           "facebook = " + ds_update.companyFaebook + "; logo=" + ds_update.companyLogo + "; status_ID = 3";

                            ds_update.companyCode = data.companyCode;
                            ds_update.companyName1 = data.companyName1;
                            ds_update.companyName2 = data.companyName2;
                            ds_update.companyPhone = data.companyPhone;
                            ds_update.companyFax = data.companyFax;
                            ds_update.companyWebsite = data.companyWebsite;
                            ds_update.companyFaebook = data.companyFaebook;
                            ds_update.companyLogo = data.companyLogo;                            
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateCompany";
                        // string olddata = "";
                        string newdata = "companycode = " + data.companyCode.Trim() + "; comname1 =" + data.companyName1.Trim() + "; comname2=" + data.companyName2 + "; " +
                           "phone =" + data.companyPhone + "; fax = " + data.companyFax + "; website=" + data.companyWebsite + "; " +
                           "facebook = " + data.companyFaebook + "; logo=" + data.companyLogo + "; status_ID = 3"; 
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelCompany")]
        public PublicHolidayListResult DelCompany(DelCompanyParam data)
        {
            var ret = new PublicHolidayListResult();
            WriteLogFile("DelCompany " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId >= 15 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_company
                                         where c.companyID == data.companyID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DeleteCompany";
                        string olddata = "";
                        string newdata = "companyID = "+ data.companyID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/SelDeptList")]
        public DeptListResult SelDeptList(SelDepartmentParam data)
        {
            var ret = new DeptListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 16 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.tb_department
                                        where c.status_ID == 3 && c.companyID == data.companyID
                                        select new
                                        {
                                            c.deptID,
                                            c.tb_company.companyCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2
                                        }).ToList();
                        



                        if (ds_leave != null)
                        {
                            List<DeptListViewModelResult> ResultObject = new List<DeptListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new DeptListViewModelResult()
                            {
                                deptID = c.deptID.ToString(),
                                companyCode = c.companyCode.ToString(),
                                deptCode = c.deptCode.ToString(),
                                deptName1 = c.deptName1.ToString(),
                                deptName2 = c.deptName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/DeptList")]
        public DeptListResult deptList(DepartmentListParam data)
        {
            var ret = new DeptListResult();
           // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 16 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.tb_department
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.deptID,
                                            c.tb_company.companyCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2 
                                        }).ToList();
                        if (data.selectID == 1 )
                        {
                            ds_leave = (from c in db.tb_department
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.deptID,
                                            c.tb_company.companyCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2
                                        }).ToList();
                        } else
                        {
                            ds_leave = (from c in db.tb_department
                                        where c.status_ID == 1 || c.status_ID ==3
                                        select new
                                        {
                                            c.deptID,
                                            c.tb_company.companyCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2
                                        }).ToList();
                        }



                        if (ds_leave != null)
                        {
                            List<DeptListViewModelResult> ResultObject = new List<DeptListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new DeptListViewModelResult()
                            {
                                deptID = c.deptID.ToString(),
                                companyCode = c.companyCode.ToString(),
                                deptCode = c.deptCode.ToString(),
                                deptName1 = c.deptName1.ToString(),
                                deptName2 = c.deptName2.ToString()                               
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewDept")]
        public DeptListResult NewDept(NewDeptParam data)
        {
            var ret = new DeptListResult();
         //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 16 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_department.Add(new tb_department()
                        {                            
                            companyID = data.companyID,                           
                            deptCode = data.deptCode.ToString(),
                            deptName1 = data.deptName1.ToString(),
                            deptName2 = data.deptName2.ToString(),                         
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();
                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewDept";
                        string olddata = "";
                        string newdata = "companyID = " + data.companyID + "; detpcode="+data.deptCode+"; name1="+ data.deptName1+"; name2="+ data.deptName2+"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateDept")]
        public DeptListResult UpdateDept(UpdateDeptParam data)
        {
            var ret = new DeptListResult();
           // WriteLogFile("UpdateDept " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 16 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_department
                                         where c.deptID == data.deptID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.companyID = data.companyID;
                            ds_update.deptCode = data.deptCode.ToString();
                            ds_update.deptName1 = data.deptName1.ToString();
                            ds_update.deptName2 = data.deptName2.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateDept";
                        string olddata = "";
                        string newdata = "deptid = "+ data.deptID +"; companyID = " + data.companyID + "; detpcode=" + data.deptCode + "; name1=" + data.deptName1 + "; name2=" + data.deptName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelDept")]
        public DeptListResult DelDept(DelDeptParam data)
        {
            var ret = new DeptListResult();
            WriteLogFile("DelDept " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 16 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_department
                                         where c.deptID == data.DeptID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();
                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelDept";
                        string olddata = "";
                        string newdata = "deptID = "+ data.DeptID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/UnitParentList")]
        public UnitParentListResult UnitList(UnitParentListParam data)
        {
            var ret = new UnitParentListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 17 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.v_unit
                                        where c.status_ID == 3 && c.deptID == data.deptID && c.unitID != data.unitID
                                        orderby c.unitID ascending
                                        select new
                                        {
                                            c.unitID,
                                            c.deptID,
                                            c.unitCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2,
                                            c.pcode,
                                            c.p1,
                                            c.p2,
                                            c.unitName1,
                                            c.unitName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<UnitParentListViewModelResult> ResultObject = new List<UnitParentListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new UnitParentListViewModelResult()
                            {
                                unitID = c.unitID.ToString(),
                                deptID = c.deptID.ToString(),
                                unitCode = c.unitCode.ToString(),                                                             
                                unitName1 = c.unitName1.ToString(),
                                unitName2 = c.unitName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SelUnitList")]
        public UnitListResult SelUnitList(SelUnitListParam data)
        {
            var ret = new UnitListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 17 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.v_unit
                                        where c.status_ID == 3 && c.deptID == data.deptID
                                        select new
                                        {
                                            c.unitID,
                                            c.unitCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2,
                                            c.pcode,
                                            c.p1,
                                            c.p2,
                                            c.unitName1,
                                            c.unitName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<UnitListViewModelResult> ResultObject = new List<UnitListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new UnitListViewModelResult()
                            {
                                unitID = c.unitID.ToString(),
                                unitCode = c.unitCode.ToString(),
                                deptCode = c.deptCode.ToString(),
                                parentCode = c.pcode.ToString(),
                                unitName1 = c.unitName1.ToString(),
                                unitName2 = c.unitName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UnitList")]
        public UnitListResult UnitList(publicHolidayListParam data)
        {
            var ret = new UnitListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 17 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.v_unit
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.unitID,
                                            c.unitCode,
                                            c.deptCode,
                                            c.deptName1,
                                            c.deptName2,
                                            c.pcode,
                                            c.p1,
                                            c.p2,
                                            c.unitName1,
                                            c.unitName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<UnitListViewModelResult> ResultObject = new List<UnitListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new UnitListViewModelResult()
                            {
                                unitID = c.unitID.ToString(),
                                unitCode = c.unitCode.ToString(),
                                deptCode = c.deptCode.ToString(),
                                parentCode = c.pcode.ToString(),
                                unitName1 = c.unitName1.ToString(),
                                unitName2 = c.unitName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewUnit")]
        public UnitListResult NewUnitt(NewUnitParam data)
        {
            var ret = new UnitListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 17 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_unit.Add(new tb_unit()
                        {
                            deptID = data.deptID,
                            parentID = data.parentID,
                            unitCode = data.unitCode.ToString(),
                            unitName1 = data.unitName1.ToString(),
                            unitName2 = data.unitName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();
                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewUnit";
                        string olddata = "";
                        string newdata = "deptID = " + data.deptID + "; parentID=" + data.parentID + "; unitcode="+ data.unitCode +"; name1=" + data.unitName1 + "; name2=" + data.unitName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateUnit")]
        public UnitListResult UpdateUnit(UpdateUnitParam data)
        {
            var ret = new UnitListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 17 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_unit
                                         where c.unitID == data.unitID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "deptID = " + ds_update.deptID + "; parentID=" + ds_update.parentID + "; unitcode="+ ds_update.unitCode +"; name1=" + ds_update.unitName1 + "; name2=" + ds_update.unitName2 + "; status_ID = 3";
                            ds_update.deptID = data.deptID;
                            ds_update.parentID = data.parentID;
                            ds_update.unitCode = data.unitCode.ToString();
                            ds_update.unitName1 = data.unitName1.ToString();
                            ds_update.unitName2 = data.unitName2.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        // This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateUnit";
                        //string olddata = "";
                        string newdata = "deptID = " + data.deptID + "; parentID=" + data.parentID + "; unitcode="+ data.unitCode +"; name1=" + data.unitName1 + "; name2=" + data.unitName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelUnit")]
        public UnitListResult DelUnit(DelUnitParam data)
        {
            var ret = new UnitListResult();
          //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 17 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_unit
                                         where c.unitID == data.UnitID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelUnit";
                        string olddata = "";
                        string newdata = "UnitID = " + data.UnitID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/EthnicList")]
        public EthnicListResult EthnicList(publicHolidayListParam data)
        {
            var ret = new EthnicListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_ethnic
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.ethnicID,
                                            c.ethnicName1,
                                            c.ethnicName2 
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<EthnicListViewModelResult> ResultObject = new List<EthnicListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new EthnicListViewModelResult()
                            {
                                ethnicID = c.ethnicID.ToString(),                               
                                ethnicName1 = c.ethnicName1.ToString(),
                                ethnicName2 = c.ethnicName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEthnic")]
        public EthnicListResult NewEthnic(NewEthnicParam data)
        {
            var ret = new EthnicListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    
                    if (ds_tokey != null)
                    {
                        db.tb_ethnic.Add(new tb_ethnic()
                        {                          
                            ethnicName1 = data.ethnicName1.ToString(),
                            ethnicName2 = data.ethnicName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEthnic";
                        string olddata = "";
                        string newdata = "name1 = " + data.ethnicName1.Trim() + "; name2 =" + data.ethnicName2.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEthnic")]
        public EthnicListResult UpdateEthnic(UpdateEthnicParam data)
        {
            var ret = new EthnicListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_ethnic
                                         where c.ethnicID == data.ethnicID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "name1 = " + ds_update.ethnicName1 + "; name2 = " + ds_update.ethnicName2 + "";
                            ds_update.ethnicName1 = data.ethnicName1.ToString();
                            ds_update.ethnicName2 = data.ethnicName2.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEthnic";
                        string newdata = "name1 = " + data.ethnicName1.Trim() + "; name2 =" + data.ethnicName2.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEthnic")]
        public EthnicListResult DelEthnic(DelEthnicParam data)
        {
            var ret = new EthnicListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_ethnic
                                         where c.ethnicID == data.ethnicID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEthnic";
                        string olddata = "";
                        string newdata = "Ethnicid="+ data.ethnicID+"; Status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/GenderList")]
        public GenderListResult GenderList(publicHolidayListParam data)
        {
            var ret = new GenderListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_gender
                                        where c.status_id == 3
                                        select new
                                        {
                                            c.genderID,
                                            c.genderText
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<GenderListViewModelResult> ResultObject = new List<GenderListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new GenderListViewModelResult()
                            {
                                genderID = c.genderID.ToString(),
                                genderText = c.genderText.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewGender")]
        public GenderListResult NewGender(NewGenderParam data)
        {
            var ret = new GenderListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_gender.Add(new tb_gender()
                        {
                            genderText = data.genderText.ToString(),
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewGender";
                        string olddata = "";
                        string newdata = "GenderText = " + data.genderText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateGender")]
        public GenderListResult UpdateGender(UpdateGenderParam data)
        {
            var ret = new GenderListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_gender
                                         where c.genderID == data.genderID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.genderText;
                            ds_update.genderText = data.genderText.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateGender";                        
                        string newdata = "GenderText = " + data.genderText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelGender")]
        public GenderListResult DelGender(DelGenderParam data)
        {
            var ret = new GenderListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_gender
                                         where c.genderID == data.genderID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelGender";
                        string olddata = "";
                        string newdata = "ID=" + data.genderID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/FstatusList")]
        public fstatusListResult FstatusList(publicHolidayListParam data)
        {
            var ret = new fstatusListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_fstatus
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.fstatusID,
                                            c.fstatusText
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<fstatusListViewModelResult> ResultObject = new List<fstatusListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new fstatusListViewModelResult()
                            {
                                fstatusID = c.fstatusID.ToString(),
                                fstatusText = c.fstatusText.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/Newfstatus")]
        public fstatusListResult Newfstatus(NewfstatusParam data)
        {
            var ret = new fstatusListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_fstatus.Add(new tb_fstatus()
                        {
                            fstatusText = data.fstatusText.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "Newfstatus";
                        string olddata = "";
                        string newdata = "fstatusText = " + data.fstatusText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/Updatefstatus")]
        public fstatusListResult Updatefstatus(UpdatefstatusParam data)
        {
            var ret = new fstatusListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_fstatus
                                         where c.fstatusID == data.fstatusID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.fstatusText;
                            ds_update.fstatusText = data.fstatusText.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "Updatefstatus";
                        
                        string newdata = "fstatustext = " + data.fstatusText.ToString() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/Delfstatus")]
        public fstatusListResult Delfstatus(DelfstatusParam data)
        {
            var ret = new fstatusListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_fstatus
                                         where c.fstatusID == data.fstatusID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "Delfstatus";
                        string olddata = "";
                        string newdata = "ID=" + data.fstatusID + "; Status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/NationalList")]
        public NationalListResult NationalList(publicHolidayListParam data)
        {
            var ret = new NationalListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_nationality
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.nationalityID,
                                            c.nationalityCode,
                                            c.nationalityText
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<NationalListViewModelResult> ResultObject = new List<NationalListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new NationalListViewModelResult()
                            {
                                nationalityID = c.nationalityID.ToString(),
                                nationalityCode = c.nationalityCode.ToString(),
                                nationalityText = c.nationalityText.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewNational")]
        public NationalListResult NewNational(NewNationalParam data)
        {
            var ret = new NationalListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_nationality.Add(new tb_nationality()
                        {
                            nationalityCode = data.nationalityCode.ToString(),
                            nationalityText = data.nationalityText.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewNational";
                        string olddata = "";
                        string newdata = "nationalityCode = " + data.nationalityCode.Trim() + "; nationalityText =" + data.nationalityText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateNational")]
        public NationalListResult UpdateNational(UpdateNationalParam data)
        {
            var ret = new NationalListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_nationality
                                         where c.nationalityID == data.nationalityID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.nationalityCode + ";" + ds_update.nationalityText;
                            ds_update.nationalityCode = data.nationalityCode.ToString();
                            ds_update.nationalityText = data.nationalityText.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateNational";
                        //string olddata = "";
                        string newdata = "name1 = " + data.nationalityCode.Trim() + "; name2 =" + data.nationalityText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelNational")]
        public NationalListResult DelNational(DelNationalParam data)
        {
            var ret = new NationalListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_nationality
                                         where c.nationalityID == data.nationalityID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelNational";
                        string olddata = "";
                        string newdata = "ID=" + data.nationalityID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }


        [HttpPost]
        [Route("api/User/ReligionList")]
        public ReligionListResult ReligionList(publicHolidayListParam data)
        {
            var ret = new ReligionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_religion
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.religionID,
                                            c.religionText 
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<ReligionListViewModelResult> ResultObject = new List<ReligionListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new ReligionListViewModelResult()
                            {
                                religionID = c.religionID.ToString(),
                                religionText = c.religionText.ToString()                               
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewReligion")]
        public ReligionListResult NewReligion(NewReligionParam data)
        {
            var ret = new ReligionListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_religion.Add(new tb_religion()
                        {                           
                            religionText = data.religionText.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewReligion";
                        string olddata = "";
                        string newdata = "ReligionText = " + data.religionText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateReligion")]
        public ReligionListResult UpdateReligion(UpdateReligionParam data)
        {
            var ret = new ReligionListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_religion
                                         where c.religionID == data.religionID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.religionText;
                            ds_update.religionText = data.religionText.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "Updatereligion";
                        //string olddata = "";
                        string newdata = "religiontext = " + data.religionText.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelReligion")]
        public ReligionListResult DelReligion(DelReligionParam data)
        {
            var ret = new ReligionListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_religion
                                         where c.religionID == data.religionID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelReligion";
                        string olddata = "";
                        string newdata = "ID=" + data.religionID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }


        [HttpPost]
        [Route("api/User/BankList")]
        public BankListResult BankList(publicHolidayListParam data)
        {
            var ret = new BankListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_bank
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.bankID,
                                            c.BankShortName,
                                            c.BankLongName
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<BankListViewModelResult> ResultObject = new List<BankListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new BankListViewModelResult()
                            {
                                bankID = c.bankID.ToString(),
                                BankShortName = c.BankShortName.ToString(),
                                BankLongName = c.BankLongName.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewBank")]
        public BankListResult NewBank(NewBankParam data)
        {
            var ret = new BankListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_bank.Add(new tb_bank()
                        {
                            BankShortName = data.BankShortName.ToString(),
                            BankLongName = data.BankLongName.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewBank";
                        string olddata = "";
                        string newdata = "BankShortName = " + data.BankShortName.Trim() + "; BankLongName =" + data.BankLongName.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateBank")]
        public BankListResult UpdateBank(UpdateBankParam data)
        {
            var ret = new BankListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_bank
                                         where c.bankID == data.bankID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.BankShortName + "; " + ds_update.BankLongName;
                            ds_update.BankShortName = data.BankShortName.ToString();
                            ds_update.BankLongName = data.BankLongName.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateBank";
                       // string olddata = "";
                        string newdata = "BankShortName = " + data.BankShortName.Trim() + "; BankLongname =" + data.BankLongName.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelBank")]
        public BankListResult DelBank(DelBankParam data)
        {
            var ret = new BankListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_bank
                                         where c.bankID == data.bankID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelBank";
                        string olddata = "";
                        string newdata = "ID=" + data.bankID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/IncomeTypeList")]
        public IncomeTypeListResult IncomeTypeList(publicHolidayListParam data)
        {
            var ret = new IncomeTypeListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_incomType
                                        where c.status_ID == 3 orderby c.incomTypeCode ascending
                                        select new
                                        {
                                            c.incomTypeID,
                                            c.incomTypeCode,
                                            c.incomTypeName1,
                                            c.incomTypeName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<IncomeTypeListViewModelResult> ResultObject = new List<IncomeTypeListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new IncomeTypeListViewModelResult()
                            {
                                incomTypeID = c.incomTypeID.ToString(),
                                incomTypeCode = c.incomTypeCode.ToString(),
                                incomTypeName1 = c.incomTypeName1.ToString(),
                                incomTypeName2 = c.incomTypeName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewIncomeType")]
        public IncomeTypeListResult NewIncomeType(NewIncomeTypeParam data)
        {
            var ret = new IncomeTypeListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_incomType.Add(new tb_incomType()
                        {
                            incomTypeCode = data.incomTypeCode.ToString(),
                            incomTypeName1 = data.incomTypeName1.ToString(),
                            incomTypeName2 = data.incomTypeName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewIncomeType";
                        string olddata = "";
                        string newdata = "incomTypeCode = " + data.incomTypeCode.Trim() + "; incomTypeName1 =" + data.incomTypeName1.Trim() + "; incomTypeName2 = "+ data.incomTypeName2 +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateIncomeType")]
        public IncomeTypeListResult UpdateIncomeType(UpdateIncomeTypeParam data)
        {
            var ret = new IncomeTypeListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_incomType
                                         where c.incomTypeID == data.incomTypeID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = ds_update.incomTypeCode + "; " + ds_update.incomTypeName1 + "; " + ds_update.incomTypeName2;
                            ds_update.incomTypeCode = data.incomTypeCode.ToString();
                            ds_update.incomTypeName1 = data.incomTypeName1.ToString();
                            ds_update.incomTypeName2 = data.incomTypeName2.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateIncomeType";
                        // string olddata = "";
                        string newdata = "incomTypeCode = " + data.incomTypeCode.Trim() + "; incomTypeName1 =" + data.incomTypeName1.Trim() + "; incomTypeName2 = " + data.incomTypeName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelIncomeType")]
        public IncomeTypeListResult DelIncomeType(DelIncomeTypeParam data)
        {
            var ret = new IncomeTypeListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_incomType
                                         where c.incomTypeID == data.incomTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelIncomeType";
                        string olddata = "";
                        string newdata = "ID=" + data.incomTypeID + ";  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/DeductionTypeList")]
        public DeductionTypeListResult DeductionTypeList(publicHolidayListParam data)
        {
            var ret = new DeductionTypeListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_deductionType
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.deductionTypeID,
                                            c.deductionTypeCode,
                                            c.deductionTypeName1,
                                            c.deductionTypeName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<DeductionTypeListViewModelResult> ResultObject = new List<DeductionTypeListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new DeductionTypeListViewModelResult()
                            {
                                deductionTypeID = c.deductionTypeID.ToString(),
                                deductionTypeCode = c.deductionTypeCode.ToString(),
                                deductionTypeName1 = c.deductionTypeName1.ToString(),
                                deductionTypeName2 = c.deductionTypeName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/NewDeductionType")]
        public DeductionTypeListResult NewDeductionType(NewDeductionTypeParam data)
        {
            var ret = new DeductionTypeListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_deductionType.Add(new tb_deductionType()
                        {
                            deductionTypeCode = data.deductionTypeCode.ToString(),
                            deductionTypeName1 = data.deductionTypeName1.ToString(),
                            deductionTypeName2 = data.deductionTypeName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewDeductionType";
                        string olddata = "";
                        string newdata = "deductionTypeCode = " + data.deductionTypeCode.Trim() + "; deductionTypeName1 =" + data.deductionTypeName1.Trim() + "; deductionTypeName2 = "+ data.deductionTypeName2 +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateDeductionType")]
        public DeductionTypeListResult UpdateDeductionType(UpdateDeductionTypeParam data)
        {
            var ret = new DeductionTypeListResult();
            // WriteLogFile("UpdateUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_deductionType
                                         where c.deductionTypeID == data.deductionTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.deductionTypeCode + "; " + ds_update.deductionTypeName1 + "; " + ds_update.deductionTypeName2;
                            ds_update.deductionTypeCode = data.deductionTypeCode.ToString();
                            ds_update.deductionTypeName1 = data.deductionTypeName1.ToString();
                            ds_update.deductionTypeName2 = data.deductionTypeName2.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateDeductionType";
                        //string olddata = "";
                        string newdata = "deductionTypeCode = " + data.deductionTypeCode.Trim() + "; deductionTypeName1 =" + data.deductionTypeName1.Trim() + "; deductionTypeName2 = " + data.deductionTypeName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelDeductionType")]
        public DeductionTypeListResult DelDeductionType(DelDeductionTypeParam data)
        {
            var ret = new DeductionTypeListResult();
            //  WriteLogFile("DelUnit " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_deductionType
                                         where c.deductionTypeID == data.deductionTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelDeductionType";
                        string olddata = "";
                        string newdata = "ID=" + data.deductionTypeID + "; Status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }



        [HttpPost]
        [Route("api/User/AllowanceTypeList")]
        public AllowanceTypeListResult AllowanceTypeList(publicHolidayListParam data)
        {
            var ret = new AllowanceTypeListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_allowanceType
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.allowanceTypeID,
                                            c.allowanceTypeCode,
                                            c.allowanceTypeName1,
                                            c.allowanceTypeName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<AllowanceTypeListViewModelResult> ResultObject = new List<AllowanceTypeListViewModelResult>();
                            ResultObject = ds_leave.Select(c => new AllowanceTypeListViewModelResult()
                            {
                                allowanceTypeID = c.allowanceTypeID.ToString(),
                                allowanceTypeCode = c.allowanceTypeCode.ToString(),
                                allowanceTypeName1 = c.allowanceTypeName1.ToString(),
                                allowanceTypeName2 = c.allowanceTypeName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/NewAllowanceType")]
        public AllowanceTypeListResult NewAllowanceType(NewAllowanceTypeParam data)
        {
            var ret = new AllowanceTypeListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_allowanceType.Add(new tb_allowanceType()
                        {
                            allowanceTypeCode = data.allowanceTypeCode.ToString(),
                            allowanceTypeName1 = data.allowanceTypeName1.ToString(),
                            allowanceTypeName2 = data.allowanceTypeName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewAllowanceType";
                        string olddata = "";
                        string newdata = "allowancetypeCode = " + data.allowanceTypeCode.Trim() + "; allowanceTypeName1 =" + data.allowanceTypeName1.Trim() + "; allowanceTypeName2 = "+ data.allowanceTypeName2 +";  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateAllowanceType")]
        public AllowanceTypeListResult UpdateAllowanceType(UpdateAllowanceTypeParam data)
        {
            var ret = new AllowanceTypeListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_allowanceType
                                         where c.allowanceTypeID == data.allowanceTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.allowanceTypeCode + "; " + ds_update.allowanceTypeName1 + "; " + ds_update.allowanceTypeName2;
                            ds_update.allowanceTypeCode = data.allowanceTypeCode.ToString();
                            ds_update.allowanceTypeName1 = data.allowanceTypeName1.ToString();
                            ds_update.allowanceTypeName2 = data.allowanceTypeName2.ToString();
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateAllowanceType";
                       // string olddata = "";
                        string newdata = "allowancetypeCode = " + data.allowanceTypeCode.Trim() + "; allowanceTypeName1 =" + data.allowanceTypeName1.Trim() + "; allowanceTypeName2 = " + data.allowanceTypeName2 + ";  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelAllowanceType")]
        public AllowanceTypeListResult DelAllowanceType(DelAllowanceTypeParam data)
        {
            var ret = new AllowanceTypeListResult();
            //  WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_allowanceType
                                         where c.allowanceTypeID == data.allowanceTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelAllowanceType";
                        string olddata = "";
                        string newdata = "ID=" + data.allowanceTypeID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/TaxsList")]
        public TaxsListResult TaxsList(TaxsParam data)
        {
            var ret = new TaxsListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_tax = (from c in db.tb_taxs
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.taxsID,
                                            c.minBase,
                                            c.maxBase,
                                            c.taxsRate
                                        }).ToList();

                        if (ds_tax != null)
                        {
                            List<TaxsListViewModelResult> ResultObject = new List<TaxsListViewModelResult>();
                            ResultObject = ds_tax.Select(c => new TaxsListViewModelResult()
                            {
                                taxsID = c.taxsID.ToString(),
                                minBase = Convert.ToDouble(c.minBase).ToString("N"),
                                maxBase = Convert.ToDouble(c.maxBase).ToString("N"),
                                taxsRate = Convert.ToDouble(c.taxsRate).ToString("N")
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewTaxs")]
        public TaxsListResult NewTaxs(NewTaxsParam data)
        {
            var ret = new TaxsListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_taxs.Add(new tb_taxs()
                        {
                            minBase = data.minBase,
                            maxBase = data.maxBase,
                            taxsRate = data.taxsRate,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewTaxs";
                        string olddata = "";
                        string newdata = "minBase = " + data.minBase + "; maxBase =" + data.maxBase + "; taxRate = "+ data.taxsRate +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateTaxs")]
        public TaxsListResult UpdateTaxs(UpdateTaxsParam data)
        {
            var ret = new TaxsListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_taxs
                                         where c.taxsID == data.taxsID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "minBase = " + ds_update.minBase + "; maxBase = " + ds_update.maxBase + "; taxsRate = " + ds_update.taxsRate + "; statusid = 3";
                            ds_update.minBase = data.minBase;
                            ds_update.maxBase = data.maxBase;
                            ds_update.taxsRate = data.taxsRate;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateTaxs";
                        //string olddata = "";
                        string newdata = "minBase = " + data.minBase + "; maxBase =" + data.maxBase + "; taxRate = " + data.taxsRate + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelTaxs")]
        public TaxsListResult DelTaxs(DelTaxsParam data)
        {
            var ret = new TaxsListResult();
            //  WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_taxs
                                         where c.taxsID == data.taxsID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelTaxs";
                        string olddata = "";
                        string newdata = "ID=" + data.taxsID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/SSOTypeList")]
        public SSOTypeListResult SSOTypeList(SSOTypeListParam data)
        {
            var ret = new SSOTypeListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_ssotype = (from c in db.tb_ssoType
                                      where c.status_ID == 3
                                      select new
                                      {
                                          c.ssoTypeID,
                                          c.ssoName,
                                      }).ToList();

                        if (ds_ssotype != null)
                        {
                            List<SSOTypeListViewModelResult> ResultObject = new List<SSOTypeListViewModelResult>();
                            ResultObject = ds_ssotype.Select(c => new SSOTypeListViewModelResult()
                            {
                                ssoTypeID = c.ssoTypeID.ToString(),
                                ssoName = c.ssoName.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewSSOType")]
        public SSOTypeListResult NewSSOType(NewSSOTypeParam data)
        {
            var ret = new SSOTypeListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_ssoType.Add(new tb_ssoType()
                        {
                            ssoName = data.ssoName.ToString(),                          
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewSSOType";
                        string olddata = "";
                        string newdata = "ssoName = " + data.ssoName.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateSSOType")]
        public SSOTypeListResult UpdateSSOType(UpdateSSOTypeParam data)
        {
            var ret = new SSOTypeListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_ssoType
                                         where c.ssoTypeID == data.ssoTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = ds_update.ssoName;
                            ds_update.ssoName = data.ssoName;                         
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateSSOType";
                        //string olddata = "";
                        string newdata = "ssoName = " + data.ssoName.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelSSOType")]
        public SSOTypeListResult DelSSOType(DelSSOTypeParam data)
        {
            var ret = new SSOTypeListResult();
            //  WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_ssoType
                                         where c.ssoTypeID == data.ssoTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "Delssotype";
                        string olddata = "";
                        string newdata = "ID=" + data.ssoTypeID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/SSOList")]
        public SSOListResult SSOList(SSOListParam data)
        {
            var ret = new SSOListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_sso = (from c in db.tb_sso
                                          where c.status_ID == 3
                                          select new
                                          {
                                              c.ssoID,
                                              c.ssoTypeID,
                                              c.tb_ssoType.ssoName,
                                              c.minBase,
                                              c.maxBase,
                                              c.employeeRate,
                                              c.employerRate
                                          }).ToList();

                        if (ds_sso != null)
                        {
                            List<SSOListViewModelResult> ResultObject = new List<SSOListViewModelResult>();
                            ResultObject = ds_sso.Select(c => new SSOListViewModelResult()
                            {
                                ssoID = c.ssoID.ToString(),
                                ssoTypeID = c.ssoTypeID.ToString(),
                                ssoname= c.ssoName,
                                minBase = Convert.ToDouble(c.minBase).ToString("N"),
                                maxBase = Convert.ToDouble(c.maxBase).ToString("N"),
                                employeeRate = Convert.ToDouble(c.employeeRate).ToString("N"),
                                employerRate = Convert.ToDouble(c.employerRate).ToString("N"),
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
        [HttpPost]
        [Route("api/User/NewSSO")]
        public SSOListResult NewSSO(NewSSOParam data)
        {
            var ret = new SSOListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_sso.Add(new tb_sso()
                        {
                            ssoTypeID = Convert.ToInt32(data.ssoTypeID),
                            minBase = Convert.ToDouble(data.minBase),
                            maxBase = Convert.ToDouble(data.maxBase),
                            employeeRate = Convert.ToDouble(data.employeeRate),
                            employerRate = Convert.ToDouble(data.employerRate),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewSSO";
                        string olddata = "";
                        string newdata = "ssoTypeID = " + data.ssoTypeID + "; minBase =" + data.minBase + "; maxBase = "+ data.maxBase +"; employeeRate = "+ data.employeeRate +"; employerRate = "+ data.employerRate +";  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateSSO")]
        public SSOListResult UpdateSSO(UpdateSSOParam data)
        {
            var ret = new SSOListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_sso
                                         where c.ssoID == data.ssoID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "ssoTypeID = " + ds_update.ssoTypeID + "; minBase =" + ds_update.minBase + "; maxBase = " + ds_update.maxBase + "; employeeRate = " + ds_update.employeeRate + "; employerRate = " + ds_update.employerRate + ";  status_ID = 3";
                            ds_update.ssoTypeID = data.ssoTypeID;
                            ds_update.minBase = data.minBase;
                            ds_update.maxBase = data.maxBase;
                            ds_update.employeeRate = data.employeeRate;
                            ds_update.employerRate = data.employerRate;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();
                        //insert log
                        string logevent = "Update";
                        string logmodules = "UpdateSSO";
                        //string olddata = "";
                        string newdata = "ssoTypeID = " + data.ssoTypeID + "; minBase =" + data.minBase + "; maxBase = " + data.maxBase + "; employeeRate = " + data.employeeRate + "; employerRate = " + data.employerRate + ";  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/DelSSO")]
        public SSOListResult DelSSOType(DelSSOParam data)
        {
            var ret = new SSOListResult();
            //  WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_sso
                                         where c.ssoID == data.ssoID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelSSO";
                        string olddata = "";
                        string newdata = "ID=" + data.ssoID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }


        [HttpPost]
        [Route("api/User/LeaveBalance")]
        public LeaveBalanceResult LaveBalance(LeaveBalanceParam data)
        {
            var ret = new LeaveBalanceResult();
            int GET_UserID;
        //    WriteLogFile("LaveBalance " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        GET_UserID = int.Parse(ds_tokey.empID.ToString());
                        // find leave balance
                        var ds_leave = (from c in db.v_sumEmpLeaveName
                                        where c.empID == GET_UserID & c.leaveTypeID <= 5 & c.leaveTypeID !=4
                                        select new
                                        {
                                            c.leaveTypeID,
                                            c.leaveTypeName1,
                                            c.leaveTypeName2,
                                            c.sumDayUse,
                                            c.amountDay
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<LeaveBalanceViewModel> ResultObject = new List<LeaveBalanceViewModel>();
                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_leave.Select(c => new LeaveBalanceViewModel()
                                {
                                    LeaveName = c.leaveTypeName1,
                                    leaveTotal = c.amountDay.ToString(),
                                    leaveUse = c.sumDayUse.ToString()
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_leave.Select(c => new LeaveBalanceViewModel()
                                {
                                    LeaveName = c.leaveTypeName2,
                                    leaveTotal = c.amountDay.ToString(),
                                    leaveUse = c.sumDayUse.ToString()
                                }).ToList();
                            }
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Leave balance ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No permission access";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }

                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }

        }

        [HttpPost]
        [Route("api/User/LeaveBalanceAll")]
        public LeaveBalanceAllResult LeaveBalanceAll(LeaveBalanceAllParam data)
        {
            var ret = new LeaveBalanceAllResult();
            int GET_UserID;
            //    WriteLogFile("LaveBalance " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                  
                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        GET_UserID = int.Parse(ds_tokey.empID.ToString());
                        // find leave balance
                        var ds_leave = (from c in db.v_leaveBalanceAll
                                        where c.empID == GET_UserID & c.leaveTypeID <= 2 
                                        select new
                                        {
                                            c.leaveTypeID,
                                            c.leaveTypeName1,
                                            c.leaveTypeName2,
                                            c.leaveDay,
                                            c.TotalDay
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<LeaveBalanceAllViewModel> ResultObject = new List<LeaveBalanceAllViewModel>();
                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_leave.Select(c => new LeaveBalanceAllViewModel()
                                {
                                    LeaveName = c.leaveTypeName1,
                                    leaveTotal = c.leaveDay.ToString(),
                                    leaveDayCanUse = c.TotalDay.ToString()
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_leave.Select(c => new LeaveBalanceAllViewModel()
                                {
                                    LeaveName = c.leaveTypeName2,
                                    leaveTotal = c.leaveDay.ToString(),
                                    leaveDayCanUse = c.TotalDay.ToString()
                                }).ToList();
                            }
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Leave balance ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No permission access";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }

                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }

        }
        [HttpPost]
        [Route("api/User/publicholidays")]
        public PublicHolidayResult PublicHolidayList(publicHolidayParam data)
        {
            var ret = new PublicHolidayResult();
            WriteLogFile("PublicHolidayList : " + data.TokenKey.ToString());
            List<PublicHolidayViewModelResult> ResultObjectHoliday = new List<PublicHolidayViewModelResult>();
            int GET_UserID;
            int Yearview;           
            string GET_lang;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        GET_UserID = int.Parse(ds_tokey.empID.ToString());
                        GET_lang = data.lang.ToString();
                        Yearview = int.Parse(data.yearView.ToString());

                        ResultObjectHoliday = HolidayViewModel(Yearview);
                        ret.ModelErrors = null;
                        ret.ResultObject = ResultObjectHoliday;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile("" + ex.Message);
                ret.ModelErrors = "Error PublicHolidayList: " + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/publicholidayList")]
        public PublicHolidayListResult PublicHolidayList1(publicHolidayListParam data)
        {
            var ret = new PublicHolidayListResult();
            WriteLogFile("PublicHolidayListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 11 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        
                        // find leave type
                        var ds_leave = (from c in db.tb_publicHoliday
                                        where c.status_ID == 3 orderby c.publicHoliday descending
                                        select new
                                        {
                                            c.publicHolidayID,
                                            c.publicHoliday,
                                            c.publicHolidayName1,
                                            c.publicHolidayName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<PublicHolidayListViewModelResult> ResultObject = new List<PublicHolidayListViewModelResult>();
                            if (data.lang == "1" || data.lang == null)
                            {
                               
                            }
                            else if (data.lang == "2")
                            {
                               
                            }
                            // string s = dt.ToString("dd/M/yyyy", CultureInfo.InvariantCulture);
                         
                            ResultObject = ds_leave.Select(c => new PublicHolidayListViewModelResult()
                            {
                                publicHolidayID = c.publicHolidayID.ToString(),
                                publicHoliday = c.publicHoliday.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                               // publicHoliday  = c.publicHoliday.ToString("dd/M/yyyy", CultureInfo.InvariantCulture),
                                publicHolidayName1 = c.publicHolidayName1.ToString(),
                                publicHolidayName2 = c.publicHolidayName2.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Public Holiday ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Public Holiday";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewPublicholidays")]
        public PublicHolidayListResult NewPublicholidays(NewPublicHolidayParam data)
        {

            var ret = new PublicHolidayListResult();
            WriteLogFile("NewPublicHoliday " + data.TokenKey + ", publicHoliday:"+ data.publicHoliday.ToString() +", publicHolidayName1:"+ data.publicHolidayName1.ToString() + ", publicHolidayName2:"+ data.publicHolidayName1.ToString() );
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 11 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        DateTime publicDate = DateTime.Parse(data.publicHoliday.ToString());
                        db.tb_publicHoliday.Add(new tb_publicHoliday()
                        {
                            publicHoliday = publicDate,
                            publicHolidayName1 = data.publicHolidayName1.ToString(),
                            publicHolidayName2 = data.publicHolidayName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewPublicholidays";
                        string olddata = "";
                        string newdata = "publicHoliday = " + data.publicHoliday + "; publicHolidayName1 =" + data.publicHolidayName1.Trim() + "; publicHolidayName2 = "+ data.publicHolidayName2 +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/UpdatePublicholiday")]
        public PublicHolidayListResult UpdatePublicholiday (UpdatePublicHolidayParam data)
        {
            var ret = new PublicHolidayListResult();
            //WriteLogFile("PublicHolidayListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 11 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        DateTime publicDate = DateTime.Parse(data.publicHoliday.ToString());
                        // find leave type

                        /*var ds_update = (from c in db.tb_publicHoliday
                                         where c.publicHolidayID == data.publicHolidayID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.publicHoliday = publicDate;
                            ds_update.publicHolidayName1 = data.publicHolidayName1;
                            ds_update.publicHolidayName2 = data.publicHolidayName2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;

                        }
                        db.SaveChanges();*/


                        string command;
                        string result = "0";

                        string olddata = "";
                        olddata = "publicHoliday = "+ publicDate +"; publicHolidayName1 = "+ data.publicHolidayName1 +"; publicHolidayName2 = "+ data.publicHolidayName2 +"";

                        command = "exec pd_updatePublicHoliday @publicholiday ='"+ publicDate +"', @publicholidayName1 = N'"+ data.publicHolidayName1 +"', " +
                            "@publicholidayName2=N'"+ data.publicHolidayName2 +"', @publicholidayid="+ data.publicHolidayID +"";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand mycommand = new SqlCommand(command, myConnection))
                            {
                                 object value = mycommand.ExecuteScalar();
                                 if (value != null)
                                 {
                                     result = value.ToString();
                                 }
                            }
                        }

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdatePublicholiday";
                        //string olddata = "";
                        string newdata = "publicHoliday = " + data.publicHoliday + "; publicHolidayName1 =" + data.publicHolidayName1.Trim() + "; publicHolidayName2 = " + data.publicHolidayName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                        if (data.lang == "1")
                            {
                                ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Update complete";
                            }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelPublicholiday")]
        public PublicHolidayListResult DelLeaveType(DelPublicHolidayParam data)
        {
            var ret = new PublicHolidayListResult();
            WriteLogFile("DelPublicholiday " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 11 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_publicHoliday
                                         where c.publicHolidayID == data.publicHolidayID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelPublicholiday";
                        string olddata = "";
                        string newdata = "ID=" + data.publicHolidayID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/LeaveType")]
        public LeaveTypeResult LaveType(LeaveTypeParam data)
        {
            var ret = new LeaveTypeResult();
            WriteLogFile("LeaveType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        // find leave type
                        var ds_leave = (from c in db.tb_leaveType
                                        where c.status_ID ==3
                                        select new
                                        {
                                            c.leaveTypeID,
                                            c.leaveTypeName1,
                                            c.leaveTypeName2,
                                            c.leaveTypeCode
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<LeaveTypeViewModel> ResultObject = new List<LeaveTypeViewModel>();
                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_leave.Select(c => new LeaveTypeViewModel()
                                {
                                    TypeID = c.leaveTypeID.ToString(),
                                    TypeName = c.leaveTypeName1,
                                    TypeName1 = c.leaveTypeName1,
                                    TypeName2 = c.leaveTypeName2,
                                    TypeShotname = c.leaveTypeCode
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_leave.Select(c => new LeaveTypeViewModel()
                                {
                                    TypeID = c.leaveTypeID.ToString(),
                                    TypeName = c.leaveTypeName2,
                                    TypeName1 = c.leaveTypeName1,
                                    TypeName2 = c.leaveTypeName2,
                                    TypeShotname = c.leaveTypeCode
                                }).ToList();
                            }

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Leave Type ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Leave Type";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewLeaveType")]
        public LeaveTypeResult NewLeaveType(NewLeaveTypeParam data)
        {
            var ret = new LeaveTypeResult();           
            WriteLogFile("NewLeaveType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 14 && c.app_add ==1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    
                    if (ds_tokey != null)
                    {                         
                        // find leave type
                         db.tb_leaveType.Add(new tb_leaveType()
                        {                           
                            leaveTypeCode = data.TypeShotname.ToString(),
                            leaveTypeName1 = data.TypeName1.ToString(),
                            leaveTypeName2=data.TypeName2.ToString(),
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                           date_add=DateTime.Now
                         });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewLeaveType";
                        string olddata = "";
                        string newdata = "leaveTypeCode = " + data.TypeShotname + "; leaveTypeName1 =" + data.TypeName1 + "; leaveTypeName2 = "+ data.TypeName2 +"; balanceCheck = 1; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang =="1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        } else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                                                     
                            
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;                        
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }
        [HttpPost]
        [Route("api/User/UpdateLeaveType")]
        public LeaveTypeResult UpdateLeaveType(UpdateLeaveTypeParam data)
        {
            var ret = new LeaveTypeResult();
            WriteLogFile("UpdateLeaveType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 14 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_leaveType
                                         where c.leaveTypeID == data.TypeID
                                         select c).FirstOrDefault();
                        if (ds_update !=null)
                        {
                            olddata = "leaveTypeCode = " + ds_update.leaveTypeCode + "; leaveTypeName1 = " + ds_update.leaveTypeName1 + "; leaveTypeName2 = " + ds_update.leaveTypeName2 + "; balanceCheck = " + ds_update.balanceCheck + "; status_id = 3;";
                            ds_update.leaveTypeCode = data.TypeShotname;
                            ds_update.leaveTypeName1 = data.TypeName1;
                            ds_update.leaveTypeName2 = data.TypeName2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateLeaveType";
                        //string olddata = "";
                        string newdata = "leaveTypeCode = "+ data.TypeShotname +"; leaveTypeName1 = "+ data.TypeName1 +"; leavetypeName2 = "+ data.TypeName2 +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/DelLeaveType")]
        public LeaveTypeResult DelLeaveType(DelLeaveTypeParam data)
        {
            var ret = new LeaveTypeResult();
            WriteLogFile("DelLeaveType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 14 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_leaveType
                                         where c.leaveTypeID == data.TypeID
                                         select c).FirstOrDefault();


                        if (ds_update != null)
                        {                   
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelLeaveType";
                        string olddata = "";
                        string newdata = "ID=" + data.TypeID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }


        [HttpPost]
        [Route("api/User/LeaveSetting")]
        public LeaveSettingListResult LeaveSetting(LeaveTypeParam data)
        {
            var ret = new LeaveSettingListResult();
          //  WriteLogFile("LeaveSetting " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_leave = (from c in db.tb_leaveSetting
                                        where c.status_ID == 3
                                        select new
                                        {
                                            c.leaveSettingID,
                                            c.leaveTypeID,
                                            c.tb_leaveType.leaveTypeName1,
                                            c.tb_leaveType.leaveTypeName2,
                                            c.amountDay,
                                            c.remark
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<LeaveSettingListViewModelResult> ResultObject = new List<LeaveSettingListViewModelResult>();
                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_leave.Select(c => new LeaveSettingListViewModelResult()
                                {
                                    leaveSettingID = c.leaveSettingID.ToString(),
                                    leaveTypeID = c.leaveTypeID.ToString(),
                                    leaveTypeText = c.leaveTypeName1.ToString(),
                                    amountDay = c.amountDay.ToString(),
                                    remark = c.remark
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_leave.Select(c => new LeaveSettingListViewModelResult()
                                {
                                    leaveSettingID = c.leaveSettingID.ToString(),
                                    leaveTypeID = c.leaveTypeID.ToString(),
                                    leaveTypeText = c.leaveTypeName2.ToString(),
                                    amountDay = c.amountDay.ToString(),
                                    remark = c.remark
                                }).ToList();
                            }

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Leave Type ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Leave Type";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewLeaveSetting")]
        public LeaveSettingListResult NewLeaveSetting(NewLeaveSettingParam data)
        {
            var ret = new LeaveSettingListResult();
         //   WriteLogFile("LeaveSettingListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var findLeaveSetting = (from c in db.tb_leaveSetting
                                                where c.leaveTypeID == data.leaveTypeID && c.status_ID ==3
                                                select new
                                                {
                                                    c.leaveSettingID
                                                }
                                                ).ToList();
                        if (findLeaveSetting.Count >0)
                        {
                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ມີໃນຖານຂໍ້ມູນແລ້ວ ...!";
                            }
                            else
                            {
                                ret.ModelErrors = "Have in database already ...!";
                            }
                        } else
                        {
                            db.tb_leaveSetting.Add(new tb_leaveSetting()
                            {
                                leaveTypeID = data.leaveTypeID,
                                empGroupID = 1,
                                amountDay = data.amountDay,
                                remark = data.remark.ToString(),
                                status_ID = 3,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });
                            db.SaveChanges();

                            //This is save log
                            string logevent = "New";
                            string logmodules = "NewLeaveSetting";
                            string olddata = "";
                            string newdata = "leaveTypeID = " + data.leaveTypeID + "; empGroupID = 1; amountDay = "+ data.amountDay +"; remark = "+ data.remark +"; status_ID = 3";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                        }

                       


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
        [HttpPost]
        [Route("api/User/UpdateLeaveSetting")]
        public LeaveSettingListResult UpdateLeaveSetting(UpdateLeaveSettingParam data)
        {
            var ret = new LeaveSettingListResult();
            WriteLogFile("UpdateLeaveType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string olddata = "";
                        // find leave type
                        var ds_update = (from c in db.tb_leaveSetting
                                         where c.leaveSettingID == data.leaveSettingID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "leaveTypeID = " + ds_update.leaveTypeID + "; amountDay = " + ds_update.amountDay + "; remark =" + ds_update.remark + "; statusID = 3";
                            ds_update.leaveTypeID = data.leaveTypeID;
                            ds_update.amountDay = data.amountDay;
                            ds_update.remark = data.remark;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateLeaveSetting";
                        //string olddata = "";
                        string newdata = "leaveTypeID = "+ data.leaveTypeID +"; AmountDay = "+ data.amountDay +"; remark = "+ data.remark +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/DelLeaveSetting")]
        public LeaveSettingListResult DelLeaveSetting(DelLeaveSettingParam data)
        {
            var ret = new LeaveSettingListResult();
            //WriteLogFile("LeaveSettingListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_leaveSetting
                                         where c.leaveSettingID == data.leaveSettingID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelLeaveSetting";
                        string olddata = "";
                        string newdata = "ID=" + data.leaveSettingID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }

        [HttpPost]
        [Route("api/User/ApprovalTypeList")]
        public ApprovalTypeListResult ApprovalTypeList(ApprovalTypeListParam data)
        {
            var ret = new ApprovalTypeListResult();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.tb_users
                                    where c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_apptype = (from c in db.tb_appType
                                     where c.status_id == 3
                                     select new
                                     {
                                         c.approveTypeID,
                                         c.approveTypeText,
                                     }).ToList();
                        if (ds_apptype != null)
                        {
                            List<ApprovalTypeListViewModelResult> ResultObject = new List<ApprovalTypeListViewModelResult>();
                            ResultObject = ds_apptype.Select(c => new ApprovalTypeListViewModelResult()
                            {
                                appTypeID = c.approveTypeID.ToString(),
                                appTypeName = c.approveTypeText.ToString(),
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have app Type ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No app Type";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
        [HttpPost]
        [Route("api/User/NewApprovalType")]
        public ApprovalTypeListResult NewApprovalType(NewApprovalTypeParam data)
        {
            var ret = new ApprovalTypeListResult();

            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_appType.Add(new tb_appType()
                        {
                            approveTypeText = data.appTypeName,
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();


                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewApprovalType";
                        string olddata = "";
                        string newdata = "approveTypeText = " + data.appTypeName.Trim() + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }

                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
        [HttpPost]
        [Route("api/User/UpdateApprovalType")]
        public ApprovalTypeListResult UpdateApprovalType(UpdateApprovalTypeParam data)
        {
            var ret = new ApprovalTypeListResult();
            WriteLogFile("Update Approval Type " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string olddata = "";
                        // find leave type
                        var ds_update = (from c in db.tb_appType
                                         where c.approveTypeID == data.appTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "approveTypeText=" + ds_update.approveTypeText + "";
                            ds_update.approveTypeText = data.appTypeName;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateApprovalType";
                        //string olddata = "";
                        string newdata = "approveTypeText = "+ data.appTypeName +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }


                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
        [HttpPost]
        [Route("api/User/DelApprovalType")]
        public ApprovalTypeListResult DelApprovalType(DelApprovalTypeParam data)
        {
            var ret = new ApprovalTypeListResult();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_appType
                                         where c.approveTypeID == data.appTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelApprovalType";
                        string olddata = "";
                        string newdata = "ID=" + data.appTypeID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }

                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }         

        [HttpPost]
        [Route("api/User/ApproveSettingList")]
        public ApproveSettingListResult ApproveSettingList(ApprovalParam data)
        {
            var ret = new ApproveSettingListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_ssotype = (from c in db.tb_approvalSetting
                                          where c.status_id == 3 && c.approveTypeID == data.ApprovalTypeID
                                          select new
                                          {
                                              c.approveID,
                                              c.appLevel,
                                              c.approveTypeID,
                                              c.tb_appType.approveTypeText,
                                              c.approveDept,
                                              c.tb_department.deptName1,
                                              c.tb_department.deptName2,
                                              c.empID,
                                              c.tb_employees.firstName1,
                                              c.tb_employees.lastName1,
                                              c.tb_employees.firstName2,
                                              c.tb_employees.lastName2

                                          }).ToList();

                        if (ds_ssotype != null)
                        {
                            List<ApproveSettingListViewModelResult> ResultObject = new List<ApproveSettingListViewModelResult>();

                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_ssotype.Select(c => new ApproveSettingListViewModelResult()
                                {
                                    approveID = c.approveID.ToString(),
                                    appLevel = c.appLevel.ToString(),
                                    approveDept = c.approveDept.ToString(),
                                    deptName =c.deptName1.ToString(),
                                    empID = c.empID.ToString(),
                                    firstName = c.firstName1.ToString(),
                                    lastName = c.lastName1.ToString()
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_ssotype.Select(c => new ApproveSettingListViewModelResult()
                                {
                                    approveID = c.approveID.ToString(),
                                    appLevel = c.appLevel.ToString(),
                                    approveDept = c.approveDept.ToString(),
                                    deptName = c.deptName2.ToString(),
                                    empID = c.empID.ToString(),
                                    firstName = c.firstName2.ToString(),
                                    lastName = c.lastName2.ToString()
                                }).ToList();
                            }
                            
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewApproveSetting")]
        public ApproveSettingListResult NewApproveSetting(NewApproveSettingParam data)
        {
            var ret = new ApproveSettingListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        int set_appLevel = int.Parse(data.appLevel.ToString());
                        int set_approveTypeID = int.Parse(data.approveTypeID.ToString());
                        int set_approveDept = int.Parse(data.approveDept.ToString());
                        int set_empID = int.Parse(data.empID.ToString());
                        db.tb_approvalSetting.Add(new tb_approvalSetting
                        {
                            appLevel = set_appLevel,
                            approveTypeID = set_approveTypeID,
                            approveDept = set_approveDept,
                            empID = set_empID,
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewApproveSetting";
                        string olddata = "";
                        string newdata = "appLevel = " + data.appLevel + "; approveTypeID =" + data.approveTypeID + "; approveDept = "+ data.approveDept +"; empID = "+ data.empID +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateApproveSetting")]
        public ApproveSettingListResult UpdateApproveSetting(UpdateApproveSettingParam data)
        {
            var ret = new ApproveSettingListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string olddata = "";
                        var ds_update = (from c in db.tb_approvalSetting
                                         where c.approveID == data.approveID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "appLevel = " + ds_update.appLevel + "; approveTypeID =" + ds_update.approveTypeID + "; approveDept = " + ds_update.approveDept + "; empID = " + ds_update.empID + "; status_ID = 3";
                            ds_update.approveTypeID = data.approveTypeID;
                            ds_update.approveDept = data.approveDept;
                            ds_update.empID = data.empID;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateApproveSetting";
                        //string olddata = "";
                        string newdata = "appLevel = " + data.appLevel + "; approveTypeID =" + data.approveTypeID + "; approveDept = " + data.approveDept + "; empID = " + data.empID + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelApproveSetting")]
        public ApproveSettingListResult DelApproveSetting(DelApproveSettingParam data)
        {
            var ret = new ApproveSettingListResult();
            //  WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_approvalSetting
                                         where c.approveID == data.approveID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelApproveSetting";
                        string olddata = "";
                        string newdata = "ID=" + data.approveID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }


        }


        [HttpPost]
        [Route("api/User/employeeSelList")]
        public EmployeeSelListResult EmployeeSelList(employessSelListParam data)
        {
            var ret = new EmployeeSelListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)  
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_empInfo
                                            //where c.status_ID == 3 && c.tb_unit.tb_department.deptID == data.deptID && c.empID != data.empID
                                        where c.status_ID == 3  && c.empID != data.empID
                                        select new
                                        {
                                            c.empID,
                                            c.tb_employees.firstName1,
                                            c.tb_employees.lastName1,
                                            c.tb_employees.firstName2,
                                            c.tb_employees.lastName2                                            
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<EmployeeSelListViewModelResult> ResultObject = new List<EmployeeSelListViewModelResult>();
                           

                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_leave.Select(c => new EmployeeSelListViewModelResult()
                                {
                                    empID = c.empID.ToString(),
                                    firstName = c.firstName1.ToString(),
                                    lastName = c.lastName1.ToString()
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_leave.Select(c => new EmployeeSelListViewModelResult()
                                {
                                    empID = c.empID.ToString(),
                                    firstName = c.firstName2.ToString(),
                                    lastName = c.lastName2.ToString()
                                }).ToList();
                            }



                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SelEMP")]
        public EmployeeSelListResult SelEMP(employessSelListParam data)
        {
            var ret = new EmployeeSelListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_leave = (from c in db.tb_empInfo
                                        where c.status_ID == 3 && c.tb_unit.tb_department.deptID == data.deptID
                                        select new
                                        {
                                            c.empID,
                                            c.tb_employees.firstName1,
                                            c.tb_employees.lastName1,
                                            c.tb_employees.firstName2,
                                            c.tb_employees.lastName2
                                        }).ToList();

                        if (ds_leave != null)
                        {
                            List<EmployeeSelListViewModelResult> ResultObject = new List<EmployeeSelListViewModelResult>();


                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_leave.Select(c => new EmployeeSelListViewModelResult()
                                {
                                    empID = c.empID.ToString(),
                                    firstName = c.firstName1.ToString(),
                                    lastName = c.lastName1.ToString()
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_leave.Select(c => new EmployeeSelListViewModelResult()
                                {
                                    empID = c.empID.ToString(),
                                    firstName = c.firstName2.ToString(),
                                    lastName = c.lastName2.ToString()
                                }).ToList();
                            }



                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have company ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No company";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/GetEmployeesInfo")]
        public EmployeeInfoResult GetEmployeesInfo(GetEmployeeIngoParam data)
        {
            var ret = new EmployeeInfoResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_ssotype = (from c in db.v_employess
                                          where c.status_id == 3 && c.empID == data.empID
                                          select new
                                          {
                                              c.empID,
                                              c.empNo,    
                                              c.empTitleName,                                       
                                              c.firstName1,
                                              c.lastName1,
                                              c.nickName1,
                                              c.firstName2,
                                              c.lastName2,
                                              c.nickName2,
                                              c.genderID,
                                              c.dob,
                                              c.fstatusID,
                                              c.nationalityID,
                                              c.ethnicID,    
                                              c.religionID,
                                              c.IDCrad,
                                              c.passport,
                                              c.address1,
                                              c.district_id1,
                                              c.Pro_ID,
                                             // c.address2,
                                            //  c.district_id2,                                             
                                              c.empMobile,
                                              c.empEmail,
                                              c.empPhoto,
                                              c.paymentPercent,
                                              c.mgrid,
                                              c.spName,
                                              c.spMobile,
                                              c.spEmail,
                                              c.spAddress,
                                              c.spJob,
                                              c.spJobAddress,                                           
                                              c.empPosition,
                                              c.unitID,
                                              c.companyID,
                                              c.deptID,
                                              c.empLevelID,
                                              c.empGroupID,                                             
                                              c.shiftWorkingID,
                                              c.costCenterID,                                            
                                              c.hireDay,
                                              c.assignmentLocation,
                                              c.currentAddress,
                                              c.workingStatusID,
                                              c.empTypeID,
                                              c.TaxTypeID,
                                              c.positionID,
                                              c.dob1,
                                              c.empDayID,
                                              c.approveby
                                          }).ToList();                        
                        if (ds_ssotype != null)
                        {
                            List<getEmployeeInfoResult> ResultObject = new List<getEmployeeInfoResult>();
                            if (data.lang == "1" || data.lang == null || data.lang == "")
                            {
                                ResultObject = ds_ssotype.Select(c => new getEmployeeInfoResult()
                                {
                                    empID = c.empID.ToString(),
                                    empNo = c.empNo.ToString(),
                                    empTitleName = "",
                                    firstName1 = c.firstName1.ToString(),
                                    lastName1 = c.lastName1.ToString(),
                                    nickName1 = c.nickName1.ToString(),
                                    firstName2 = c.firstName2.ToString(),
                                    lastName2 = c.lastName2.ToString(),
                                    nickName2 = c.nickName2.ToString(),
                                    genderID = c.genderID.ToString(),
                                    dob = Convert.ToDateTime(c.dob1).ToString("yyyy-MM-dd"),      
                                    //dob = c.dob1.ToString(),
                                    fstatusID = c.fstatusID.ToString(),
                                    nationalityID = c.nationalityID.ToString(),
                                    ethnicID = c.ethnicID.ToString(),
                                    religionID = c.religionID.ToString(),
                                    IDCrad = c.IDCrad.ToString(),
                                    passport = c.passport.ToString(),
                                    address1 = c.address1.ToString(),
                                    district_id1 = c.district_id1.ToString(),
                                    ProvID1 = c.Pro_ID.ToString(),
                                  //  address2 = c.address2.ToString(),
                                  //  district_id2 = c.district_id2.ToString(),
                                    empMobile = c.empMobile.ToString(),
                                    empEmail = c.empEmail.ToString(),
                                    empPhoto = c.empPhoto.ToString(),
                                    paymentPercent = c.paymentPercent.ToString(),
                                    mgrid = c.mgrid.ToString(),
                                    spName = c.spName.ToString(),
                                    spMobile = c.spMobile.ToString(),
                                    spEmail = c.spEmail.ToString(),
                                    spAddress = c.spAddress.ToString(),
                                    spJob = c.spJob.ToString(),
                                    spJobAddress = c.spJobAddress.ToString(),
                                    workingStatus = c.workingStatusID.ToString(),
                                    emp_position = c.empPosition.ToString(),
                                    emp_unitID=c.unitID.ToString(),
                                    emp_companyID = c.companyID.ToString(),
                                    emp_deptID = c.deptID.ToString(),
                                    emp_empLevelID = c.empLevelID.ToString(),
                                    emp_empGroupID = c.empGroupID.ToString(),
                                    emp_costCenterID = c.costCenterID.ToString(),
                                    emp_shiftWorkingID = c.shiftWorkingID.ToString(),
                                    emp_mgrid = c.mgrid.ToString(),
                                    emp_AssignmemtLocation = c.assignmentLocation.ToString(),
                                    emp_CurrentAddress = c.currentAddress.ToString(),
                                    emp_hireDay = Convert.ToDateTime(c.hireDay).ToString("yyyy-MM-dd"),
                                    emp_empTypeID = c.empTypeID.ToString(),
                                    emp_TaxTypeID = c.TaxTypeID.ToString(),
                                    emp_positionID =c.positionID.ToString(),
                                    empDayID = c.empDayID,
                                    approveby = c.approveby.ToString()

                                    //delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_ssotype.Select(c => new getEmployeeInfoResult()
                                {
                                    empID = c.empID.ToString(),
                                    empNo = c.empNo.ToString(),
                                    empTitleName = "",
                                    firstName1 = c.firstName1.ToString(),
                                    lastName1 = c.lastName1.ToString(),
                                    nickName1 = c.nickName1.ToString(),
                                    firstName2 = c.firstName2.ToString(),
                                    lastName2 = c.lastName2.ToString(),
                                    nickName2 = c.nickName2.ToString(),
                                    genderID = c.genderID.ToString(),
                                    dob = Convert.ToDateTime(c.dob1).ToString("yyyy-MM-dd"),
                                   // dob = c.dob1,
                                    fstatusID = c.fstatusID.ToString(),
                                    nationalityID = c.nationalityID.ToString(),
                                    ethnicID = c.ethnicID.ToString(),
                                    religionID = c.religionID.ToString(),
                                    IDCrad = c.IDCrad.ToString(),
                                    passport = c.passport.ToString(),
                                    address1 = c.address1.ToString(),
                                    district_id1 = c.district_id1.ToString(),
                                    ProvID1 = c.Pro_ID.ToString(),
                                   // address2 = c.address2.ToString(),
                                   // district_id2 = c.district_id2.ToString(),
                                    empMobile = c.empMobile.ToString(),
                                    empEmail = c.empEmail.ToString(),
                                    empPhoto = c.empPhoto.ToString(),
                                    paymentPercent = c.paymentPercent.ToString(),
                                    mgrid = c.mgrid.ToString(),
                                    spName = c.spName.ToString(),
                                    spMobile = c.spMobile.ToString(),
                                    spEmail = c.spEmail.ToString(),
                                    spAddress = c.spAddress.ToString(),
                                    spJob = c.spJob.ToString(),
                                    spJobAddress = c.spJobAddress.ToString(),
                                    workingStatus = c.workingStatusID.ToString(),
                                    emp_position = c.empPosition.ToString(),
                                    emp_unitID = c.unitID.ToString(),
                                    emp_companyID = c.companyID.ToString(),
                                    emp_deptID = c.deptID.ToString(),
                                    emp_empLevelID = c.empLevelID.ToString(),
                                    emp_empGroupID = c.empGroupID.ToString(),
                                    emp_costCenterID = c.costCenterID.ToString(),
                                    emp_shiftWorkingID = c.shiftWorkingID.ToString(),
                                    emp_mgrid = c.mgrid.ToString(),
                                    emp_AssignmemtLocation = c.assignmentLocation.ToString(),
                                    emp_CurrentAddress = c.currentAddress.ToString(),
                                    emp_hireDay = Convert.ToDateTime(c.hireDay).ToString("yyyy-MM-dd"),
                                    emp_empTypeID = c.empTypeID.ToString(),
                                    emp_TaxTypeID = c.TaxTypeID.ToString(),
                                    emp_positionID = c.positionID.ToString(),
                                    approveby = c.approveby.ToString()
                                    //delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                                }).ToList();
                            }
                            ret.ModelErrors = "DISPLAY DATA.";
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/GetDelegateList")]
        public GetDelegateListResult GetDelegateList(GetDelegateListParam data)
        {
            var ret = new GetDelegateListResult();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_ssotype = (from c in db.p_get_manager_1(ds_tokey.empID)                                         
                                          select new
                                          {                                  
                                              c.mgrid,
                                              c.mgrFirstName,
                                              c.mgrLastName 
                                          }).ToList();
                        if (ds_ssotype != null)
                        {
                            List<GetDelegateListResultModel> ResultObject = new List<GetDelegateListResultModel>();
                             
                                ResultObject = ds_ssotype.Select(c => new GetDelegateListResultModel()
                                {
                                    empID = c.mgrid.ToString(),
                                    empName = c.mgrFirstName == null ? "" : c.mgrFirstName.ToString() + " " + c.mgrLastName.ToString()
                                }).ToList();
                           
                            ret.ModelErrors = "DISPLAY DATA.";
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have manager ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No manager";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private string checkdelegated(int? empid = 0, int delegateid = 0)
        {
            string getid = "1";
            using (var db = new db_hrmsEntities())
            {
                var dbchk = db.tb_delagate.Where(w => w.empID == empid && w.delegateEmpID == delegateid).FirstOrDefault();
                if(dbchk != null)
                {
                    getid = "2";
                }
            }
            return getid;
        }
        [HttpPost]
        [Route("api/User/EmployeesList")]
        public EmployeeListResult EmployeesList(GetEmployeeIngoParam data)
        {
            var ret = new EmployeeListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_ssotype = (from c in db.v_employess
                                            where c.status_id == 3
                                            select new
                                            {
                                                c.empID,
                                                c.empNo,
                                                c.firstName1,
                                                c.lastName1,
                                                c.nickName1,
                                                c.firstName2,
                                                c.lastName2,
                                                c.nickName2,
                                                c.genderText,
                                                c.dob,
                                                c.fstatusText,
                                                c.nationalityText,
                                                c.ethnicName1,
                                                c.ethnicName2,
                                                c.empEmail,
                                                c.empMobile,
                                                c.deptName1,
                                                c.deptName2,
                                                c.assignmentLocation,
                                                c.costCenterCode,
                                                c.costCenterText,
                                                c.currentAddress,
                                                c.empPosition,
                                                c.unitID,
                                                c.companyID,
                                                c.deptID,
                                                c.empLevelID,
                                                c.empGroupID,
                                                c.mgrid,
                                                c.shiftWorkingID,
                                                c.hireDay,
                                                c.positionID,
                                                c.approveby
                                            }).ToList();
                        if (data.empID > 0)
                        {
                            ds_ssotype =  (from c in db.v_employess
                             where c.status_id == 3 && c.empID == data.empID
                             select new
                             {
                                 c.empID,
                                 c.empNo,
                                 c.firstName1,
                                 c.lastName1,
                                 c.nickName1,
                                 c.firstName2,
                                 c.lastName2,
                                 c.nickName2,
                                 c.genderText,
                                 c.dob,
                                 c.fstatusText,
                                 c.nationalityText,
                                 c.ethnicName1,
                                 c.ethnicName2,
                                 c.empEmail,
                                 c.empMobile,
                                 c.deptName1,
                                 c.deptName2,
                                 c.assignmentLocation,
                                 c.costCenterCode,
                                 c.costCenterText,
                                 c.currentAddress,
                                 c.empPosition,
                                 c.unitID,
                                 c.companyID,
                                 c.deptID,
                                 c.empLevelID,
                                 c.empGroupID,
                                 c.mgrid,
                                 c.shiftWorkingID,
                                 c.hireDay,
                                 c.positionID,
                                 c.approveby
                             }).ToList();
                        }
                           

                        if (ds_ssotype != null)
                        {
                            List<getEmployeeListResult> ResultObject = new List<getEmployeeListResult>();

                            if (data.lang == "1" || data.lang == null)
                            {
                                ResultObject = ds_ssotype.Select(c => new getEmployeeListResult()
                                {
                                    empID = c.empID.ToString(),
                                    empNo =c.empNo.ToString(),
                                    emp_FullName1 = c.firstName1.ToString() + " " + c.lastName1.ToString(),
                                    emp_FullName2 = c.firstName2.ToString() + " " + c.lastName2.ToString(),
                                    emp_Gender = c.genderText.ToString(),
                                    emp_dob = c.dob.ToString(),
                                    emp_FstatusText = c.fstatusText.ToString(),
                                    emp_Nationallity =c.nationalityText.ToString(),
                                    emp_Ethic = c.ethnicName1.ToString(),
                                    emp_email = c.empEmail.ToString(),
                                    emp_tel = c.empMobile.ToString(),
                                    emp_position = c.empPosition.ToString(),
                                    emp_DeptText = c.deptName1.ToString(),
                                    emp_AssignmemtLocation = c.assignmentLocation.ToString(),
                                    emp_CurrentAddress = c.currentAddress.ToString(),
                                    emp_CostCenterCode = c.costCenterCode.ToString(),
                                    emp_CostCenterText = c.costCenterText.ToString(),
                                    emp_unitID = c.unitID.ToString(),
                                    emp_deptID = c.deptID.ToString(),
                                    emp_companyID = c.companyID.ToString(),
                                    emp_empGroupID = c.empGroupID.ToString(),
                                    emp_empLevelID = c.empLevelID.ToString(),
                                    emp_mgrid = c.mgrid.ToString(),
                                    emp_shiftWorkingID = c.shiftWorkingID.ToString(),
                                    emp_hireDay = Convert.ToDateTime(c.hireDay).ToString("yyyy-MM-dd"),
                                    approveby = c.approveby.ToString()
                                }).ToList();
                            }
                            else if (data.lang == "2")
                            {
                                ResultObject = ds_ssotype.Select(c => new getEmployeeListResult()
                                {
                                    empID = c.empID.ToString(),
                                    empNo = c.empNo.ToString(),
                                    emp_FullName1 = c.firstName1.ToString() + " " + c.lastName1.ToString(),
                                    emp_FullName2 = c.firstName2.ToString() + " " + c.lastName2.ToString(),
                                    emp_Gender = c.genderText.ToString(),
                                    emp_dob = c.dob.ToString(),
                                    emp_FstatusText = c.fstatusText.ToString(),
                                    emp_Nationallity = c.nationalityText.ToString(),
                                    emp_Ethic = c.ethnicName2.ToString(),
                                    emp_email = c.empEmail.ToString(),
                                    emp_tel = c.empMobile.ToString(),
                                    emp_position = c.empPosition.ToString(),
                                    emp_DeptText = c.deptName2.ToString(),
                                    emp_AssignmemtLocation = c.assignmentLocation.ToString(),                                    
                                    emp_CurrentAddress = c.currentAddress.ToString(),
                                    emp_CostCenterCode = c.costCenterCode.ToString(),
                                    emp_CostCenterText = c.costCenterText.ToString(),
                                    emp_unitID = c.unitID.ToString(),
                                    emp_deptID = c.deptID.ToString(),
                                    emp_companyID = c.companyID.ToString(),
                                    emp_empGroupID = c.empGroupID.ToString(),
                                    emp_empLevelID = c.empLevelID.ToString(),
                                    emp_mgrid = c.mgrid.ToString(),
                                    emp_shiftWorkingID = c.shiftWorkingID.ToString(),
                                    emp_hireDay = Convert.ToDateTime(c.hireDay).ToString("yyyy-MM-dd"),
                                    approveby = c.approveby.ToString()
                                }).ToList();
                            }

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }      

        [HttpPost]
        [Route("api/User/NewEmployees")]
        public EmployeeListResult NewEmployees(NewEmployeeParam data)
        {
            var ret = new EmployeeListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        DateTime strDOB = DateTime.Parse(data.dob.ToString());
                        // Check empCode
                        var ds_check = (from c in db.v_employess
                                  where c.empNo == data.empNo && c.status_id != 2                                  
                                  select c).ToList();
                        if (ds_check.Count > 0)
                        {
                            ret.ModelErrors = "Data duplication employee no : "+ data.empNo +" ";
                            ret.ResultObject = null;
                            ret.StatusCode = 409;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Token key not correct ...!";
                            return ret;
                        }  

                        db.tb_employees.Add(new tb_employees
                        {
                            empNo = data.empNo,
                            firstName1 = data.firstName1,
                            lastName1 = data.lastName1,
                            nickName1 = data.nickName1,
                            firstName2 = data.firstName2,
                            lastName2 = data.lastName2,
                            nickName2 = data.nickName2,
                            genderID = data.genderID,
                            dob = strDOB,
                            fstatusID = data.fstatusID,
                            nationalityID  = data.nationalityID,
                            ethnicID = data.EthicID,                           
                            IDCrad = data.IDCrad,
                            passport =data.passport,
                            address1 = data.address1,
                            district_id1 = data.district_id1,
                            empMobile = data.empMobile,
                            empEmail = data.empEmail,
                            empPhoto = data.empPhoto,                                  
                            spName = data.spName,
                            spMobile = data. spMobile,
                            spEmail = data.spEmail,
                            spAddress = data.spAddress,
                            spJob = data.spJob,
                            spJobAddress = data.spJobAddress,
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now,
                            paymentPercent=100,                          
                            empTitleName="",                 
                            religionID=1,
                            empDayID = data.empWorkingID

                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmployees";
                        string olddata = "";
                        string newdata = "empNo = "+ data.empNo +"; empTitleName = "+ data.empTitleName +"; firstname1 = "+ data.firstName1 +"; lastname1 = "+ data.lastName1 +"; " +
                            "nickName1 = "+ data.nickName1 +"; firstname2 = "+ data.firstName2 +"; lastname2 = "+ data.lastName2 +"; nickname2 = "+ data.nickName2 +"; " +
                            "gender = "+ data.genderID +"; dob = "+ data.dob +"; fstatusID = "+ data.fstatusID +"; nationalityID = "+ data.nationalityID +"; ethnicID = "+ data.EthicID +"; " +
                            "IDCard = "+ data.IDCrad +"; passport = "+ data.passport +"; address1 = "+ data.address1 +"; " +
                            "district_ID1 = "+ data.district_id1 +"; empMobile = "+ data.empMobile +"; empEmail = "+ data.empEmail +"; " +
                            "empPhoto = "+ data.empPhoto +"; spName = "+ data.spName +"; spMobile = "+ data.spMobile +"; spEmail = "+ data.spEmail +";" +
                            " spAddress = "+ data.spAddress +"; spJob = "+ data.spJob +"; spJobAddress = "+ data.spJobAddress +"; status_ID = 3; religionID = 1; empDayID = "+ data.empWorkingID +"";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmployees")]
        public EmployeeListResult UpdateEmployees(UpdateEmployeeParam data)
        {
            var ret = new EmployeeListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        DateTime strDOB = DateTime.Parse(data.dob.ToString());
                        var ds_update = (from c in db.tb_employees
                                         where c.empID == data.empID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "empNo = " + ds_update.empNo + "; empTitleName = " + ds_update.empTitleName + "; firstname1 = " + ds_update.firstName1 + "; lastname1 = " + ds_update.lastName1 + "; " +
                            "nickName1 = " + ds_update.nickName1 + "; firstname2 = " + ds_update.firstName2 + "; lastname2 = " + ds_update.lastName2 + "; nickname2 = " + ds_update.nickName2 + "; " +
                            "gender = " + ds_update.genderID + "; dob = " + ds_update.dob + "; fstatusID = " + ds_update.fstatusID + "; nationalityID = " + ds_update.nationalityID + "; ethnicID = " + ds_update.ethnicID + "; " +
                            "IDCard = " + ds_update.IDCrad + "; passport = " + data.passport + "; address1 = " + data.address1 + "; " +
                            "district_ID1 = " + ds_update.district_id1 + "; empMobile = " + ds_update.empMobile + "; empEmail = " + ds_update.empEmail + "; " +
                            "empPhoto = " + ds_update.empPhoto + "; spName = " + ds_update.spName + "; spMobile = " + ds_update.spMobile + "; spEmail = " + ds_update.spEmail + ";" +
                            " spAddress = " + ds_update.spAddress + "; spJob = " + ds_update.spJob + "; spJobAddress = " + ds_update.spJobAddress + "; status_ID = 3";

                            ds_update.empNo = data.empNo;
                            ds_update.firstName1 = data.firstName1;
                            ds_update.lastName1 = data.lastName1;
                            ds_update.nickName1 = data.nickName1;
                            ds_update.firstName2 = data.firstName2;
                            ds_update.lastName2 = data.lastName2;
                            ds_update.nickName2 = data.nickName2;
                            ds_update.genderID = data.genderID;
                            ds_update.dob = strDOB;
                            ds_update.fstatusID = data.fstatusID;
                            ds_update.nationalityID = data.nationalityID;
                            ds_update.ethnicID = data.EthicID;
                            ds_update.IDCrad = data.IDCrad;
                            ds_update.passport = data.passport;
                            ds_update.address1 = data.address1;
                            ds_update.district_id1 = data.district_id1;
                            ds_update.empMobile = data.empMobile;
                            ds_update.empEmail = data.empEmail;
                            ds_update.empPhoto = data.empPhoto;
                            ds_update.spName = data.spName;
                            ds_update.spMobile = data.spMobile;
                            ds_update.spEmail = data.spEmail;
                            ds_update.spAddress = data.spAddress;
                            ds_update.spJob = data.spJob;
                            ds_update.spJobAddress = data.spJobAddress;                            
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.empDayID = data.empWorkingID;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmployees";
                        //string olddata = "";
                        string newdata = "empNo = " + data.empNo + "; empTitleName = " + data.empTitleName + "; firstname1 = " + data.firstName1 + "; lastname1 = " + data.lastName1 + "; " +
                            "nickName1 = " + data.nickName1 + "; firstname2 = " + data.firstName2 + "; lastname2 = " + data.lastName2 + "; nickname2 = " + data.nickName2 + "; " +
                            "gender = " + data.genderID + "; dob = " + data.dob + "; fstatusID = " + data.fstatusID + "; nationalityID = " + data.nationalityID + "; ethnicID = " + data.EthicID + "; " +
                            "IDCard = " + data.IDCrad + "; passport = " + data.passport + "; address1 = " + data.address1 + "; " +
                            "district_ID1 = " + data.district_id1 + "; empMobile = " + data.empMobile + "; empEmail = " + data.empEmail + "; " +
                            "empPhoto = " + data.empPhoto + "; spName = " + data.spName + "; spMobile = " + data.spMobile + "; spEmail = " + data.spEmail + ";" +
                            " spAddress = " + data.spAddress + "; spJob = " + data.spJob + "; spJobAddress = " + data.spJobAddress + "; status_ID = 3; religionID = 1; workingid = "+ data.empWorkingID +"";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmployees")]
        public EmployeeListResult DelEmployees(DelEmployeeParam data)
        {
            var ret = new EmployeeListResult();
            //  WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_del == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // find leave type
                        var ds_update = (from c in db.tb_employees
                                         where c.empID == data.empID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmployees";
                        string olddata = "";
                        string newdata = "ID=" + data.empID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmployeesListByCompanyId")]
        public EmployeeListByCompanyIdResult EmployeesListByCompanyId(EmployeeInfoByComIdParam data)
        {
            var ret = new EmployeeListByCompanyIdResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_employess 
                                          where c.status_id == 3 && c.companyID == data.companyid
                                          select new
                                          {
                                              c.empID,
                                              c.empNo,
                                              c.firstName1,
                                              c.lastName1,
                                              c.nickName1,
                                              c.firstName2,
                                              c.lastName2,
                                              c.nickName2,
                                              c.genderText,
                                              c.dob,
                                              c.fstatusText,
                                              c.nationalityText,
                                              c.ethnicName1,
                                              c.ethnicName2,
                                              c.empEmail,
                                              c.empMobile,
                                              c.deptName1,
                                              c.deptName2,
                                              c.assignmentLocation,
                                              c.costCenterCode,
                                              c.costCenterText,
                                              c.currentAddress,
                                              c.empPosition,
                                              c.unitID,
                                              c.companyID,
                                              c.deptID,
                                              c.empLevelID,
                                              c.empGroupID,
                                              c.mgrid,
                                              c.shiftWorkingID,
                                              c.hireDay,
                                              c.actingDate,
                                              c.positionID
                                          }).ToList();
                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<getEmployeeListByCompanyIdResult> ResultObject = new List<getEmployeeListByCompanyIdResult>();
                            ResultObject = ds_emp.Select(c => new getEmployeeListByCompanyIdResult()
                            {
                                empID = c.empID.ToString(),
                                empNo = c.empNo.ToString(),
                                emp_FullName = data.lang == "1" ? c.firstName1.ToString() + " " + c.lastName1.ToString() : c.firstName2.ToString() + " " + c.lastName2.ToString(),
                                emp_Gender = c.genderText.ToString(),
                                emp_dob = c.dob.ToString(),
                                emp_FstatusText = c.fstatusText.ToString(),
                                emp_Nationallity = c.nationalityText.ToString(),
                                emp_Ethic = c.ethnicName1.ToString(),
                                emp_email = c.empEmail.ToString(),
                                emp_tel = c.empMobile.ToString(),
                                emp_position = c.empPosition.ToString(),
                                emp_DeptText = c.deptName1.ToString(),
                                emp_AssignmemtLocation = c.assignmentLocation.ToString(),
                                emp_CurrentAddress = c.currentAddress.ToString(),
                                emp_CostCenterCode = c.costCenterCode.ToString(),
                                emp_CostCenterText = c.costCenterText.ToString(),
                                emp_unitID = c.unitID.ToString(),
                                emp_deptID = c.deptID.ToString(),
                                emp_companyID = c.companyID.ToString(),
                                emp_empGroupID = c.empGroupID.ToString(),
                                emp_empLevelID = c.empLevelID.ToString(),
                                emp_mgrid = c.mgrid.ToString(),
                                emp_shiftWorkingID = c.shiftWorkingID.ToString(),
                                emp_shiftWorkingName = db.tb_shiftWorking.Where(w => w.shiftWorkingID == c.shiftWorkingID).Select(s => s.shiftName).FirstOrDefault(),
                                emp_hireDay1 = c.hireDay == null ? "" : Convert.ToDateTime(c.hireDay).ToString("yyyy-MM-dd"),
                                emp_actingDay1 = c.actingDate == null ? "" : Convert.ToDateTime(c.actingDate).ToString("yyyy-MM-dd"),
                                emp_hireDay2 = c.hireDay == null ? "" : Convert.ToDateTime(c.hireDay).ToString("dd-MM-yyyy"),
                                emp_actingDay2 = c.actingDate == null ? "" : Convert.ToDateTime(c.actingDate).ToString("dd-MM-yyyy"),
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmployeesDobList")]
        public EmployeeDobLis EmployeesDobList(EmployeeDobParam data)
        {
            var ret = new EmployeeDobLis();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_empDob
                                      select new
                                      {
                                          c.empID,
                                          c.empNo,
                                          c.empEmail,
                                          c.empTitleName,
                                          c.firstName1,
                                          c.firstName2,
                                          c.lastName1,
                                          c.lastName2,
                                          c.genderText,
                                          c.unitName1,
                                          c.unitName2,
                                          c.deptName1,
                                          c.deptName2,
                                          c.empPosition,
                                          c.companyname1,
                                          c.companyname2,
                                          c.dob,
                                          c.ages
                                      }).ToList();
                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmployeeDobListResult> ResultObject = new List<EmployeeDobListResult>();
                            ResultObject = ds_emp.Select(c => new EmployeeDobListResult()
                            {
                                empID = c.empID.ToString(),
                                empNo = c.empNo.ToString(),
                                empEmail = c.empEmail,
                                empTitleName = c.empTitleName,
                                firstname = data.lang == "1" ? c.firstName1 : c.firstName2,
                                lastName = data.lang == "1" ? c.lastName1 : c.lastName2,
                                genderText =  c.genderText,
                                unitName = data.lang == "1" ? c.unitName1 : c.unitName2,
                                deptName = data.lang == "1" ? c.deptName1 : c.deptName2,
                                empPosition = c.empPosition,
                                companyname = data.lang == "1" ? c.companyname1 : c.companyname2,
                                dob = Convert.ToDateTime(c.dob).ToString("dd/MM/yyyy"),
                                ages = c.ages.ToString()
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmployeeLeaveDetails")]
        public EmployeeLeaveDetails EmployeeLeaveDetails(EmployeeLeaveDetail1Param data)
        {
            var ret = new EmployeeLeaveDetails();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_employeeLeavedetails
                                      where c.companyID == data.companyid &&
                                      c.n_startdate >= data.startdate && c.n_startdate <= data.enddate
                                      select new
                                      {
                                          c.leaveRequestNo,
                                          c.empNo,
                                          c.firstName1,
                                          c.firstName2,
                                          c.lastName1,
                                          c.lastName2,
                                          c.empPosition,
                                          c.deptName1,
                                          c.deptName2,
                                          c.leavestartdate,
                                          c.leaveenddate,
                                          c.returndate,
                                          c.leaveDay,
                                          c.leaveTypeName1,
                                          c.leaveTypeName2,
                                          c.noted,
                                          c.n_startdate,
                                          c.n_enddate,
                                          c.n_returndate,
                                          c.companyID,
                                          c.deptID,
                                          c.textstatus
                                      }).ToList();
                        if (data.deptid > 0)
                        {
                            ds_emp = ds_emp.Where(w => w.deptID == data.deptid).ToList();
                        }
                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmployeeLeaveDetailResult> ResultObject = new List<EmployeeLeaveDetailResult>();
                            ResultObject = ds_emp.Select(c => new EmployeeLeaveDetailResult()
                            {
                                leaverequestNo = c.leaveRequestNo,
                                empNo = c.empNo.ToString(),
                                firstname = data.lang == "1" ? c.firstName1 : c.firstName2,
                                lastName = data.lang == "1" ? c.lastName1 : c.lastName2,
                                empPosition = c.empPosition,
                                deptName = data.lang == "1" ? c.deptName1 : c.deptName2,
                                leavestartdate = c.leavestartdate,
                                leaveenddate = c.leaveenddate,
                                returndate = c.returndate,
                                leaveday = c.leaveDay.ToString(),
                                leavetypename = data.lang == "1" ? c.leaveTypeName1 : c.leaveTypeName2,
                                noted = c.noted,
                                n_startdate = Convert.ToDateTime(c.n_startdate).ToString(),
                                n_enddate = Convert.ToDateTime(c.n_enddate).ToString(),
                                n_returndate = Convert.ToDateTime(c.n_returndate).ToString(),
                                companyID = c.companyID.ToString(),
                                deptid = c.deptID.ToString(),
                                textstatus = c.textstatus
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/CheckWorkingDay")]
        public CheckWorkingDayListResult CheckWorkingDay(CheckWorkingDayListParam data)
        {
            var ret = new CheckWorkingDayListResult();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                int ?mgrID;
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId >= 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    orderby c.app_permissionId descending
                                    select new
                                    {
                                        c.empID,
                                        c.app_permissionId
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        // check delegate 
                        DateTime dtNow = DateTime.Now;
                        var ds_dlg = (from c in db.tb_delagate
                                          where c.status_id == 3 && c.delegateEmpID == ds_tokey.empID && c.strDate <= dtNow && c.endDate >= dtNow
                                      select new
                                          {
                                              c.empID
                                          }).FirstOrDefault();
                        if (ds_dlg != null)
                        {
                            mgrID = ds_dlg.empID;
                        } else
                        {
                            mgrID = ds_tokey.empID;
                        }

                        var ds_ssotype = (from c in db.tmp_checkworkday
                                          where (c.status_id == 1 || c.status_id == 3) & c.workMonth == data.monthView & c.workYear == data.yearView
                                          select new
                                          {
                                              c.tmp_id,
                                              c.transactionNo,
                                              c.empID,
                                              c.empNo,
                                              c.fullNameLA,
                                              c.fullNameEN,
                                              c.workDay,
                                              c.workMonth,
                                              c.workYear,
                                              c.shift1_n,
                                              c.shift1_ot,
                                              c.shift1_wd_total,
                                              c.shift1_ot_total,
                                              c.shift2_n,
                                              c.shift2_ot,
                                              c.shift2_wd_sun,
                                              c.shift2_ot_sun,
                                              c.shift2_wd_total,
                                              c.shift2_ot_total,
                                              c.total_wd,
                                              c.total_ot,
                                              c.leave1,
                                              c.leave2,
                                              c.leave3,
                                              c.leave4,
                                              c.sys_leave,
                                              c.sys_OTh,
                                              c.statusText,
                                              c.status_id,
                                              c.mrgID
                                          }).ToList();
                        if (ds_tokey.app_permissionId >19)
                        {        
                           if (data.empID != 0 )
                            {
                                ds_ssotype =  ds_ssotype.Where(w => w.empID == data.empID ).ToList();
                            }
                        } else
                        {
                            if (data.empID != 0)
                            {
                                ds_ssotype = ds_ssotype.Where(w => (w.mrgID == mgrID || w.mrgID == ds_tokey.empID) & w.empID == data.empID ).ToList();
                            }
                            else
                            {
                                ds_ssotype  = ds_ssotype.Where(w =>  w.mrgID == mgrID || w.mrgID == ds_tokey.empID ).ToList();
                            }
                        }
                       
                        if (ds_ssotype != null)
                        {
                            List<CheckWorkingDayViewModelResult> ResultObject = new List<CheckWorkingDayViewModelResult>();                                                                                    
                                ResultObject = ds_ssotype.Select(c => new CheckWorkingDayViewModelResult()
                                {
                                    tmp_id = c.empID.ToString(),
                                    transactionNo = c.transactionNo.ToString(),
                                    empID = c.empID.ToString(),
                                    empNo = c.empNo.ToString(),
                                    fullNameLA = c.fullNameLA.ToString(),
                                    fullNameEN = c.fullNameEN.ToString(),
                                    workDay = c.workDay.ToString(),
                                    workMonth = c.workMonth.ToString(),
                                    workYear = c.workYear.ToString(),
                                    shift1_n = c.shift1_n.ToString(),
                                    shift1_ot = c.shift1_ot.ToString(),
                                    shift1_wd_total = c.shift1_wd_total.ToString(),
                                    shift1_ot_total = c.shift1_ot_total.ToString(),
                                    shift2_n = c.shift2_n.ToString(),
                                    shift2_ot = c.shift2_ot.ToString(),
                                    shift2_wd_sun = c.shift2_wd_sun.ToString(),
                                    shift2_ot_sun = c.shift2_ot_sun.ToString(),
                                    shift2_wd_total = c.shift2_wd_total.ToString(),
                                    shift2_ot_total = c.shift2_ot_total.ToString(),
                                    total_wd = c.total_wd.ToString(),
                                    total_ot = c.total_ot.ToString(),
                                    leave1 = c.leave1.ToString(),
                                    leave2 = c.leave2.ToString(),
                                    leave3 = c.leave3.ToString(),
                                    leave4 = c.leave4.ToString(),
                                    sys_leave = c.sys_leave.ToString(),
                                    sys_OTh = c.sys_OTh.ToString(),
                                    statusText = c.statusText.ToString(),
                                    statusID = c.status_id.ToString(),
                                    dayoff = c.workDay.ToString()
                                }).ToList();                         
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have tax ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No tax";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ProvinceList")]
        public ProvinceListResult ProvinceList(ProvinceListParam data)
        {
            var ret = new ProvinceListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_pro = (from c in db.tb_province
                                      select new
                                      {
                                          c.Pro_ID,
                                          c.proName1,
                                          c.ProName2
                                      }).ToList();

                        if (ds_pro != null)
                        {
                            List<ProvinceListViewModelResult> ResultObject = new List<ProvinceListViewModelResult>();
                            ResultObject = ds_pro.Select(c => new ProvinceListViewModelResult()
                            {
                                ProID = c.Pro_ID.ToString(),
                                ProName = data.lang == "1" || data.lang == null ? c.proName1 : c.ProName2
                            }).ToList();

                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have province data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No province data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DistrictList")]
        public DistrictListResult DistrictList(DistrictListParam data)
        {
            var ret = new DistrictListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_dis = (from c in db.tb_district
                                      select new
                                      {
                                          c.district_id,
                                          c.districtName1,
                                          c.districtName2,
                                          c.Pro_ID,
                                          c.tb_province.proName1,
                                          c.tb_province.ProName2
                                      }).ToList();

                        if (ds_dis != null)
                        {
                            if (data.ProID > 0)
                            {
                                ds_dis = ds_dis.Where(w => w.Pro_ID == data.ProID).ToList();
                            }
                            if (ds_dis != null)
                            {
                                List<DistrictListViewModelResult> ResultObject = new List<DistrictListViewModelResult>();

                                if (data.lang == "1")
                                {
                                    ResultObject = ds_dis.Select(c => new DistrictListViewModelResult()
                                    {

                                        DisID = c.district_id.ToString(),
                                        DisName =  c.districtName1,
                                        ProID = c.Pro_ID.ToString(),
                                        ProName = c.proName1

                                    }).ToList();
                                }
                                else
                                {
                                    ResultObject = ds_dis.Select(c => new DistrictListViewModelResult()
                                    {

                                        DisID = c.district_id.ToString(),
                                        DisName = c.districtName2,
                                        ProID = c.Pro_ID.ToString(),
                                        ProName = c.ProName2


                                    }).ToList();
                                }



                                ret.ModelErrors = "Success.";
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have district data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No district data";
                                return ret;
                            }
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have district data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No district data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpMgrList")]
        public GetEmpByMgrResult EmpMgrList(EmpEducationListParam data)
        {
            var ret = new GetEmpByMgrResult();
            // WriteLogFile("deptList " + data.TokenKey);
            string Result;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string Command = " DECLARE	@return_value int " +
                             " EXEC @return_value = p_s_emp_mgr " +
                             " @userID = '" + ds_tokey.empID.ToString() + "', " +
                             " @lang = '" + data.lang.ToString() + "'  " +                            
                             " SELECT	'ReturnValue' = @return_value";
                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }
                        }
                        
                        var ds_Data = (from c in db.tmp_empMgr
                                       where c.user_add == ds_tokey.empID
                                       select new
                                       {
                                           c.empID,
                                           c.empFullName
                                       }).ToList();                      
                        if (ds_Data != null)
                        {
                            List<GetEmpByMgrViewModelResult> ResultObject = new List<GetEmpByMgrViewModelResult>();
                            ResultObject = ds_Data.Select(c => new GetEmpByMgrViewModelResult()
                            {                               
                                empID = c.empID.ToString(),
                                empFullName = c.empFullName.ToString() 
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
      




       public static  void WriteLogFile(string Message)
     {
        StreamWriter sw = null;

        try
        {
            //WriteStatusBar(Message);
            //updateStatusText(Message);
            string sLogFormat = DateTime.Now.ToShortDateString().ToString() + " " + DateTime.Now.ToLongTimeString().ToString() + " ==> ";
            //string sPathName = @"E:\";
            string sPathName = @"d:\logs\newhrm\";

            string sYear = DateTime.Now.Year.ToString();
            string sMonth = DateTime.Now.Month.ToString();
            string sDay = DateTime.Now.Day.ToString();

            string sErrorTime = sDay + "-" + sMonth + "-" + sYear;

            sw = new StreamWriter(sPathName + sErrorTime + ".txt", true);

            sw.WriteLine(sLogFormat + Message);
            sw.Flush();

        }
        catch (Exception)
        {
            //ErrorLog(ex.ToString());
        }
        finally
        {
            if (sw != null)
            {
                sw.Dispose();
                sw.Close();
            }
        }

    }


        [HttpPost]
        [Route("api/User/EmpAllowanceList")]
        public EmpAllowanceListResult EmpAllowanceList(EmpAllowanceListParam data)
        {
            var ret = new EmpAllowanceListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    { 
                        var ds_empAllowance = (from c in db.tb_empAllowance where c.empID == data.empID  && c.status_ID==3
                                      select new
                                      {
                                          c.empAllowanceID,
                                          c.empID,
                                          c.tb_employees.firstName1,
                                          c.tb_employees.firstName2,
                                          c.allowanceTypeID,
                                          c.tb_allowanceType.allowanceTypeName1,
                                          c.tb_allowanceType.allowanceTypeName2,
                                          c.amount,
                                          c.remark
                                      }).ToList();
                        if (ds_empAllowance != null)
                        {
                            List<EmpAllowanceListViewModelResult> ResultObject = new List<EmpAllowanceListViewModelResult>();
                            ResultObject = ds_empAllowance.Select(c => new EmpAllowanceListViewModelResult()
                            {
                                empAllowanceID = c.empAllowanceID.ToString(),
                                EmpID = c.empID.ToString(),
                                EmpName= data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                allowanceTypeID = c.allowanceTypeID.ToString(),
                                allowanceTypeName = data.lang == "1" || data.lang == null ? c.allowanceTypeName1 : c.allowanceTypeName2,
                                amount = Convert.ToDouble(c.amount).ToString("N"),
                                amount1 = c.amount.ToString(),
                                remark = c.remark
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp_Allowance data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp_Allowance data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpAllowance")]
        public EmpAllowanceListResult NewEmpAllowance(NewEmpAllowanceParam data)
        {
            var ret = new EmpAllowanceListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empAllowance.Add(new tb_empAllowance
                        {
                            empID = data.empID,
                            allowanceTypeID = data.allowanceTypeID,
                            amount = data.amount,
                            remark = data.remark,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpAllowance";
                        string olddata = "";
                        string newdata = "empID = " + data.empID + "; allowanceTypeID =" + data.allowanceTypeID + "; amount = "+ data.amount +"; remark = "+ data.remark +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UpdateEmpAllowance")]
        public EmpAllowanceListResult UpdateEmpAllowance(UpdateEmpAllowanceParam data)
        {
            var ret = new EmpAllowanceListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string olddata = "";
                        var ds_update = (from c in db.tb_empAllowance
                                         where c.empAllowanceID == data.empAllowanceID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "empID = " + ds_update.empID + "; allowanceTypeID =" + ds_update.allowanceTypeID + "; amount = " + ds_update.amount + "; remark = " + ds_update.remark + "; status_ID = 3";
                            ds_update.empID = data.empID;
                            ds_update.allowanceTypeID = data.allowanceTypeID;
                            ds_update.amount = data.amount;
                            ds_update.remark = data.remark;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpAllowance";
                       // string olddata = "";
                        string newdata = "empID = " + data.empID + "; allowanceTypeID =" + data.allowanceTypeID + "; amount = " + data.amount + "; remark = " + data.remark + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ແກ້ໄຂຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpAllowance")]
        public EmpAllowanceListResult DelEmpAllowance(DelEmpAllowanceParam data)
        {
            var ret = new EmpAllowanceListResult();
            // WriteLogFile("AllowanceType " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_edit == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empAllowance
                                         where c.empAllowanceID == data.empAllowanceID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpAllowance";
                        string olddata = "";
                        string newdata = "ID=" + data.empAllowanceID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶມຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LeaveRequestList")]
        public leaveRequestListResult LeaveRequestList(leaveRequestListParam data)
        {
            var ret = new leaveRequestListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_leaveRequest
                                           //where c.transactionType == 2 && c.status_ID != 2 orderby c.startDate
                                       where c.empID == ds_tokey.empID && c.transactionType != 1 && c.transactionType != 5
                                       orderby c.leaveRequestID descending
                                       select new
                                               {
                                                   c.leaveRequestID,
                                                   c.leaveRequestNo,
                                                   c.empID,
                                                   c.tb_employees.empNo,
                                                   c.tb_employees.firstName1,
                                                   c.tb_employees.firstName2,
                                                   c.tb_employees.lastName1,
                                                   c.tb_employees.lastName2,
                                                   c.leaveTypeID,
                                                   c.leaveDay,
                                                   c.startDate,
                                                   c.endDate,
                                                   c.returnDate,
                                                   c.amountDay,
                                                   c.noted,
                                                   c.delegateEmpID,
                                                   c.fileAttached,
                                                   c.managerID,
                                                   c.tb_leaveTranType.transactionTypeText,
                                                   c.expDate,
                                                   c.referAdd,
                                                   c.status_ID,
                                                   c.imagePath
                                               }).ToList();
                        //if (data.empID > 0)
                        //{
                        //    ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        //}

                        if (ds_Data != null)
                        {
                            List<leaveRequestListViewModelResult> ResultObject = new List<leaveRequestListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new leaveRequestListViewModelResult()
                            {
                                leaveRequestID = c.leaveRequestID.ToString(),
                                leaveRequestNo = c.leaveRequestNo,
                                empID = c.empID.ToString(),
                                empNo = c.empNo.ToString(),
                                empName = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                leaveTypeID = c.leaveTypeID.ToString(),
                                leaveTypeName = data.lang == "1" || data.lang == null ? db.tb_leaveType.Where(w => w.leaveTypeID == c.leaveTypeID).Select(s => s.leaveTypeName1).FirstOrDefault() : db.tb_leaveType.Where(w => w.leaveTypeID == c.leaveTypeID).Select(s => s.leaveTypeName2).FirstOrDefault(),
                                leaveDay = c.leaveDay,
                                startDate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                returnDate = Convert.ToDateTime(c.returnDate).ToString("dd/MM/yyyy"),
                                amountDay = (-1* c.amountDay).ToString(),
                                noted = c.noted,
                                delegateEmpName = c.delegateEmpID == null ? "" : data.lang == "1" ? db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                filePath =c.imagePath == null ? "": c.imagePath.ToString(),
                                fileAttached = c.fileAttached,
                                managerName = c.managerID == null ? "" : data.lang == "1" ? db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                transactionTypeName = c.transactionTypeText,
                                expDate = c.expDate.ToString(),
                                referAdd = c.referAdd,
                                status = db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault()
                            }).OrderByDescending(i => i.status).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have leave request data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No leave request data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LeaveRequestApproveList")]
        public leaveRequestListResult LeaveRequestApproveList(leaveRequestApproveListParam data)
        {
            var ret = new leaveRequestListResult();
             WriteLogFile("Tokenkey : " + data.TokenKey +", managerid :"+ data.managerID +", lang: "+ data.lang +", stdate: "+ data.stdate +", enddate: "+ data.enddate +", status :"+ data.status);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status == "" || data.status =="0" || data.status == "All")
                        {
                            var ds_Data = (from c in db.v_leaverequestalldetails
                                           where (c.managerID == data.managerID || c.lineManager == data.managerID) && c.transactiontypetext == "Request leave" && c.status_ID != 2                                           
                                           orderby c.startdate descending
                                           select new
                                           {
                                               c.leaveRequestID,
                                               c.leaveRequestNo,
                                               c.empID,
                                               c.empNo,
                                               c.firstName1,
                                               c.firstName2,
                                               c.lastName1,
                                               c.lastName2,
                                               c.leaveTypeID,
                                               c.leaveTypeName1,
                                               c.leaveTypeName2,
                                               c.leaveDay,
                                               c.startdate,
                                               c.enddate,
                                               c.returnDate,
                                               c.amountday,
                                               c.noted,
                                               c.delegateEmpID,
                                               c.fileAttached,
                                               c.managerID,
                                               c.transactiontypetext,
                                               c.expdate,
                                               c.referAdd,
                                               c.status_ID,
                                               c.lastApproveDate
                                           }).ToList();


                            if (ds_Data != null)
                            {
                                List<leaveRequestListViewModelResult> ResultObject = new List<leaveRequestListViewModelResult>();
                                ResultObject = ds_Data.Select(c => new leaveRequestListViewModelResult()
                                {
                                    //Update new code
                                    leaveRequestID = c.leaveRequestID.ToString(),
                                    leaveRequestNo = c.leaveRequestNo,
                                    empID = c.empID.ToString(),
                                    empNo = c.empNo.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                    leaveTypeID = c.leaveTypeID.ToString(),
                                    leaveTypeName = data.lang == "1" ? c.leaveTypeName1 : c.leaveTypeName2,
                                    leaveDay = c.leaveDay.ToString(),
                                    startDate = Convert.ToDateTime(c.startdate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.enddate).ToString("dd/MM/yyyy"),
                                    returnDate = Convert.ToDateTime(c.returnDate).ToString("dd/MM/yyyy"),
                                    amountDay = (1 * c.amountday).ToString(),
                                    noted = c.noted.ToString(),
                                    delegateEmpName = c.delegateEmpID == null ? "" : data.lang == "1" ? db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    fileAttached = c.fileAttached.ToString(),
                                    filePath = c.fileAttached.ToString(),
                                    managerName = c.managerID == null ? "" : db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    transactionTypeName = c.transactiontypetext.ToString(),
                                    expDate = c.expdate.ToString(),
                                    referAdd = c.referAdd.ToString(),
                                    status = getLeaveStatus(c.status_ID, c.leaveRequestID, ds_tokey.userID), //db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault(),
                                    historyCount = db.tb_leaveApprove.Where(w => w.leaveRequestID == c.leaveRequestID).Count(),
                                    managerEmpID = c.managerID,
                                    approveUserID = db.tb_leaveApprove.Where(w => w.leaveRequestID == c.leaveRequestID && w.user_add == ds_tokey.userID).Count() > 0 ? ds_tokey.userID : 0,
                                    approveDate = c.lastApproveDate == null ? "" : Convert.ToDateTime(c.returnDate).ToString("dd/MM/yyyy")

                                }).ToList();
                                // ResultObject = ResultObject.Where(w => w.managerEmpID == ds_tokey.empID || w.approveUserID == ds_tokey.userID).OrderByDescending(i => i.status) .ToList();


                                ret.ModelErrors = "Display Data 1";
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have leave request data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No leave request data";
                                return ret;
                            }
                        }
                        else
                        {
                            DateTime std = new DateTime();
                            DateTime endt = new DateTime();
                            std = Convert.ToDateTime(data.stdate);
                            endt = Convert.ToDateTime(data.enddate);
                           /* if (data.stdate != null)
                            {
                                std = Convert.ToDateTime(data.stdate);
                                endt = Convert.ToDateTime(data.enddate);
                            }
                            */
                            var ds_Data = (from c in db.v_leaverequestalldetails
                                           where (c.managerID == data.managerID && c.transactiontypetext == "Request leave" && c.startdate >= std && c.startdate <= endt && c.status_text == data.status)
                                           || ( c.lineManager == data.managerID && c.transactiontypetext == "Request leave" && c.startdate >= std && c.startdate <= endt && c.status_text == data.status)
                                           orderby c.startdate descending
                                           select new
                                           {
                                               c.leaveRequestID,
                                               c.leaveRequestNo,
                                               c.empID,
                                               c.empNo,
                                               c.firstName1,
                                               c.firstName2,
                                               c.lastName1,
                                               c.lastName2,
                                               c.leaveTypeID,
                                               c.leaveTypeName1,
                                               c.leaveTypeName2,
                                               c.leaveDay,
                                               c.startdate,
                                               c.enddate,
                                               c.returnDate,
                                               c.amountday,
                                               c.noted,
                                               c.delegateEmpID,
                                               c.fileAttached,
                                               c.managerID,
                                               c.transactiontypetext,
                                               c.expdate,
                                               c.referAdd,
                                               c.status_ID
                                           }).ToList();


                            if (ds_Data != null)
                            {
                                List<leaveRequestListViewModelResult> ResultObject = new List<leaveRequestListViewModelResult>();
                                ResultObject = ds_Data.Select(c => new leaveRequestListViewModelResult()
                                {
                                    //Update new code
                                    leaveRequestID = c.leaveRequestID.ToString(),
                                    leaveRequestNo = c.leaveRequestNo,
                                    empID = c.empID.ToString(),
                                    empNo = c.empNo.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 + " " + c.lastName1 : c.firstName1 + " " + c.lastName1,
                                    leaveTypeID = c.leaveTypeID.ToString(),
                                    leaveTypeName = data.lang == "1" ? c.leaveTypeName1 : c.leaveTypeName2,
                                    leaveDay = c.leaveDay.ToString(),
                                    startDate = Convert.ToDateTime(c.startdate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.enddate).ToString("dd/MM/yyyy"),
                                    returnDate = Convert.ToDateTime(c.returnDate).ToString("dd/MM/yyyy"),
                                    amountDay = (1 * c.amountday).ToString(),
                                    noted = c.noted.ToString(),
                                    delegateEmpName = c.delegateEmpID == null ? "" : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    fileAttached = c.fileAttached.ToString(),
                                    filePath = c.fileAttached.ToString(),
                                    managerName = c.managerID == null ? "" : db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    transactionTypeName = c.transactiontypetext.ToString(),
                                    expDate = c.expdate.ToString(),
                                    referAdd = c.referAdd.ToString(),
                                    status = getLeaveStatus(c.status_ID, c.leaveRequestID, ds_tokey.userID), //db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault(),
                                    historyCount = db.tb_leaveApprove.Where(w => w.leaveRequestID == c.leaveRequestID).Count(),
                                    managerEmpID = c.managerID,
                                    approveUserID = db.tb_leaveApprove.Where(w => w.leaveRequestID == c.leaveRequestID && w.user_add == ds_tokey.userID).Count() > 0 ? ds_tokey.userID : 0

                                }).ToList();
                                // ResultObject = ResultObject.Where(w => w.managerEmpID == ds_tokey.empID || w.approveUserID == ds_tokey.userID).OrderByDescending(i => i.status) .ToList();

                                //This is save log
                                /*string logevent = "Display Employee request waiting approve";
                                string logmodules = "Request Leave";
                                string olddata = "";
                                string newdata = ResultObject.ToString();
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);*/

                                ret.ModelErrors = "Display Data 2";
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have leave request data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No leave request data";
                                return ret;
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewleaveRequest")]
        public leaveRequestListResult NewleaveRequest(NewleaveRequestParam data)
        {
            var ret = new leaveRequestListResult();
            WriteLogFile("NewleaveRequest ==> " +
                   "TokenKey:" + data.TokenKey.ToString() +
                   ", lang:" + data.lang.ToString() +
                   ", leaveRequestNo:" + data.leaveRequestNo.ToString() +
                   ", empID:" + data.empID.ToString() +
                   ", leaveTypeID:" + data.leaveTypeID.ToString() +
                   ", leaveDay:" + data.leaveDay.ToString() +
                   ", startDate:" + data.startDate.ToString() +
                   ", endDate:" + data.endDate.ToString() +
                   ", returnDate:" + data.returnDate.ToString() +
                   ", amountDay:" + data.amountDay.ToString() +
                   ", noted:" + data.noted.ToString() +
                   ", delegateEmpID:" + data.delegateEmpID.ToString() +
                   ", fileAttached:" + data.fileAttached.ToString() +
                   ", transactionTypeID:" + data.transactionTypeID.ToString() +
                   ", expDate:" + data.endDate +
                   ", referAdd:" + data.referAdd +
                   ", fileType:" + data.fileType +
                   ", from_device:" + data.from_device);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID,
                                        c.Device_token
                                    }).FirstOrDefault();
                    DateTime stdx = new DateTime();
                    DateTime etdxx = new DateTime();
                    stdx = DateTime.Parse(data.startDate);
                    etdxx = DateTime.Parse(data.endDate);

                    if (stdx > etdxx)
                    {
                        ret.ModelErrors = "End Date is bigger than Start Date";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Check your date again.";
                        return ret;
                    }
                    else
                    {
                        if (ds_tokey != null)
                        {
                            DateTime dt = DateTime.Now;
                            //string genLeaveRequestNo = dt.ToString("yyyyMMddHHmmss") + data.empID;
                            string genLeaveRequestNo = dt.ToString("ms") + data.empID;
                            string filename = DateTime.Now.ToString("yyyyMMddHHmmss");
                            string filename2 = "";
                            string filePath = "";
                            string fullPath = "";
                            string FromDevice = "";

                            if (data.fileType != null && data.fileType != "")
                            {
                                if (data.from_device == 1)
                                {
                                    filename2 = data.fileAttached.ToString();
                                }
                                else
                                {
                                    filename2 = filename + data.empID + "." + data.fileType.ToString();
                                }


                                //filePath = @"D:\hrm\imgleaverequest\" + filename2;

                                //fullPath = @"D:\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\hrms\imgleaverequest\" +data.fileAttached.ToString();
                                fullPath = @"C:\Program Files (x86)\Apache Software Foundation\Tomcat 9.0\webapps\ROOT\imgleaverequest\" + data.fileAttached.ToString();
                                //filePath = @"D:\hrm\imgleaverequest\";
                                filePath = @"C:\hrm_upload\";

                            }

                            string c_path = "";
                            string c_file = "";
                            string Command;
                            int Result;


                            Command = " EXEC p_InsertLeaveRequest @leaveRequestNo = '" + genLeaveRequestNo + "', @emp_id=" + data.empID + ", " +
                              " @leaveTypeID= " + data.leaveTypeID + ", @leaveDay = '" + data.leaveDay + "', @startdate='" + data.startDate + "', " +
                              " @endtDate='" + data.endDate + "', @returnDate='" + data.returnDate + "', " +
                              " @amountDay = " + data.amountDay + ", @noted=N'" + data.noted + "', @delegateEmpID = " + data.delegateEmpID + ", " +
                              " @fileAttached = '" + filename2 + "',@transactionType=" + data.transactionTypeID + ", " +
                              " @referAdd = '" + data.referAdd + "', @userAdd=" + ds_tokey.userID + ", @fileTypeName=N'" + data.fileType + "', " +
                              " @from_device='" + data.from_device + "', @transactionNo=N'" + genLeaveRequestNo + "', @filePath=N'" + filePath + "', @leavemorning=" + data.leavemorning + ", @leaveafternoon=" + data.leaveafternoon + "";

                            //  WriteLogFile("NewEmpLeave command: " + Command);

                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                    Result = (int)myCommand.ExecuteScalar();
                                }
                            }
                            if (Result == 1)
                            {
                                if (data.from_device == 1)
                                {
                                    FromDevice = "--- FROM Web App ---";
                                    if (File.Exists(fullPath))
                                    {
                                        try
                                        {
                                            File.Copy(fullPath, filePath + "/" + data.fileAttached.ToString());
                                            string base64imageString = "";
                                            Byte[] imageArray;

                                            imageArray = System.IO.File.ReadAllBytes(fullPath);
                                            base64imageString = Convert.ToBase64String(imageArray);
                                            byte[] base64image_byte;

                                            base64image_byte = Convert.FromBase64String(base64imageString);
                                            File.WriteAllBytes(fullPath, Convert.FromBase64String(base64imageString));
                                            var ds_updateImage = (from c in db.tb_request_upload
                                                                  where c.transactionNo == genLeaveRequestNo
                                                                  select c).FirstOrDefault();
                                            if (ds_updateImage != null)
                                            {
                                                ds_updateImage.img = base64image_byte;
                                            }
                                            db.SaveChanges();

                                            c_file = fullPath;
                                            c_path = filePath;
                                        }
                                        catch (Exception ex)
                                        {
                                            string message = ex.Message.ToString();
                                        }
                                    }
                                }
                                else
                                {
                                    FromDevice = "--- FROM Mobile App ---";
                                    if (data.fileAttached != null && data.fileAttached != "")
                                    {
                                        string base64imageString = data.fileAttached.ToString();

                                        byte[] base64image;
                                        try
                                        {
                                            base64image = Convert.FromBase64String(base64imageString);
                                            File.WriteAllBytes(filePath + filename2, base64image);

                                            var ds_updateImage = (from c in db.tb_request_upload
                                                                  where c.transactionNo == genLeaveRequestNo
                                                                  select c).FirstOrDefault();
                                            if (ds_updateImage != null)
                                            {
                                                ds_updateImage.img = base64image;
                                            }
                                            db.SaveChanges();

                                            c_file = fullPath;
                                            c_path = filePath;
                                        }
                                        catch (Exception ex)
                                        {
                                            string message = ex.Message.ToString();
                                        }
                                    }

                                }

                                //send mail to approver
                                var db_rl = db.tb_leaveRequest.Where(w => w.leaveRequestNo == genLeaveRequestNo).FirstOrDefault();
                                string leaveTypeCode = db_rl.tb_leaveType.leaveTypeCode.ToString();
                                string leaveTypeText = db_rl.tb_leaveType.leaveTypeName2.ToString();
                                if (db_rl != null)
                                {
                                    var db_approver = db.tb_employees.Where(w => w.empID == db_rl.managerID).FirstOrDefault();
                                    var db_emp = db.tb_employees.Where(w => w.empID == data.empID).FirstOrDefault();
                                    var db_tokenRequest = db.tb_users.Where(w => w.empID == db_approver.empID).FirstOrDefault();
                                    if (db_approver != null && db_approver.empEmail != null && db_emp != null)
                                    {
                                        string New_OtDate = Convert.ToDateTime(db_rl.startDate).ToString("yyyy-MM-dd");
                                        string New_endtDate = Convert.ToDateTime(db_rl.endDate).ToString("yyyy-MM-dd");
                                        string New_returnDate = Convert.ToDateTime(db_rl.returnDate).ToString("yyyy-MM-dd");

                                        string str = "Hi, " + db_approver.firstName2 + " " + db_approver.lastName2 + Environment.NewLine +
                                         "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " request " + leaveTypeText + "(" + leaveTypeCode + ") " + Environment.NewLine
                                         + " start date: " + data.startDate + " to " + data.endDate + " and return to work on " + New_returnDate + Environment.NewLine;
                                        Boolean isSendMail = SendMeail(db_approver.empEmail, "HRM - Employee new request " + leaveTypeText + ".", str, FromDevice, db_rl.managerID.ToString(), data.empID.ToString(), true, "1");

                                        if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), "HRM - Employee new request " + leaveTypeText + ".", str, db_rl.managerID.ToString(), FromDevice, data.empID.ToString(), true);
                                        }

                                    }
                                }

                                //This is save log
                                string logevent = "New Request";
                                string logmodules = "Request Leave";
                                string olddata = "";
                                string newdata = "LeaveRequestNo=" + genLeaveRequestNo + "; empid = " + data.empID + "; leavetypeid = " + data.leaveTypeID + ";" +
                                    " leaveday = " + data.leaveDay + "; startdate = " + data.startDate + "; enddate = " + data.endDate + "; returndate = " + data.returnDate + "; " +
                                    "amountday = " + data.amountDay + "; noted = " + data.noted + "; delegateEmpid = " + data.delegateEmpID + "; " +
                                    "filename2 = " + filename2 + "; transactiontype=" + data.transactionTypeID + "; referadd = " + data.referAdd + "; fileType = " + data.fileType + "; from_device = " + data.from_device + "; " +
                                    "transactionNo = " + genLeaveRequestNo + "; filePath = " + c_path + "; status_ID = 3; leavemorning=" + data.leavemorning + ", leaveafternoon=" + data.leaveafternoon + "";
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                                }
                                else
                                {
                                    ret.ModelErrors = "Save complete";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else if (Result == 2)
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ກະລຸນາກວດຂໍ້ມູນວັນພັກຂອງທ່ານອີກຄັ້ງ ເພາະບາງທີ່ມື້ພັກບໍ່ພໍ ຫຼື ໃນຊ່ວງວັນພັກຂອງທ່ານມັນອາດຈະຊໍ້າກັນ. ";
                                }
                                else
                                {
                                    ret.ModelErrors = "Please, check your date leave again sometime your balance is less than or during date is over lap day.";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 401;
                                ret.IsSuccess = false;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else if (Result == 3)
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ມື້ພັກຂອງທ່ານຊໍ້າກັນ.";
                                }
                                else
                                {
                                    ret.ModelErrors = "Your leave is duplicate.";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 401;
                                ret.IsSuccess = false;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ທ່ານມີລາຍການພັກມື້ນີ້ແລ້ວ.";
                                }
                                else
                                {
                                    ret.ModelErrors = "Your leave have in system.";
                                }


                                ret.ResultObject = null;
                                ret.StatusCode = 401;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "Save data error...!";
                                return ret;
                            }
                        }
                        else
                        {
                            ret.ModelErrors = "Unauthorized or no permission";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Token key not correct ...!";
                            return ret;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(
                    "TokenKey:" + data.TokenKey.ToString() + 
                    ", lang:"+ data.lang.ToString() +
                    ", leaveRequestNo:"+  data.leaveRequestNo.ToString() +
                    ", empID:" + data.empID.ToString() +
                    ", leaveTypeID:"+ data.leaveTypeID.ToString() +
                    ", leaveDay:"+ data.leaveDay.ToString() +
                    ", startDate:" + data.startDate.ToString() +
                    ", endDate:" + data.endDate.ToString() +
                    ", returnDate:"+data.returnDate.ToString()+
                    ", amountDay:" + data.amountDay.ToString() +
                    ", noted:" + data.noted.ToString() +
                    ", delegateEmpID:"+ data.delegateEmpID.ToString() +
                    ", fileAttached:"+ data.fileAttached.ToString()+
                    ", transactionTypeID:"+ data.transactionTypeID.ToString() +
                    ", expDate:" + data.endDate +
                    ", referAdd:"+ data.referAdd + "," +   ex.Message);
                //ret.ModelErrors = "Error" + ex.Message;
                ret.ModelErrors = "SAVED";
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateleaveRequest")]
        public leaveRequestListResult UpdateleaveRequest(UpdateleaveRequestParam data)
        {
            var ret = new leaveRequestListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_leaveRequest
                                         where c.leaveRequestID == data.leaveRequestID
                                         select c).FirstOrDefault();

                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empID = " + ds_update.empID + "; leavetypeid = " + ds_update.leaveTypeID + "; leaveday = " + ds_update.leaveDay + ";" +
                            " startdate = " + ds_update.startDate + "; endDate = " + ds_update.endDate + "; returnDate =" + ds_update.returnDate + "; " +
                            "amountDay = " + ds_update.amountDay + "; noted = " + ds_update.noted + "; delgateEmpid = " + ds_update.delegateEmpID + "; " +
                            "fileAttached = " + ds_update.fileAttached + "; managerID = " + ds_update.managerID + "; transactionType = " + ds_update.transactionType + ";" +
                            "expDate = " + ds_update.expDate + "; referadd = " + ds_update.referAdd + "";

                            ds_update.empID = data.empID;
                            ds_update.leaveTypeID = data.leaveTypeID;
                            ds_update.leaveDay = data.leaveDay;
                            ds_update.startDate = data.startDate;
                            ds_update.endDate = data.endDate;
                            ds_update.returnDate = data.returnDate;
                            ds_update.amountDay = data.amountDay;
                            ds_update.noted = data.noted;
                            ds_update.delegateEmpID = data.delegateEmpID;
                            ds_update.fileAttached = data.fileAttached;
                            ds_update.managerID = data.managerID;
                            ds_update.transactionType = data.transactionTypeID;
                            ds_update.expDate = data.expDate;
                            ds_update.referAdd = data.referAdd;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update Request";
                        string logmodules = "Updateleaverequest";
                        //string olddata = "";
                        string newdata = "empID = "+ data.empID +"; leavetypeid = "+ data.leaveTypeID +"; leaveday = "+ data.leaveDay +";" +
                            " startdate = "+ data.startDate +"; endDate = "+ data.endDate +"; returnDate ="+ data.returnDate +"; " +
                            "amountDay = "+ data.amountDay +"; noted = "+ data.noted +"; delgateEmpid = "+ data.delegateEmpID +"; " +
                            "fileAttached = "+ data.fileAttached +"; managerID = "+ data.managerID +"; transactionType = "+ data.transactionTypeID +";" +
                            "expDate = "+ data.expDate +"; referadd = "+ data.referAdd +"";

                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update data complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelleaveRequest")]
        public leaveRequestListResult DelleaveRequest(DelleaveRequestParam data)
        {
            var ret = new leaveRequestListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_leaveRequest
                                         where c.leaveRequestID == data.leaveRequestID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelleaveRequest";
                        string olddata = "";
                        string newdata = "ID=" + data.leaveRequestID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete data complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApproveRequest")]
        public leaveRequestListResult ApproveRequest(ApproveRequestParam data)
        {
            var ret = new leaveRequestListResult();
            int mgrID = 0;
            int? appmgrid = 0;
            string linkPage = "";
            string actionname = data.isApprove == 1 ? "approved" : "rejected";
            string FromDevice = "";
            string doStep = "";

               WriteLogFile("ApproveRequest ==> TokenKey:" + data.TokenKey + ", lang:" + data.lang.ToString() + ", RequestID:" + data.RequestID.ToString() + ", noted:" + data.noted.ToString() +", deptID: " + data.deptID + ", approveTypeID:" + data.approveTypeID + ", isApprove:" + data.isApprove);
            try
            {
                 

                using (var db = new db_hrmsEntities())
                {  
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID,
                                        c.Device_token
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        var ds_checkFromweb = (from c in db.v_user_permission
                                               where (c.webTokenKey == data.TokenKey)
                                               select new
                                               {
                                                   c.empID
                                               }).ToList();
                        if (ds_checkFromweb.Count > 0)
                        {
                            FromDevice = "--- FROM Wep App---";
                        }
                        else
                        {
                            FromDevice = "--- FROM Mobile App---";
                        }

                        string l_status = "";
                        string Command;
                        int Result;
                        if (data.approveTypeID == 2)
                        {
                            appmgrid = db.tb_otRequest.Where(w => w.otRequestID == data.RequestID).Select(s => s.managerID).FirstOrDefault();
                            linkPage = "11";
                        }
                        else if (data.approveTypeID == 3)
                        {
                            appmgrid = db.tb_leaveRequest.Where(w => w.leaveRequestID == data.RequestID).Select(s => s.managerID).FirstOrDefault();
                            linkPage = "9";
                        }

                        mgrID = Convert.ToInt32(appmgrid);

                        DateTime dt = DateTime.Now;
                        string genRequestNo = dt.ToString("yyyyMMddHHmmss") + ds_tokey.empID;

                        Command = " EXEC p_ApproveRequest @RequestID = " + data.RequestID + ", @empID=" + ds_tokey.empID + ", " +
                          " @noted=N'" + data.noted + "', @deptID = " + data.deptID + ", @RequestNo='" + genRequestNo + "', @user_add=" + ds_tokey.userID + ", " +
                          " @approveTypeID=" + data.approveTypeID + ",@isApprove=" + data.isApprove + "";

                        WriteLogFile("NewEmpLeave command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }
                        }
                        if (Result == 1)
                        {
                            //send mail to approver
                            string approvermail = "";
                            string subject = "";
                            string content = "";
                            
                            if (data.approveTypeID == 2) //ot
                            {
                                var dbot = db.tb_otRequest.Where(w => w.otRequestID == data.RequestID).FirstOrDefault();
                                var db_approver = db.tb_employees.Where(w => w.empID == dbot.managerID).FirstOrDefault();
                                var db_emp = db.tb_employees.Where(w => w.empID == dbot.empID).FirstOrDefault();
                                var db_tokenNextApprover = db.tb_users.Where(w => w.empID == db_approver.empID).FirstOrDefault();
                                if (dbot.status_ID == 1 && data.isApprove == 1)
                                {
                                    if (db_approver != null && db_approver.empEmail != null && db_emp != null)
                                    {
                                        string New_OtDate = Convert.ToDateTime(dbot.startDate).ToString("yyyy-MM-dd");
                                        string New_endtDate = Convert.ToDateTime(dbot.endDate).ToString("yyyy-MM-dd");
                                        string new_StartTime = new DateTime(dbot.otStartTime.Ticks).ToString("HH:mm");
                                        string new_EndTime = new DateTime(dbot.otEndTime.Ticks).ToString("HH:mm");

                                        approvermail = db_approver.empEmail;
                                        subject = "HRM - Employee new request OT.";
                                        content = "Hi, " + db_approver.firstName2 + " " + db_approver.lastName2 + Environment.NewLine +
                                        "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " request OT start date: " + New_OtDate + " to " + New_endtDate + Environment.NewLine +
                                        "Start time: " + new_StartTime + " to " + new_EndTime;
                                        if (approvermail != "" && approvermail != null)
                                        {
                                            Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, appmgrid.ToString(), ds_tokey.empID.ToString(), true, "4");
                                        }

                                        if (db_tokenNextApprover.Device_token != "" && db_tokenNextApprover.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_tokenNextApprover.Device_token.ToString().Trim(), subject, content, appmgrid.ToString(), FromDevice, ds_tokey.empID.ToString(), true);
                                        }
                                    }
                                }

                                //send to request
                                if (dbot.status_ID == 3 ) // send to requestor
                                {
                                   var db_OTrequestor = db.tb_users.Where(w => w.empID == db_emp.empID).FirstOrDefault();
                                    if (db_emp != null && db_emp.empEmail != null && db_approver != null)
                                    {                                                                       
                                        approvermail = db_emp.empEmail == null ? "" : db_emp.empEmail;
                                        subject = "HRM - Approve request OT.";
                                        content = "Hi, " + db_emp.firstName2 + " " + db_emp.lastName2 + Environment.NewLine +
                                        "Your requested OT: "+ dbot.otRequestNo.ToString() + " is " + actionname + " by: " + db_approver.firstName2 + " " + db_approver.lastName2;
                                        if (approvermail != "" && approvermail != null)
                                        {
                                            Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, appmgrid.ToString(), ds_tokey.empID.ToString(), true, "11");
                                        }
                                        if (db_OTrequestor.Device_token != "" && db_OTrequestor.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_OTrequestor.Device_token.ToString(), subject, content, appmgrid.ToString(), FromDevice, ds_tokey.empID.ToString(), true);
                                        }

                                    }
                                } else if (dbot.status_ID == 4)
                                {
                                    var db_OTrequestor = db.tb_users.Where(w => w.empID == db_emp.empID).FirstOrDefault();
                                    if (db_emp != null && db_emp.empEmail != null && db_approver != null)
                                    {
                                        approvermail = db_emp.empEmail == null ? "" : db_emp.empEmail;
                                        subject = "HRM - "+ actionname +" request OT.";
                                        content = "Hi, " + db_emp.firstName2 + " " + db_emp.lastName2 + Environment.NewLine +
                                        "Your requested OT: " + dbot.otRequestNo.ToString() + " is " + actionname + " by: " + db_approver.firstName2 + " " + db_approver.lastName2;
                                        if (approvermail != "" && approvermail != null)
                                        {
                                            Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, appmgrid.ToString(), ds_tokey.empID.ToString(), true, "11");
                                        }
                                        if (db_OTrequestor.Device_token != "" && db_OTrequestor.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_OTrequestor.Device_token.ToString(), subject, content, appmgrid.ToString(), FromDevice, ds_tokey.empID.ToString(), true);
                                        }

                                    }
                                }

                                l_status = dbot.status_ID.ToString();

                            }
                            else if(data.approveTypeID == 3) //leave
                            {
                                doStep = "1";
                                var dbrl = db.tb_leaveRequest.Where(w => w.leaveRequestID == data.RequestID).FirstOrDefault();
                                doStep = "2";
                                var db_approver = db.tb_employees.Where(w => w.empID == dbrl.managerID).FirstOrDefault();
                                doStep = "3";
                                var db_emp = db.tb_employees.Where(w => w.empID == dbrl.empID).FirstOrDefault();
                                doStep = "4";
                                var db_tokenNextApprover = db.tb_users.Where(w => w.empID == db_approver.empID).FirstOrDefault();
                                doStep = "5";
                                string leaveTypeCode = dbrl.tb_leaveType.leaveTypeCode.ToString();
                                string leaveTypeText = dbrl.tb_leaveType.leaveTypeName2.ToString();

                                if (dbrl.status_ID == 1 && data.isApprove == 1) //next approver
                                {
                                    if (db_approver != null && db_approver.empEmail != null && db_emp != null)
                                    {
                                        
                                        string New_OtDate = Convert.ToDateTime(dbrl.startDate).ToString("yyyy-MM-dd");
                                        string New_endtDate = Convert.ToDateTime(dbrl.endDate).ToString("yyyy-MM-dd");
                                        string New_returnDate = Convert.ToDateTime(dbrl.returnDate).ToString("yyyy-MM-dd");

                                        approvermail = db_approver.empEmail;
                                        subject = "HRM - Employee new request leave.";
                                        content = "Hi, " + db_approver.firstName2 + " " + db_approver.lastName2 + Environment.NewLine +
                                        "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " request "+ leaveTypeText +" ("+ leaveTypeCode+") start date: " + New_OtDate + " to " + New_endtDate + " and return to work on " + New_returnDate;
                                        if (approvermail != "" && approvermail != null)
                                        {
                                            Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, appmgrid.ToString(), ds_tokey.empID.ToString(), true, "1");
                                        }

                                        if (db_tokenNextApprover.Device_token != "" && db_tokenNextApprover.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_tokenNextApprover.Device_token.ToString(), subject, content, appmgrid.ToString(), FromDevice, ds_tokey.empID.ToString(), true);
                                        }

                                    }
                                }

                                //send to request
                                if (dbrl.status_ID == 3 ) // send to requestor
                                {
                                    
                                    var db_tokenRequestor = db.tb_users.Where(w => w.empID == db_emp.empID).FirstOrDefault();
                                    if (db_emp != null && db_emp.empEmail != null )
                                    {
                                        approvermail = db_emp.empEmail == null ? "" : db_emp.empEmail;
                                        subject = "HRM - "+ actionname +" request leave.";
                                        content = "Hi, " + db_emp.firstName2 + " " + db_emp.lastName2 + Environment.NewLine +
                                        "Your " + leaveTypeText + " (" + leaveTypeCode + "), Request No: "  + dbrl.leaveRequestNo.ToString() + " is " + actionname + " by: " + db_approver.firstName2 + " " + db_approver.lastName2;
                                        if (approvermail != "" && approvermail != null)
                                        {
                                            Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, appmgrid.ToString(), ds_tokey.empID.ToString(), true, "8");
                                        }

                                        if (db_tokenRequestor.Device_token != "" && db_tokenRequestor.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_tokenRequestor.Device_token.ToString(), subject, content, appmgrid.ToString(), FromDevice, ds_tokey.empID.ToString(), true);
                                        }
                                    }
                                } else if (dbrl.status_ID == 4)
                                {
                                    var db_tokenRequestor = db.tb_users.Where(w => w.empID == db_emp.empID).FirstOrDefault();
                                    if (db_emp != null && db_emp.empEmail != null)
                                    {
                                        approvermail = db_emp.empEmail == null ? "" : db_emp.empEmail;
                                        subject = "HRM - " + actionname + " request leave.";
                                        content = "Hi, " + db_emp.firstName2 + " " + db_emp.lastName2 + Environment.NewLine +
                                        "Your " + leaveTypeText + " (" + leaveTypeCode + "), Request No: " + dbrl.leaveRequestNo.ToString() + " is " + actionname + " by: " + db_approver.firstName2 + " " + db_approver.lastName2;
                                        if (approvermail != "" && approvermail != null)
                                        {
                                            Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, appmgrid.ToString(), ds_tokey.empID.ToString(), true, "8");
                                        }

                                        if (db_tokenRequestor.Device_token != "" && db_tokenRequestor.Device_token != null)
                                        {
                                            Boolean isNoti = SingleNotification(db_tokenRequestor.Device_token.ToString(), subject, content, appmgrid.ToString(), FromDevice, ds_tokey.empID.ToString(), true);
                                        }
                                    }
                                }
                                l_status = dbrl.status_ID.ToString();

                            }

                            //if(approvermail != "")
                            //{
                            //    Boolean isSendMail = SendMeail(approvermail, subject, content, "", mgrID, ds_tokey.empID.ToString());
                            //}

                            //This is save log
                            string logevent = "Approve";
                            string logmodules = "ApproveRequest";
                            string olddata = "";
                            string newdata = "requestID = "+ data.RequestID +"; empid = "+ ds_tokey.empID +"; noted = "+ data.noted +"; deptid = "+ data.deptID +"; " +
                                "RequestNo = "+ genRequestNo +"; approveTypeID = "+ data.approveTypeID +"; isApprove = "+ data.isApprove +";  FromDevice = "+ FromDevice +"; status_ID = "+ l_status +"";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ອະນຸມັດຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Approve data complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else if (Result == 2)
                        {
                            ret.ModelErrors = "";
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "";
                            return ret;
                        }
                        else 
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile("step do: " + doStep +", Error: " +   ex.Message.ToString());
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpBankAccountList")]
        public EmpBankAccountListResult EmpBankAccountList(EmpBankAccountListParam data)
        {
            var ret = new EmpBankAccountListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empBankAccount
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empBankAccountID,
                                           c.empID,
                                           c.tb_bank.BankLongName,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.bankAccountName,
                                           c.bankAccountNo
                                       }).ToList();

                        if(data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpBankAccountListViewModelResult> ResultObject = new List<EmpBankAccountListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpBankAccountListViewModelResult()
                            {
                                empBankAccountID = c.empBankAccountID.ToString(),
                                bankName = c.BankLongName,
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                bankAccountName = c.bankAccountName,
                                bankAccountNo = c.bankAccountNo
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Bank Account data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Bank Account data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpBankAccount")]
        public EmpBankAccountListResult NewEmpBankAccount(NewEmpBankAccountParam data)
        {
            var ret = new EmpBankAccountListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empBankAccount.Add(new tb_empBankAccount
                        {
                            bankID = data.bankID,
                            empID = data.empID,
                            bankAccountName = data.bankAccountName,
                            bankAccountNo = data.bankAccountNo,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpBankAccount";
                        string olddata = "";
                        string newdata = "bankID = "+ data.bankID +"; empid = "+ data.empID +"; bankaccountName = "+ data.bankAccountName +"; bankAccountNo = "+ data.bankAccountNo +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpBankAccount")]
        public EmpBankAccountListResult UpdateEmpBankAccount(UpdateEmpBankAccountParam data)
        {
            var ret = new EmpBankAccountListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //   where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empBankAccount
                                         where c.empBankAccountID == data.empBankAccountID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "bankID = " + ds_update.bankID + "; empid = " + ds_update.empID + "; bankaccountName = " + ds_update.bankAccountName + "; bankAccountNo = " + ds_update.bankAccountNo + "; status_ID = 3";
                            ds_update.bankID = data.bankID;
                            ds_update.empID = data.empID;
                            ds_update.bankAccountName = data.bankAccountName;
                            ds_update.bankAccountNo = data.bankAccountNo;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpBankAccount";
                        //string olddata = "";
                        string newdata = "bankID = " + data.bankID + "; empid = " + data.empID + "; bankaccountName = " + data.bankAccountName + "; bankAccountNo = " + data.bankAccountNo + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpBankAccount")]
        public EmpBankAccountListResult DelEmpBankAccount(DelEmpBankAccountParam data)
        {
            var ret = new EmpBankAccountListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empBankAccount
                                         where c.empBankAccountID == data.empBankAccountID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpBankAccount";
                        string olddata = "";
                        string newdata = "ID=" + data.empBankAccountID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpDeductionList")]
        public EmpDeductionListResult EmpDeductionList(EmpDeductionListParam data)
        {
            var ret = new EmpDeductionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empDeduction
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empDeduction,
                                           c.empID,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.deductionTypeID,
                                           c.tb_deductionType.deductionTypeName1,
                                           c.tb_deductionType.deductionTypeName2,
                                           c.amount,
                                           c.taxsCal,
                                           c.remark
                                       }).ToList();

                        if (data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpDeductionListViewModelResult> ResultObject = new List<EmpDeductionListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpDeductionListViewModelResult()
                            {
                                empDeduction = c.empDeduction.ToString(),
                                deductionTypeID =c.deductionTypeID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                deductionTypeName = data.lang == "1" || data.lang == null ? c.deductionTypeName1 : c.deductionTypeName2,
                                amount = Convert.ToDouble(c.amount).ToString("N"),
                                amount1 =c.amount.ToString(),
                                taxsCal = c.taxsCal.ToString(),
                                remark = c.remark
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Deduction data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Deduction data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpDeduction")]
        public EmpDeductionListResult NewEmpDeduction(NewEmpDeductionParam data)
        {
            var ret = new EmpDeductionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empDeduction.Add(new tb_empDeduction
                        {
                            empID = data.empID,
                            deductionTypeID = data.deductionTypeID,
                            amount = data.amount,
                            taxsCal = data.taxsCal,
                            remark = data.remark,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpDeduction";
                        string olddata = "";
                        string newdata = "empID = " + data.empID + "; deductionTypeID =" + data.deductionTypeID + "; amount = "+ data.amount +"; taxCal = "+ data.taxsCal +"; remark = "+ data.remark +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpDeduction")]
        public EmpDeductionListResult UpdateEmpDeduction(UpdateEmpDeductionParam data)
        {
            var ret = new EmpDeductionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empDeduction
                                         where c.empDeduction == data.empDeductionID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empID = " + ds_update.empID + "; deductionTypeID =" + ds_update.deductionTypeID + "; amount = " + ds_update.amount + "; taxCal = " + ds_update.taxsCal + "; remark = " + ds_update.remark + "; status_ID = 3";
                            ds_update.empID = data.empID;
                            ds_update.deductionTypeID = data.deductionTypeID;
                            ds_update.amount = data.amount;
                            ds_update.taxsCal = data.taxsCal;
                            ds_update.remark = data.remark;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpDeduction";
                        //string olddata = "";
                        string newdata = "empID = " + data.empID + "; deductionTypeID =" + data.deductionTypeID + "; amount = " + data.amount + "; taxCal = " + data.taxsCal + "; remark = " + data.remark + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpDeduction")]
        public EmpDeductionListResult DelEmpDeduction(DelEmpDeductionParam data)
        {
            var ret = new EmpDeductionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empDeduction
                                         where c.empDeduction == data.empDeductionID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpDeduction";
                        string olddata = "";
                        string newdata = "ID=" + data.empDeductionID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpEducationList")]
        public EmpEducationListResult EmpEducationList(EmpEducationListParam data)
        {
            var ret = new EmpEducationListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empEducation
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empEducationID,
                                           c.empID,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_educationType.educationTypeName1,
                                           c.tb_educationType.educationTypeName2,
                                           c.educationLevelText,
                                           c.schoolName,
                                           c.levelReceive,
                                           c.acdamyYear,
                                           c.remark
                                       }).ToList();

                        if (data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpEducationListViewModelResult> ResultObject = new List<EmpEducationListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpEducationListViewModelResult()
                            {
                                empEducationID = c.empEducationID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                educationTypeName = data.lang == "1" || data.lang == null ? c.educationTypeName1 : c.educationTypeName2,
                                educationLeveText = c.educationLevelText,
                                schoolName = c.schoolName,
                                levelReceive = c.levelReceive,
                                acdamyYear = c.acdamyYear,
                                remark = c.remark
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Education data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Education data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpEducation")]
        public EmpEducationListResult NewEmpEducation(NewEmpEducationParam data)
        {
            var ret = new EmpEducationListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empEducation.Add(new tb_empEducation
                        {
                            empID = data.empID,
                            educationTypeID = data.educationTypeID,
                            educationLevelText = data.educationLeveText,
                            schoolName = data.schoolName,
                            levelReceive = data.levelReceive,
                            acdamyYear = data.acdamyYear,
                            remark = data.remark,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpEducation";
                        string olddata = "";
                        string newdata = "EmpID = " + data.empID + "; EducationTypeID =" + data.educationTypeID + "; EducationLevelText = "+ data.educationLeveText +"; SchoolName = "+ data.schoolName +"; " +
                            "levelReceive = "+ data.levelReceive +"; acdamyYear = "+ data.acdamyYear +"; remark = "+ data.remark +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpEducation")]
        public EmpEducationListResult UpdateEmpEducation(UpdateEmpEducationParam data)
        {
            var ret = new EmpEducationListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empEducation
                                         where c.empEducationID == data.empEducationID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "EmpID = " + ds_update.empID + "; EducationTypeID =" + ds_update.educationTypeID + "; EducationLevelText = " + ds_update.educationLevelText + "; SchoolName = " + ds_update.schoolName + "; " +
                            "levelReceive = " + ds_update.levelReceive + "; acdamyYear = " + ds_update.acdamyYear + "; remark = " + ds_update.remark + "; status_ID = 3";

                            ds_update.empID = data.empID;
                            ds_update.educationTypeID = data.educationTypeID;
                            ds_update.educationLevelText = data.educationLeveText;
                            ds_update.schoolName = data.schoolName;
                            ds_update.levelReceive = data.levelReceive;
                            ds_update.acdamyYear = data.acdamyYear;
                            ds_update.remark = data.remark;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpEducation";
                        //string olddata = "";
                        string newdata = "EmpID = " + data.empID + "; EducationTypeID =" + data.educationTypeID + "; EducationLevelText = " + data.educationLeveText + "; SchoolName = " + data.schoolName + "; " +
                            "levelReceive = " + data.levelReceive + "; acdamyYear = " + data.acdamyYear + "; remark = " + data.remark + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpEducation")]
        public EmpEducationListResult DelEmpEducation(DelEmpEducationParam data)
        {
            var ret = new EmpEducationListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empEducation
                                         where c.empEducationID == data.empEducationID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpEducation";
                        string olddata = "";
                        string newdata = "ID=" + data.empEducationID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpFamilyList")]
        public EmpFamilyListResult EmpFamilyList(EmpEducationListParam data)
        {
            var ret = new EmpFamilyListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empFamily
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empFamilyID,
                                           c.empID,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.empFamilyRelationships,
                                           c.empFamilyFullName,
                                           c.empFamilyJob,
                                           c.empFamilyJobAddr,
                                           c.empFamilyAddr,
                                           c.empFamilyTel,
                                           c.empFamilyEmail
                                       }).ToList();

                        if (data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpFamilyListViewModelResult> ResultObject = new List<EmpFamilyListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpFamilyListViewModelResult()
                            {
                                empFamilyID = c.empFamilyID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                empFamilyRelationships = c.empFamilyRelationships,
                                empFamilyFullName = c.empFamilyFullName,
                                empFamilyJob = c.empFamilyJob,
                                empFamilyJobAddr = c.empFamilyJobAddr,
                                empFamilyAddr = c.empFamilyAddr,
                                empFamilyTel = c.empFamilyTel,
                                empFamilyEmail = c.empFamilyEmail
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Family data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Family data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpFamily")]
        public EmpFamilyListResult NewEmpFamily(NewEmpFamilyParam data)
        {
            var ret = new EmpFamilyListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empFamily.Add(new tb_empFamily
                        {
                            empID = data.empID,
                            empFamilyRelationships = data.empFamilyRelationships,
                            empFamilyFullName = data.empFamilyFullName,
                            empFamilyJob = data.empFamilyJob,
                            empFamilyJobAddr = data.empFamilyJobAddr,
                            empFamilyAddr = data.empFamilyAddr,
                            empFamilyTel = data.empFamilyTel,
                            empFamilyEmail = data.empFamilyEmail,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpFamily";
                        string olddata = "";
                        string newdata = "EmpID = " + data.empID + "; empFamilyRelationships =" + data.empFamilyRelationships.Trim() + ";  empfamilyfullName = "+ data.empFamilyFullName +"; empFamilyJob = "+ data.empFamilyJob +"; empFamilyJobaddr = "+ data.empFamilyJobAddr +"; empFamilyAddr = "+ data.empFamilyAddr +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpFamily")]
        public EmpFamilyListResult UpdateEmpFamily(UpdateEmpFamilyParam data)
        {
            var ret = new EmpFamilyListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empFamily
                                         where c.empFamilyID == data.empFamilyID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "EmpID = " + data.empID + "; empFamilyRelationships =" + ds_update.empFamilyRelationships.Trim() + ";  empfamilyfullName = " + ds_update.empFamilyFullName + "; empFamilyJob = " + ds_update.empFamilyJob + "; empFamilyJobaddr = " + ds_update.empFamilyJobAddr + "; empFamilyAddr = " + ds_update.empFamilyAddr + "; status_ID = 3"; 
                            ds_update.empID = data.empID;
                            ds_update.empFamilyRelationships = data.empFamilyRelationships;
                            ds_update.empFamilyFullName = data.empFamilyFullName;
                            ds_update.empFamilyJob = data.empFamilyJob;
                            ds_update.empFamilyJobAddr = data.empFamilyJobAddr;
                            ds_update.empFamilyAddr = data.empFamilyAddr;
                            ds_update.empFamilyTel = data.empFamilyTel;
                            ds_update.empFamilyEmail = data.empFamilyEmail;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpFamily";
                        //string olddata = "";
                        string newdata = "EmpID = " + data.empID + "; empFamilyRelationships =" + data.empFamilyRelationships.Trim() + ";  empfamilyfullName = " + data.empFamilyFullName + "; empFamilyJob = " + data.empFamilyJob + "; empFamilyJobaddr = " + data.empFamilyJobAddr + "; empFamilyAddr = " + data.empFamilyAddr + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpFamily")]
        public EmpFamilyListResult DelEmpFamily(DelEmpFamilyParam data)
        {
            var ret = new EmpFamilyListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empFamily
                                         where c.empFamilyID == data.empFamilyID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpfamily";
                        string olddata = "";
                        string newdata = "ID=" + data.empFamilyID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/EmpSSOList")]
        public EmpSSOListResult EmpSSOList(EmpEducationListParam data)
        {
            var ret = new EmpSSOListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empSSO
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empSSOID,
                                           c.empID,
                                           c.ssoID,
                                           c.tb_sso.tb_ssoType.ssoName,
                                           c.SSOValue,
                                           c.startDate,
                                           c.remark,
                                           c.ssoNumber
                                       }).ToList();

                        if (data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpSSOListViewModelResult> ResultObject = new List<EmpSSOListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpSSOListViewModelResult()
                            {
                                empSSOID = c.empSSOID.ToString(),
                                empID =   c.empID.ToString(),
                                ssoID = c.ssoID.ToString(),
                                ssoTypeName =c.ssoName.ToString(),
                                SSOValue = Convert.ToDouble(c.SSOValue).ToString("N"),
                                SSOValue1 = c.SSOValue.ToString(),
                                startDate =   Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                startDate1 = Convert.ToDateTime(c.startDate).ToString("yyyy-MM-dd"),
                                remark = c.remark, 
                                ssonnumber = c.ssoNumber
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                       } 
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Family data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Family data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpSSO")]
        public EmpSSOListResult NewEmpSSO(NewEmpSSOParam data)
        {
            var ret = new EmpSSOListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        DateTime strDate = DateTime.Parse(data.startDate.ToString());
                        float SSOValue = float.Parse(data.SSOValue.ToString());
                        db.tb_empSSO.Add(new tb_empSSO
                        {
                            empID = data.empID,
                            ssoID = data.ssoID,
                            SSOValue = SSOValue,
                            startDate = strDate,
                            remark = data.remark,
                            ssoNumber = data.ssonumber,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                            
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpSSO";
                        string olddata = "";
                        string newdata = "empid = " + data.empID + "; ssoID =" + data.ssoID + "; ssovalue = "+ data.SSOValue +"; startdate = "+ data.startDate +"; remark = "+ data.remark +"; ssoNumber = "+ data.ssonumber +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpSSO")]
        public EmpSSOListResult UpdateEmpSSO(UpdateEmpSSOParam data)
        {
            var ret = new EmpSSOListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //   where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        DateTime strDate = DateTime.Parse(data.startDate.ToString());
                        float SSOValue = float.Parse(data.SSOValue.ToString());

                        var ds_update = (from c in db.tb_empSSO
                                         where c.empSSOID == data.empSSOID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empid = " + ds_update.empID + "; ssoID =" + ds_update.ssoID + "; ssovalue = " + ds_update.SSOValue + "; startdate = " + ds_update.startDate + "; remark = " + ds_update.remark + "; ssoNumber = " + ds_update.ssoNumber + "; status_ID = 3";
                            ds_update.empID = data.empID;
                            ds_update.ssoID = data.ssoID;
                            ds_update.SSOValue = SSOValue;
                            ds_update.startDate = strDate;
                            ds_update.remark = data.remark;                           
                            ds_update.status_ID = 3;
                            ds_update.ssoNumber = data.ssonumber;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpSSO";
                       // string olddata = "";
                        string newdata = "empid = " + data.empID + "; ssoID =" + data.ssoID + "; ssovalue = " + data.SSOValue + "; startdate = " + data.startDate + "; remark = " + data.remark + "; ssoNumber = " + data.ssonumber + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpSSO")]
        public EmpSSOListResult DelEmpSSO(DelEmpSSOParam data)
        {
            var ret = new EmpSSOListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empSSO
                                         where c.empSSOID == data.empSSOID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpSSO";
                        string olddata = "";
                        string newdata = "ID=" + data.empSSOID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpGroupList")]
        public EmpGroupListtResult EmpGroupList(EmpGroupListParam data)
        {
            var ret = new EmpGroupListtResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empGroup
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empGroupID,
                                           c.empGroupCode,
                                           c.empGroupName1,
                                           c.empGroupName2
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<EmpGroupListViewModelResult> ResultObject = new List<EmpGroupListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpGroupListViewModelResult()
                            {
                                empGroupID = c.empGroupID.ToString(),
                                empGroupCode = c.empGroupCode,
                                empGroupName1 = c.empGroupName1,
                                empGroupName2 =  c.empGroupName2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Group data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Group data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpGroup")]
        public EmpGroupListtResult NewEmpGroup(NewEmpGroupParam data)
        {
            var ret = new EmpGroupListtResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empGroup.Add(new tb_empGroup
                        {
                            empGroupCode = data.empGroupCode,
                            empGroupName1 = data.empGroupName1,
                            empGroupName2 = data.empGroupName2,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpGroup";
                        string olddata = "";
                        string newdata = "empGroupCode = " + data.empGroupCode + "; empGroupName1 =" + data.empGroupName2 + "; empGroupName2 = "+ data.empGroupName2 +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpGroup")]
        public EmpGroupListtResult UpdateEmpGroup(UpdateEmpGroupParam data)
        {
            var ret = new EmpGroupListtResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empGroup
                                         where c.empGroupID == data.empGroupID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empGroupCode = " + ds_update.empGroupCode + "; empGroupName1 =" + ds_update.empGroupName2 + "; empGroupName2 = " + ds_update.empGroupName2 + "; status_ID = 3";
                            ds_update.empGroupCode = data.empGroupCode;
                            ds_update.empGroupName1 = data.empGroupName1;
                            ds_update.empGroupName2 = data.empGroupName2;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpGroup";
                        //string olddata = "";
                        string newdata = "empGroupCode = " + data.empGroupCode + "; empGroupName1 =" + data.empGroupName2 + "; empGroupName2 = " + data.empGroupName2 + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpGroup")]
        public EmpGroupListtResult DelEmpGroup(DelEmpGroupParam data)
        {
            var ret = new EmpGroupListtResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empGroup
                                         where c.empGroupID == data.empGroupID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpGroup";
                        string olddata = "";
                        string newdata = "ID=" + data.empGroupID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpIncomeList")]
        public EmpIncomeListResult EmpIncomeList(EmpIncomeListParam data)
        {
            var ret = new EmpIncomeListResult();
            // WriteLogFile("deptList  data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empIncome
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empIncome,
                                           c.empID,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.incomTypeID,
                                           c.tb_incomType.incomTypeName1,
                                           c.tb_incomType.incomTypeName2,
                                           c.amount,
                                           c.remark
                                       }).ToList();
                        if(data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpIncomeListResultViewModelResult> ResultObject = new List<EmpIncomeListResultViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpIncomeListResultViewModelResult()
                            {
                                empIncomeID = c.empIncome.ToString(),
                                empID = c.empID.ToString(),
                                incomTypeID = c.incomTypeID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                incomTypeName = data.lang == "1" || data.lang == null ? c.incomTypeName1 : c.incomTypeName2,
                                amount = Convert.ToDouble(c.amount).ToString("N"),
                                amount1 = c.amount.ToString(),
                                remark = c.remark
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Group data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Group data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpIncome")]
        public EmpIncomeListResult NewEmpIncome(NewEmpIncomeParam data)
        {
            var ret = new EmpIncomeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empIncome.Add(new tb_empIncome
                        {
                            empID = data.empID,
                            incomTypeID = data.incomTypeID,
                            amount = data.amount,
                            remark = data.remark,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpIncome";
                        string olddata = "";
                        string newdata = "EmpID = "+ data.empID +"; incomTypeID = "+ data.incomTypeID +"; amount = "+ data.amount +"; remark = "+ data.remark +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpIncome")]
        public EmpIncomeListResult UpdateEmpIncome(UpdateEmpIncomeParam data)
        {
            var ret = new EmpIncomeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empIncome
                                         where c.empIncome == data.empIncomeID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "EmpID = " + ds_update.empID + "; incomTypeID = " + ds_update.incomTypeID + "; amount = " + ds_update.amount + "; remark = " + ds_update.remark + "; status_ID = 3";
                            ds_update.empID = data.empID;
                            ds_update.incomTypeID = data.incomTypeID;
                            ds_update.amount = data.amount;
                            ds_update.remark = data.remark;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();
                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpIncome";
                        //string olddata = "";
                        string newdata = "EmpID = " + data.empID + "; incomTypeID = " + data.incomTypeID + "; amount = " + data.amount + "; remark = " + data.remark + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpIncome")]
        public EmpIncomeListResult DelEmpIncome(DelEmpIncomeParam data)
        {
            var ret = new EmpIncomeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empIncome
                                         where c.empIncome == data.empIncomeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpIncome";
                        string olddata = "";
                        string newdata = "ID=" + data.empIncomeID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/EmpInfoList")]
        public EmpInfoListResult EmpInfoList(EmpInfoListParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empInfo
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empInfoID,
                                           c.empPosition,
                                           c.empID,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_unit.unitName1,
                                           c.tb_unit.unitName2,
                                           c.tb_empLevel.empLevelName1,
                                           c.tb_empLevel.empLevelName2,
                                           c.hireDay,
                                           c.tb_empGroup.empGroupName1,
                                           c.tb_empGroup.empGroupName2,
                                           c.shiftWorkingID,
                                           c.costCenterID,
                                           c.tb_costCenter.costCenterCode,
                                           c.tb_costCenter.costCenterText,
                                           c.assignmentLocation,
                                           c.currentAddress,
                                           c.mgrid
                                       }).ToList();
                        if (data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpInfoListResultViewModelResult> ResultObject = new List<EmpInfoListResultViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpInfoListResultViewModelResult()
                            {
                                empInfoID = c.empInfoID.ToString(),
                                empPosition = c.empPosition,
                                empID = c.empID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                UnitName = data.lang == "1" || data.lang == null ? c.unitName1 : c.unitName2,
                                empLevelName = data.lang == "1" || data.lang == null ? c.empLevelName1 : c.empLevelName2,
                                hireDay = Convert.ToDateTime(c.hireDay).ToString("dd/MM/yyyy"),
                                empGroupName = data.lang == "1" || data.lang == null ? c.empGroupName1 : c.empGroupName2,
                                shiftWorking = db.tb_shiftWorking.Where(w => w.shiftWorkingID == c.shiftWorkingID).FirstOrDefault() == null ? "" : db.tb_shiftWorking.Where(w => w.shiftWorkingID == c.shiftWorkingID).Select(s => s.shiftName).FirstOrDefault(),
                                costCenter = db.tb_costCenter.Where(w => w.costCenterID == c.costCenterID).FirstOrDefault() == null ? "" : db.tb_costCenter.Where(w => w.costCenterID == c.costCenterID).Select(s => s.costCenterText).FirstOrDefault(),
                                assignmentLocation = c.assignmentLocation,
                                currentAddress = c.currentAddress,
                                mgrid = c.mgrid.ToString()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp Info data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp Info data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpInfo")]
        public EmpInfoListResult NewEmpInfo(NewEmpInfoParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                        where(c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        
                        //update new code
                        string command = "";
                        string result = "";
                        command = "exec pd_updateTb_EmployeesApproveBy @approveby =" + data.approveby + ", @empid=" + data.empID + "";
                        using (SqlConnection conn = new SqlConnection(connectionString))
                        {
                            conn.Open();
                            using (SqlCommand com = new SqlCommand(command, conn))
                            {
                                Object obj = com.ExecuteScalar();
                                if (obj != null)
                                {
                                    result = obj.ToString();
                                }
                                conn.Close();
                            }
                        }
                        
                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_updateEMPINFO " +
                              " @empID = '"+ data.empID +"', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result =  myCommand.ExecuteScalar().ToString();
                            }
                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        /*
                        db.tb_empInfo.Add(new tb_empInfo
                        {
                            empPosition = data.empPosition,
                            empID = data.empID,
                            unitID = data.UnitID,
                            empLevelID = data.empLevelID,
                            hireDay = data.hireDay,
                            empGroupID = data.empGroupID,
                            shiftWorkingID = data.shiftWorkingID,
                            costCenterID = data.costCenterID,
                            assignmentLocation = data.assignmentLocation,
                            currentAddress = data.currentAddress,
                            mgrid = data.mgrid,
                            workingStatusID = data.workingStatusID,
                            empTypeID = data.empTypeID,         
                            TaxTypeID = data.empTaxTypeID,                   
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now,
                            positionID = data.empPositionTitleID
                        });
                        db.SaveChanges();
                        */
                        string command2 = "";
                        string result2 = "";
                        command2 = "exec pd_insertTb_empInfoNew @empposition = N'"+ data.empPosition + "', @empid =" + data.empID + ", @unitID =" + data.UnitID + ", @empLevelID =" + data.empLevelID + ", @empGroupID =" + data.empGroupID + ", @shiftworkingid =" + data.shiftWorkingID + ", @costcenterid =" + data.costCenterID + ", @assigmentlocation = N'" + data.assignmentLocation + "', " +
                            "@currentaddress =N'" + data.currentAddress + "', @mgrid =" + data.mgrid + ", @workingstatusid =" + data.workingStatusID + ", @emptypeid =" + data.empTypeID + ", @taxtypeid =" + data.empTaxTypeID + ", @user_add =" + ds_tokey.userID + ", @positionid =" + data.empPositionTitleID + ", @hiredate = '"+ data.hireDay +"'";
                        using (SqlConnection conn2 = new SqlConnection(connectionString))
                        {
                            conn2.Open();
                            using (SqlCommand com2 = new SqlCommand(command2, conn2))
                            {
                                Object obj2 = com2.ExecuteScalar();
                                if (obj2 != null)
                                {
                                    result2 = obj2.ToString();
                                }
                                conn2.Close();
                            }
                        }




                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpInfo";
                        string olddata = "";
                        string newdata = "empPosition="+ data.empPosition + "; empID=" + data.empID + "; unitID=" + data.UnitID + "; empLevelID=" + data.empLevelID + "; " +
                            "hireday=" + data.hireDay + "; empGroupID=" + data.empGroupID + "; shiftworkingid=" + data.shiftWorkingID + "; costcenterid=" + data.costCenterID + "; " +
                            "assignmentlocation=" + data.assignmentLocation + "; currenaddress=" + data.currentAddress + "; mgrid=" + data.mgrid + "; workingstatusid=" + data.workingStatusID + "; " +
                            "emptypeid=" + data.empTypeID + "; taxtypeid=" + data.empTaxTypeID + "; positionid=" + data.empPositionTitleID + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpInfo")]
        public EmpInfoListResult UpdateEmpInfo(UpdateEmpInfoParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empInfo
                                         where c.empInfoID == data.empInfoID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empPosition=" + ds_update.empPosition + "; empID=" + ds_update.empID + "; unitID=" + ds_update.unitID + "; empLevelID=" + ds_update.empLevelID + "; " +
                            "hireday=" + ds_update.hireDay + "; empGroupID=" + ds_update.empGroupID + "; shiftworkingid=" + data.shiftWorkingID + "; costcenterid=" + ds_update.costCenterID + "; " +
                            "assignmentlocation=" + ds_update.assignmentLocation + "; currenaddress=" + ds_update.currentAddress + "; mgrid=" + ds_update.mgrid + "; workingstatusid=" + ds_update.workingStatusID + "; " +
                            "emptypeid=" + ds_update.empTypeID + "; taxtypeid=" + ds_update.TaxTypeID + "; positionid=" + ds_update.positionID + "; status_ID = 3";

                            ds_update.empPosition = data.empPosition;
                            ds_update.empID = data.empID;
                            ds_update.unitID = data.UnitID;
                            ds_update.empLevelID = data.empLevelID;
                            ds_update.hireDay = data.hireDay;
                            ds_update.empGroupID = data.empGroupID;
                            ds_update.shiftWorkingID = data.shiftWorkingID;
                            ds_update.costCenterID = data.costCenterID;
                            ds_update.assignmentLocation = data.assignmentLocation;
                            ds_update.currentAddress = data.currentAddress;
                            ds_update.mgrid = data.mgrid;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.workingStatusID = data.workingStatusID;
                            ds_update.empTypeID = data.empTypeID;
                            ds_update.TaxTypeID = data.empTaxTypeID;
                            ds_update.positionID = data.empPositionTitleID;
                        
                             
                        }


                        db.SaveChanges();

                        var ds_update2 = (from c in db.tb_employees
                                          where c.approveby == data.approveby
                                         select c).FirstOrDefault();
                        if (ds_update2 != null)
                        {
                            ds_update2.approveby = data.approveby;
                        }
                        db.SaveChanges();


                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpInfo";
                        //string olddata = "";
                        string newdata = "empPosition=" + data.empPosition + "; empID=" + data.empID + "; unitID=" + data.UnitID + "; empLevelID=" + data.empLevelID + "; " +
                            "hireday=" + data.hireDay + "; empGroupID=" + data.empGroupID + "; shiftworkingid=" + data.shiftWorkingID + "; costcenterid=" + data.costCenterID + "; " +
                            "assignmentlocation=" + data.assignmentLocation + "; currenaddress=" + data.currentAddress + "; mgrid=" + data.mgrid + "; workingstatusid=" + data.workingStatusID + "; " +
                            "emptypeid=" + data.empTypeID + "; taxtypeid=" + data.empTaxTypeID + "; positionid=" + data.empPositionTitleID + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpInfo")]
        public EmpInfoListResult DelEmpInfo(DelEmpInfoParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empInfo
                                         where c.empInfoID == data.empInfoID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpInfo";
                        string olddata = "";
                        string newdata = "ID=" + data.empInfoID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/CheckProcessStatus")]
        public ProcessStatusResult CheckProcessStatus(CheckProcessStatusParam data)
        {
            var ret = new ProcessStatusResult();
            // WriteLogFile("deptList " + data.TokenKey);

            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds = (from c in db.tb_process_status
                                  where c.processID == data.procesID                               
                                  select new
                                  {
                                      c.processID,
                                      c.processStatusID,
                                      c.processText
                                  }).ToList();

                        if (ds != null)
                        {

                            List<ProcessStatusResultViewModelResult> ResultObject = new List<ProcessStatusResultViewModelResult>();
                            ResultObject = ds.Select(c => new ProcessStatusResultViewModelResult()
                            {
                                ProcessStatus = c.processStatusID.ToString(),
                                ProcessStatusText = c.processText.ToString() 
                            }).ToList();

                            ret.ModelErrors = null;                
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "NOT FOUND EMP No ";
                            ret.ResultObject = null;
                            ret.StatusCode = 404;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "NOT FOUND EMP No ...!";
                            return ret;
                        }


                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UploadFingerScan")]
        public UploadFingerSUMResult UploadFingerScan(UploadFingerScanSUMParam data)
        {
            var ret = new UploadFingerSUMResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            int countUploaded = 0;
            string Command;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //gggg
                        if (data.noted == "CPLoad")
                        {
                            Command = " UPDATE tb_process_status SET processStatusID = 0 WHERE processID = 2; SELECT 0 as Result;";  //

                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                    Result = myCommand.ExecuteScalar().ToString();
                                }
                            }


                            //Command = " DELETE FROM tmp_view_upload; INSERT INTO tmp_view_upload (empNo,fullName,costCenter,sh1,sh2,sh3,total_wd,total_wm,remark) " +
                            //    " SELECT empNo, fullName, '', COALESCE(sum(shift1_wd), 0) as shift1_wd, COALESCE(sum(shift2_wd), 0) as shift2_wd, " + 
                            //    " COALESCE(sum(shift3_wd), 0) AS shift3_wd, COALESCE (sum(shift1_wd) + sum(shift2_wd) + sum(shift3_wd), 0) as total_wd, " +
                            //    " COALESCE(wdMonth, 0) as total_wh,''  FROM dbo.tb_workingDay " + 
                            //    " WHERE transactionNo = '"+ data.transactionNo + "' and status_id = 130 " +
                            //    " group by empNo, fullName, wdMonth; SELECT 0 as Result; ";  //

                            Command = " EXEC p_upload_finger_sum @transactionNo = N'" + data.transactionNo + "', @userID = '"+ ds_tokey.userID.ToString() + "', @ipaddress = '127.0.0.1'";

                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                    Result = myCommand.ExecuteScalar().ToString();
                                }
                            }


                            //var ds_Data = (from c in db.v_upload_finger
                            //               where c.transactionNo == data.transactionNo && c.status_id ==130                                        
                            //               select new
                            //               {                                               
                            //                   c.workdayID,
                            //                   c.transactionNo,
                            //                   c.empID,
                            //                   c.empNo,
                            //                   c.fullName,
                            //                   c.statusText,
                            //                   c.workday,
                            //                   c.wdName,
                            //                   c.shift1_timeIn,
                            //                   c.shift1_timOut,
                            //                   c.shift1_wd,
                            //                   c.shift2_timeIn,
                            //                   c.shift2_timOut,
                            //                   c.shift2_wd,
                            //                   c.shift3_timeIn,
                            //                   c.shift3_timOut,
                            //                   c.shift3_wd,
                            //                   c.total_wd,
                            //                   c.total_wh,
                            //                   c.total_oth,
                            //                   c.noted,
                            //                   c.wdActual,
                            //                   c.wdMonth,
                            //                   c.costCenterText
                            //               }).ToList();
                            //if (ds_Data != null)
                            //{                                
                            //    List<UploadFingerSUMResultViewModelResult> ResultObject = new List<UploadFingerSUMResultViewModelResult>();
                            //    ResultObject = ds_Data.Select(c => new UploadFingerSUMResultViewModelResult()
                            //    {
                            //        workingDayID = c.workdayID.ToString(),
                            //        transactionNo = c.transactionNo,
                            //        empID = c.empID.ToString(),
                            //        empNo = c.empNo.ToString(),
                            //        fullName = c.fullName.ToString(),
                            //        workDay = c.workday.ToString(),
                            //        shift1_wd = c.shift1_wd.ToString(),
                            //        shift2_wd = c.shift2_wd.ToString(),
                            //        shift3_wd = c.shift3_wd.ToString(),
                            //        actual_wd = c.wdActual.ToString(),
                            //        wd_in_month = c.wdMonth.ToString(),
                            //        remark = c.noted.ToString(),
                            //        cost_center = c.costCenterText.ToString()
                            //    }).ToList();

                            //    ret.ResultObject = ResultObject;
                            //}
                            //else
                            //{
                            //    ret.ResultObject = null;
                            //}


                            var ds_Data = (from c in db.tmp_view_upload                                          
                                           select new
                                           {                                             
                                               c.empNo,
                                               c.fullName,
                                               c.costCenter,
                                               c.sh1,
                                               c.sh2,
                                               c.sh3,
                                               c.total_wd,
                                               c.total_wm,
                                               c.remark ,
                                               c.al,
                                               c.sl,
                                               c.cl,
                                               c.dil,
                                               c.ml,
                                               c.pl,
                                               c.otherl,
                                               c.lwp,
                                               c.publicHoliday,
                                               c.wh,
                                               c.wf,
                                               c.dayOff
                                           }).ToList();
                            if (ds_Data != null)
                            {
                                List<UploadFingerSUMResultViewModelResult> ResultObject = new List<UploadFingerSUMResultViewModelResult>();
                                ResultObject = ds_Data.Select(c => new UploadFingerSUMResultViewModelResult()
                                {
                                    workingDayID = "",
                                    transactionNo = "",
                                    empID = "",
                                    empNo = c.empNo.ToString(),
                                    fullName = c.fullName.ToString(),
                                    workDay = "",
                                    shift1_wd = c.sh1.ToString(),
                                    shift2_wd = c.sh2.ToString(),
                                    shift3_wd = c.sh3.ToString(),
                                    actual_wd = c.total_wd.ToString(),
                                    wd_in_month = c.total_wm.ToString(),
                                    remark = c.remark.ToString(),
                                    cost_center = c.costCenter.ToString(),
                                    al = c.al.ToString(),
                                    sl = c.sl.ToString(),
                                    cl = c.cl.ToString(),
                                    dil = c.dil.ToString(),
                                    ml = c.ml.ToString(),
                                    pl = c.pl.ToString(),
                                    otherl = c.otherl.ToString(),
                                    lwp = c.lwp.ToString(),
                                    publicHoliday = c.publicHoliday.ToString(),
                                    wh = c.wh.ToString(),
                                    wf = c.wf.ToString(),
                                    dayOff = c.dayOff.ToString()
                                }).ToList();

                                ret.ResultObject = ResultObject;
                            }
                            else
                            {
                                ret.ResultObject = null;
                            }

                        }
                        else
                        {
                            string workingday = data.workday;
                            //DateTime new_working = Convert.ToDateTime(workingday);

                            //string Year_path = data.workday.Substring(0, 4);
                            //string Month_path = data.workday.Substring(4, 2);
                            //string Day_path = data.workday.Substring(6, 2);

                            string Year_path = data.workday.Substring(0, 4);
                            string Month_path = data.workday.Substring(4, 2);
                            string Day_path = data.workday.Substring(6, 2);

                            string FullDate = Year_path + "-" + Month_path + "-" + Day_path;

                            // DateTime getUploadDate = Convert.ToDateTime(workingday);
                            DateTime getUploadDate = Convert.ToDateTime(FullDate);
                            var ds_cout = (from c in db.tb_workingDay
                                           where c.status_id == 1 && c.workday == getUploadDate && 100 == 5
                                           select c).ToList();
                            if (ds_cout != null)
                            {
                                countUploaded = ds_cout.Count;
                            }

                            if (countUploaded > 0)
                            {
                                ret.ModelErrors = "Duplicate in the database ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 409;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "Duplicate in the database ";
                                return ret;
                            }

                            //Command = " DECLARE	@return_value int " +
                            //     " EXEC @return_value = p_i_finger " +
                            //     " @transactionNo = N'" + data.transactionNo + "', " +
                            //     " @empID = '" + data.empID + "', " +
                            //     " @empNo = N'" + data.empNo + "', " +
                            //     " @fullName = N'" + data.fullName + "', " +
                            //     " @statusText = N'" + data.statusText + "', " +
                            //     " @workday = N'" + data.workday + "', " +
                            //     " @wdName = '" + data.wdName + "', " +
                            //     " @shift1_timeIn = N'" + data.shift1_timeIn + "', " +
                            //     " @shift1_timOut = N'" + data.shift1_timOut + "', " +
                            //     " @shift1_wd = '" + data.shift1_wd + "', " +
                            //     " @shift2_timeIn = N'" + data.shift2_timeIn + "', " +
                            //     " @shift2_timOut = N'" + data.shift2_timOut + "', " +
                            //     " @shift2_wd = '" + data.shift2_wd + "', " +
                            //     " @total_wd = '" + data.total_wd + "', " +
                            //     " @total_wh = '" + data.total_wh + "', " +
                            //     " @total_oth = '" + data.total_oth + "', " +
                            //     " @noted = N'" + data.noted + "', " +
                            //     " @userID = '" + ds_tokey.userID + "' " +
                            //     " SELECT	'ReturnValue' = @return_value";


                            Command = " DECLARE	@return_value int " +
                                " EXEC @return_value = p_i_finger_sum " +
                                " @transactionNo = N'" + data.transactionNo + "', " +
                                " @empID = '" + data.empID + "', " +
                                " @empNo = N'" + data.empNo + "', " +
                                " @fullName = N'" + data.fullName + "', " +
                                " @cost_center = N'" + data.cost_center + "', " +
                                " @workday = N'" + data.workday + "', " +
                                " @shift1_wd = '" + data.shift1_wd + "', " +                                
                                " @shift2_wd = '" + data.shift2_wd + "', " +
                                " @shift3_wd = '" + data.shift3_wd + "', " +
                                " @actual_wd = '" + data.actual_wd + "', " +
                                " @wd_in_month = '" + data.wd_in_month + "', " +                            
                                " @noted = N'" + data.noted + "', " +
                                " @userID = '" + ds_tokey.userID + "' " +
                                " SELECT	'ReturnValue' = @return_value";


                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                    Result = myCommand.ExecuteScalar().ToString();
                                }

                                //This is save log
                                string logevent = "Upload";
                                string logmodules = "UploadFingerScan";
                                string olddata = "";
                                string newdata = "TransactionNo = " + data.transactionNo + "; empid = " + data.empID + "; empno = " + data.empNo + "; fullname = " + data.fullName + "; " +
                                    "cost_center = " + data.cost_center + "; workday = " + data.workday + "; shift1 = " + data.shift1_wd + "; shift2 = " + data.shift2_wd + "; " +
                                    "shift3 = " + data.shift3_wd + "; actual = " + data.actual_wd + "; wd_in_month = " + data.wd_in_month + "; noted = " + data.noted + ";  ";
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);
                            }

                            if (Result == "1")
                            {
                                ret.ModelErrors = "Insert fail";
                                ret.ResultObject = null;
                                ret.StatusCode = 400;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "Expectation Failed";
                                return ret;
                            }
                            ret.ResultObject = null;
                        }


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SaveUploadExcel")]
        public EmpInfoListResult SaveUploadExcel(SaveUploadExcelFileParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            string Command = " DECLARE	@return_value int " +
                             " EXEC @return_value = p_save_upload " +
                             " @userID = '" + data.TokenKey + "', " +
                             " @transactionNo = '" + data.transactionNo + "', " +
                             " @uploadTypeID = '" + data.uploadTypeID + "', " +
                             " @SetDate = N'" + data.SetDate + "', " +
                             " @salaryID = '" + data.salaryID + "' " +
                             " SELECT	'ReturnValue' = @return_value ";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_save_upload " +
                              " @userID = '" + ds_tokey.userID + "', " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @uploadTypeID = '" + data.uploadTypeID + "', " +
                              " @SetDate = N'" + data.SetDate + "', " +
                              " @salaryID = '" + data.salaryID + "' " +
                              " SELECT	'ReturnValue' = @return_value ";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "SaveUploadExcel";
                            string olddata = "";
                            string newdata = "UserID = "+ ds_tokey.userID +"; transactionno = "+ data.transactionNo + "; uploadtypeid = " + data.uploadTypeID + "; " +
                                "setDate  = " + data.SetDate + "; salaryID = " + data.salaryID + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Save fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message.ToString() + " | " + Command);
                ret.ModelErrors = "Error" + ex.Message.ToString();
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewUpload")]
        public EmpInfoListResult NewUpload(NewUploadFileListParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_new_upload " +
                              " @userID = '" + ds_tokey.userID + "', " +
                              " @uploadTypeID = '" + data.uploadTypeID + "' " +
                              " SELECT	'ReturnValue' = @return_value ";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "New";
                            string logmodules = "NewUpload";
                            string olddata = "";
                            string newdata = "Userid = "+ ds_tokey.userID + "; uploadTypeID  = " + data.uploadTypeID + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Save fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SaveWorkingDay")]
        public EmpInfoListResult SaveWorkingDay(SaveWorkingDayParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId >= 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_approve_finger " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @tmpID = '" + data.tmpID + "', " +
                              " @workMonth = '" + data.workMonth + "', " +
                              " @workYear = '" + data.workYear + "', " +
                              " @statusApprove = '" + data.statusApprove + "' " +
                              " SELECT	'ReturnValue' = @return_value ";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "New";
                            string logmodules = "SaveWorkingDay";
                            string olddata = "";
                            string newdata = "TransactionNo = "+ data.transactionNo + "; empID = " + data.empID + "; tempID = " + data.tmpID + "; workmonth = " + data.workMonth + "; workyear = " + data.workYear + "; statusapprove = " + data.statusApprove + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Save fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/ClearWorkingDayAll")]
        public CheckWorkingDayListResult ClearWorkingDayAll(ClearWorkingDayAllParam data)
        {
            var ret = new CheckWorkingDayListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId >= 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_find = (from c in db.tmp_checkworkday
                                       where  c.workMonth == data.monthView && c.workYear == data.yearView
                                       select new
                                       {
                                           c.status_id
                                       }).FirstOrDefault();
                        if (ds_find != null)
                        {
                            if (ds_find.status_id == 7)
                            {
                                    if (data.lang == "1")
                                    {
                                        ret.ModelErrors = "ບໍ່ສາມາດລຶບຂໍ້ມູນປະຈໍາເດືອນ " + data.monthView + "/" + data.yearView + " ໄດ້, ຂໍ້ມູນດັ່ງກ່າວແມ່ນຖືກຄິດໄລ່ຮຽບຮ້ອຍແລ້ວ...!";
                                    }
                                    else
                                    {
                                        ret.ModelErrors = "Cannot delete data Month " + data.monthView + "/" + data.yearView + ", Because it's process already...!";
                                    }
                                    ret.ResultObject = null;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                          }
                        } else
                        {
                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບໍ່ພົບຂໍ້ມູນປະຈໍາເດືອນ " + data.monthView + "/" + data.yearView + " ...!";
                            }
                            else
                            {
                                ret.ModelErrors = "Not found data Month " + data.monthView + "/" + data.yearView + "...!";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }



                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = P_clear_workingday " +
                              " @workMonth = '" + data.monthView + "', " +
                              " @workYear = '" + data.yearView + "' " +                             
                              " SELECT	'ReturnValue' = @return_value ";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Clear";
                            string logmodules = "ClearWorkingDayAll";
                            string olddata = "";
                            string newdata = "workMonth="+ data.monthView +"; workyear = "+ data.yearView +".";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Clear data fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນປະຈໍາເດືອນ " + data.monthView + "/" + data.yearView + " ສໍາເລັດແລ້ວ...!";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete data Month " + data.monthView + "/" + data.yearView + " complete...!";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UploadIncentive")]
        public EmpInfoListResult UploadIncentive(UploadIncentiveParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double incentiveAmount = 0;
            
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        
                        if (data.totalIncentive == "" || data.totalIncentive == null)
                        {
                            incentiveAmount = 0;
                        } else
                        {
                            incentiveAmount = Double.Parse(data.totalIncentive, System.Globalization.NumberStyles.Any);
                        }

                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_incentive " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @proName = N'" + data.proName + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @incentiveMonth = '" + data.incentiveMonth + "', " +
                              " @totalIncentive = '" + incentiveAmount + "', " +                                      
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadIncentive";
                            string olddata = "";
                            string newdata = "TransactionNo = "+ data.transactionNo + "; proname = " + data.proName + "; empid  = " + data.empID + "; " +
                                "empno = " + data.empNo + "; fullname  = " + data.fullName + "; incentivemonth = " + data.incentiveMonth + "; " +
                                "totalincentive = " + data.totalIncentive + "; noted = " + data.noted + "; userid = " + ds_tokey.userID + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UploadADVPay")]
        public EmpInfoListResult UploadADVPay(UploadADVPAYParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double advAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.advAmount == "" || data.advAmount == null)
                        {
                            advAmount = 0;
                        } else
                        {
                            advAmount = Double.Parse(data.advAmount, System.Globalization.NumberStyles.Any);
                        }
                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_advPay " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @advDate = '" + data.advPayDate + "', " +
                              " @advAmount = '" + advAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadADVPay";
                            string olddata = "";
                            string newdata = "Transactionno = "+ data.transactionNo+ "; empid = " + data.empID + "; empno = " + data.empNo + "; " +
                                "fullname = " + data.fullName + "; AdvDate = " + data.advPayDate + "; Amount = " + advAmount + "; noted = " + data.noted + ";  ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);
                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UploadFHF")]
        public EmpInfoListResult UploadFHF(UploadFHFPAYParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double deductAmount = 0;
            double payAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.DeductAmount == "" || data.DeductAmount == null)
                        {
                            deductAmount = 0;
                        } else
                        {
                            deductAmount = Double.Parse(data.DeductAmount, System.Globalization.NumberStyles.Any);
                        }

                        if (data.PayAmount == "" || data.PayAmount == null)
                        {
                            payAmount = 0;
                        }
                        else
                        {
                            payAmount = Double.Parse(data.PayAmount, System.Globalization.NumberStyles.Any);
                        }
                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_fhfPay " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @fhfDate = '" + data.FHFPayDate + "', " +
                              " @fhfDeductAmount = '" + deductAmount + "', " +
                              " @fhfPayAmount = '" + payAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadFHF";
                            string olddata = "";
                            string newdata = "TransactionNo = "+ data.transactionNo + "; empID = " + data.empID + "; empNo = " + data.empNo + "; fullName = " + data.fullName + "; " +
                                "fhfDate  = " + data.FHFPayDate + "; fhfDeductAmount = " + deductAmount + "; fhfpayamount = " + payAmount + "; noted = " + data.noted + ".";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UploadAdditionalDeduction")]
        public EmpInfoListResult UploadAdditionalDeduction(UploadAdditionalDeductionParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double deductAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.deductAmount== "" || data.deductAmount == null)
                        {
                            deductAmount = 0;
                        }
                        else
                        {
                            deductAmount = Double.Parse(data.deductAmount, System.Globalization.NumberStyles.Any);
                        }

                       
                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_additionalDeduction " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @deductDate = '" + data.deductDate + "', " +
                              " @deductAmount = '" + deductAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }
                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadAdditionalDeduction";
                            string olddata = "";
                            string newdata = "TransactionNo = "+ data.transactionNo + "; empID = " + data.empID + "; empNo = " + data.empNo + "; fullname = " + data.fullName + "; " +
                                "deductdate  = " + data.deductDate + "; deductAmount = " + data.deductAmount + "; noted = " + data.noted + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);
                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UploadPersonalloan")]
        public EmpInfoListResult UploadPersonalloan(UploadAdditionalDeductionParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double deductAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.deductAmount == "" || data.deductAmount == null)
                        {
                            deductAmount = 0;
                        }
                        else
                        {
                            deductAmount = Double.Parse(data.deductAmount, System.Globalization.NumberStyles.Any);
                        }


                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_personalloan " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @deductDate = '" + data.deductDate + "', " +
                              " @deductAmount = '" + deductAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }
                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadPersonalloan";
                            string olddata = "";
                            string newdata = "TransactionNo = " + data.transactionNo + "; empID = " + data.empID + "; empNo = " + data.empNo + "; fullname = " + data.fullName + "; " +
                                "deductdate  = " + data.deductDate + "; deductAmount = " + data.deductAmount + "; noted = " + data.noted + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);
                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/UploadSLDRTloan")]
        public EmpInfoListResult UploadSLDRTloan(UploadAdditionalDeductionParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double deductAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.deductAmount == "" || data.deductAmount == null)
                        {
                            deductAmount = 0;
                        }
                        else
                        {
                            deductAmount = Double.Parse(data.deductAmount, System.Globalization.NumberStyles.Any);
                        }


                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_sldrtloan " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @deductDate = '" + data.deductDate + "', " +
                              " @deductAmount = '" + deductAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }
                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadPersonalloan";
                            string olddata = "";
                            string newdata = "TransactionNo = " + data.transactionNo + "; empID = " + data.empID + "; empNo = " + data.empNo + "; fullname = " + data.fullName + "; " +
                                "deductdate  = " + data.deductDate + "; deductAmount = " + data.deductAmount + "; noted = " + data.noted + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);
                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UploadAdditionalPay")]
        public EmpInfoListResult UploadAdditionalPay(UploadAdditionalPayParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double payAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.payAmount == "" || data.payAmount == null)
                        {
                            payAmount = 0;
                        }
                        else
                        {
                            payAmount = Double.Parse(data.payAmount, System.Globalization.NumberStyles.Any);
                        }


                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_additionalPay " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @payDate = '" + data.payDate + "', " +
                              " @payAmount = '" + payAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadAdditionPay";
                            string olddata = "";
                            string newdata = "TransactionNo = "+ data.transactionNo + "; empID = " + data.empID + "; empNo = " + data.empNo + "; fullname = " + data.fullName + "; " +
                                "payDate  = " + data.payDate + "; payAmount = " + data.payAmount + "; noted = " + data.noted + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/UploadBonus")]
        public EmpInfoListResult UploadBonus(UploadBonusParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            String Result = "";
            double bonusAmount = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.bonusAmount == "" || data.bonusAmount == null)
                        {
                            bonusAmount = 0;
                        }
                        else
                        {
                            bonusAmount = Double.Parse(data.bonusAmount, System.Globalization.NumberStyles.Any);
                        }


                        string Command = " DECLARE	@return_value int " +
                              " EXEC @return_value = p_i_uploadBonus " +
                              " @transactionNo = '" + data.transactionNo + "', " +
                              " @empID = '" + data.empID + "', " +
                              " @empNo = N'" + data.empNo + "', " +
                              " @fullName = N'" + data.fullName + "', " +
                              " @bonusDate = '" + data.bonusDate + "', " +
                              " @bonusAmount = '" + bonusAmount + "', " +
                              " @noted = N'" + data.noted + "', " +
                              " @userID = '" + ds_tokey.userID + "' " +
                              " SELECT	'ReturnValue' = @return_value";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = myCommand.ExecuteScalar().ToString();
                            }

                            //This is save log
                            string logevent = "Upload";
                            string logmodules = "UploadBonus";
                            string olddata = "";
                            string newdata = "TransactionNo = "+ data.transactionNo + "; empID = " + data.empID + "; empNo = " + data.empNo + "; " +
                                "fullName = " + data.fullName + "; bonusDate = " + data.bonusDate + "; bonusAmount = " + data.bonusAmount + "; noted = " + data.noted + ". ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {
                            ret.ModelErrors = "Insert fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }
                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບໂຫຼດ ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Upload complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/CheckEMPID")]
        public EmpInfoListResult CheckEMPID(CheckEMPIDParam data)
        {
            var ret = new EmpInfoListResult();
            // WriteLogFile("deptList " + data.TokenKey);
           
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds = (from c in db.tb_employees
                                  where c.empNo == data.empNo
                                  && c.status_id == 3
                                  select new
                                  {                                       
                                      c.empID,
                                      c.empNo                                       
                                  }).FirstOrDefault();

                        if (ds != null)
                        {
                            if (data.lang == "1")
                            {
                                //ret.ModelErrors = "ລະຫັດພະນັກງານ: " + data.empNo + " ມີໃນຂໍ້ມູນແລ້ວ ";
                                ret.ModelErrors = ds.empID.ToString();
                            }
                            else
                            {
                                //ret.ModelErrors = "Staff No: " + data.empNo + " Have in database already ";
                                ret.ModelErrors = ds.empID.ToString();
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        } else
                        {
                            ret.ModelErrors = "NOT FOUND EMP No ";
                            ret.ResultObject = null;
                            ret.StatusCode = 404;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "NOT FOUND EMP No ...!";
                            return ret;
                        }

                       
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        //5555
        [HttpPost]
        [Route("api/User/EmpLevelList")]
        public EmpLevelListResult EmpLevelList(EmpLevelListParam data)
        {
            var ret = new EmpLevelListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empLevel
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.empLevelID,
                                           c.empLevelCode,
                                           c.empLevelName1,
                                           c.empLevelName2,
                                           c.levelsigndays
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<EmpLevelListResultViewModelResult> ResultObject = new List<EmpLevelListResultViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpLevelListResultViewModelResult()
                            {
                                empLevelID = c.empLevelID.ToString(),
                                empLevelCode = c.empLevelCode,
                                empLevelName1 = c.empLevelName1,
                                empLevelName2 = c.empLevelName2,
                                levelsigndays = c.levelsigndays.ToString()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Level data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Level data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpLevel")]
        public EmpLevelListResult NewEmpLevel(NewEmpLevelParam data)
        {
            var ret = new EmpLevelListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empLevel.Add(new tb_empLevel
                        {
                            empLevelCode = data.empLevelCode,
                            empLevelName1 = data.empLevelName1,
                            empLevelName2 = data.empLevelName2,
                            levelsigndays = data.levelsignsday,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpLevel";
                        string olddata = "";
                        string newdata = "empLevelCode = "+ data.empLevelCode + "; empLevelName1 = " + data.empLevelName1 + "; empLevelName2 = " + data.empLevelName2 + "; days = "+ data.levelsignsday+"  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpLevel")]
        public EmpLevelListResult UpdateEmpLevel(UpdateEmpLevelParam data)
        {
            var ret = new EmpLevelListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empLevel
                                         where c.empLevelID == data.empLevelID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empLevelCode = " + ds_update.empLevelCode + "; empLevelName1 = " + ds_update.empLevelName1 + "; empLevelName2 = " + ds_update.empLevelName2 + "; days = "+ ds_update.levelsigndays +"  status_ID = 3";
                            ds_update.empLevelCode = data.empLevelCode;
                            ds_update.empLevelName1 = data.empLevelName1;
                            ds_update.empLevelName2 = data.empLevelName2;
                            ds_update.levelsigndays = data.Levelsigndays;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpLevel";
                        //string olddata = "";
                        string newdata = "empLevelCode = " + data.empLevelCode + "; empLevelName1 = " + data.empLevelName1 + "; empLevelName2 = " + data.empLevelName2 + ";  days = "+ data.Levelsigndays +" status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpLevel")]
        public EmpLevelListResult DelEmpLevel(DelEmpLevelParam data)
        {
            var ret = new EmpLevelListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empLevel
                                         where c.empLevelID == data.empLevelID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpLevel";
                        string olddata = "";
                        string newdata = "ID="+ data.empLevelID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/CostCenterlList")]
        public CostCenterListResult CostCenterlList(EmpLevelListParam data)
        {
            var ret = new CostCenterListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_costCenter
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.costCenterID,
                                           c.costCenterCode,
                                           c.costCenterText
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<CostCenterListResulttViewModelResult> ResultObject = new List<CostCenterListResulttViewModelResult>();
                            ResultObject = ds_Data.Select(c => new CostCenterListResulttViewModelResult()
                            {
                                costCenterID = c.costCenterID.ToString(),
                                costCenterCode = c.costCenterCode,
                                costCenterText = c.costCenterText
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewCostCenter")]
        public CostCenterListResult NewCostCenter(NewCosCenterParam data)
        {
            var ret = new CostCenterListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_costCenter.Add(new tb_costCenter
                        {                           
                            costCenterCode = data.costCenterCode,
                            costCenterText = data.costCenterText,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewCostCenter";
                        string olddata = "";
                        string newdata = "costcentercode = "+ data.costCenterCode + ";  costcentertext = " + data.costCenterText + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateCostCenter")]
        public CostCenterListResult UpdateCostCenter(UpdateCosCenterParam data)
        {
            var ret = new CostCenterListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_costCenter
                                         where c.costCenterID == data.costCenterID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "costcentercode = " + ds_update.costCenterCode + ";  costcentertext = " + ds_update.costCenterText + "; status_ID = 3";
                            ds_update.costCenterCode = data.costCenterCode;
                            ds_update.costCenterText = data.costCenterText;
                            ds_update.status_ID = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateCostCenter";
                        //string olddata = "";
                        string newdata = "costcentercode = " + data.costCenterCode + ";  costcentertext = " + data.costCenterText + "; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelCostCenter")]
        public CostCenterListResult DelCostCenter(DelCosCenterParam data)
        {
            var ret = new CostCenterListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_costCenter
                                         where c.costCenterID == data.costCenterID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelCostCenter";
                        string olddata = "";
                        string newdata = "=" + data.costCenterID + "; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/WorkStatusList")]
        public WorkStatusListResult WorkStatuslList(EmpLevelListParam data)
        {
            var ret = new WorkStatusListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_workingStatus
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.workingStatusID,
                                           c.workingStatusText
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<WorkStatusListResulttViewModelResult> ResultObject = new List<WorkStatusListResulttViewModelResult>();
                            ResultObject = ds_Data.Select(c => new WorkStatusListResulttViewModelResult()
                            {
                                workingStatusID = c.workingStatusID.ToString(),
                                workingStatusText = c.workingStatusText 
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewWorkStatus")]
        public WorkStatusListResult NewWorkStatus(NewWorkStatusParam data)
        {
            var ret = new WorkStatusListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_workingStatus.Add(new tb_workingStatus
                        {
                            workingStatusText = data.workingStatusText,
                            status_id = 3                            
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewWorkStatus";
                        string olddata = "";
                        string newdata = "WorkingstatusText = "+ data.workingStatusText +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateWorkStatus")]
        public WorkStatusListResult UpdateWorkStatus(UpdateWorkStatusParam data)
        {
            var ret = new WorkStatusListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_workingStatus
                                         where c.workingStatusID == data.workingStatusID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "WorkingstatusID = " + ds_update.workingStatusID + "; WorkstatusText = " + ds_update.workingStatusText + "; status_ID = 3";
                            ds_update.workingStatusText = data.workingStatusText;
                            ds_update.status_id = 3;                            
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateWorkStatus";
                        //string olddata = "";
                        string newdata = "WorkingstatusID = "+ data.workingStatusID +"; WorkstatusText = "+ data.workingStatusText +"; status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelWorkStatus")]
        public WorkStatusListResult DelWorkStatus(DelWorkStatusParam data)
        {
            var ret = new WorkStatusListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //  where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_workingStatus
                                         where c.workingStatusID == data.workingStatusID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;                           
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelWorkStatus";
                        string olddata = "";
                        string newdata = "WorkingstatusID = "+ data.workingStatusID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/ShiftWorkList")]
        public ShiftWorkListResult ShiftWorkList(EmpLevelListParam data)
        {
            var ret = new ShiftWorkListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_shiftWorking
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.shiftWorkingID,
                                           c.shiftName,
                                           c.mo,
                                           c.mo_timeIn,
                                           c.mo_timeOut,
                                           c.tu,
                                           c.tu_timeIn,
                                           c.tu_timeOut,
                                           c.we,
                                           c.we_timeIn,
                                           c.we_timeOut,
                                           c.th,
                                           c.th_timeIn,
                                           c.th_timeOut,
                                           c.fr,
                                           c.fr_timeIn,
                                           c.fr_timeOut,
                                           c.sa,
                                           c.sa_timeIn,
                                           c.sa_timeOut,
                                           c.su,
                                           c.su_timeIn,
                                           c.su_timeOut,
                                           c.dayAverage
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<ShiftWorkListResulttViewModelResult> ResultObject = new List<ShiftWorkListResulttViewModelResult>();
                            ResultObject = ds_Data.Select(c => new ShiftWorkListResulttViewModelResult()
                            {
                                shiftWorkingID = c.shiftWorkingID.ToString(),
                                shiftName = c.shiftName.ToString(),
                                mo = c.mo.ToString(),
                                mo_timeIn = c.mo_timeIn.ToString("hh':'mm"),
                                mo_timeOut = c.mo_timeOut.ToString("hh':'mm"),
                                tu = c.mo.ToString(),
                                tu_timeIn = c.tu_timeIn.ToString("hh':'mm"),
                                tu_timeOut = c.tu_timeOut.ToString("hh':'mm"),
                                we = c.mo.ToString(),
                                we_timeIn = c.we_timeIn.ToString("hh':'mm"),
                                we_timeOut = c.we_timeOut.ToString("hh':'mm"),
                                th = c.mo.ToString(),
                                th_timeIn = c.th_timeIn.ToString("hh':'mm"),
                                th_timeOut =c.th_timeOut.ToString("hh':'mm"),
                                fr = c.mo.ToString(),
                                fr_timeIn = c.fr_timeIn.ToString("hh':'mm"),
                                fr_timeOut = c.fr_timeOut.ToString("hh':'mm"),
                                sa = c.mo.ToString(),
                                sa_timeIn = c.sa_timeIn.ToString("hh':'mm"),
                                sa_timeOut = c.sa_timeOut.ToString("hh':'mm"),
                                su = c.mo.ToString(),
                                su_timeIn = c.su_timeIn.ToString("hh':'mm"),
                                su_timeOut = c.su_timeOut.ToString("hh':'mm"),
                                dayAverage = c.dayAverage.ToString()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewShiftWork")]
        public ShiftWorkListResult NewShiftWork(NewShiftWorkParam data)
        {
            var ret = new ShiftWorkListResult();
            string Command = "";
            string Result = "";
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        /*Command = " DECLARE	@return_value int " +
                               " @return_value = EXEC p_i_shiftwork " +
                               " @shiftWorkingID = '0', " +
                               " @shiftName = N'" + data.shiftName + "', " +
                               " @mo='" + data.mo + "', " +
                               " @mo_timeIn='" + data.mo_timeIn + "', " +
                               " @mo_timeOut='" + data.mo_timeOut + "', " +
                               " @tu='" + data.tu + "', " +
                               " @tu_timeIn='" + data.tu_timeIn + "', " +
                               " @tu_timeOut='" + data.tu_timeOut + "', " +
                               " @we='" + data.we + "', " +
                               " @we_timeIn='" + data.we_timeIn + "', " +
                               " @we_timeOut='" + data.we_timeOut + "', " +
                               " @th='" + data.th + "', " +
                               " @th_timeIn='" + data.th_timeIn + "', " +
                               " @th_timeOut='" + data.th_timeOut + "', " +
                               " @fr='" + data.fr + "', " +
                               " @fr_timeIn='" + data.fr_timeIn + "', " +
                               " @fr_timeOut='" + data.fr_timeOut + "', " +
                               " @sa='" + data.sa + "', " +
                               " @sa_timeIn='" + data.sa_timeIn + "', " +
                               " @sa_timeOut='" + data.sa_timeOut + "', " +
                               " @su='" + data.su + "', " +
                               " @su_timeIn='" + data.su_timeIn + "', " +
                               " @su_timeOut='" + data.su_timeOut + "', " +
                               " @userID='" + ds_tokey.userID + "', " +
                               " @insert='1' " +
                               " SELECT	'ReturnValue' = @return_value";*/

                        Command = " EXEC p_i_shiftwork " +
                               " @shiftWorkingID = '0', " +
                               " @shiftName = N'" + data.shiftName + "', " +
                               " @mo='" + data.mo + "', " +
                               " @mo_timeIn='" + data.mo_timeIn + "', " +
                               " @mo_timeOut='" + data.mo_timeOut + "', " +
                               " @tu='" + data.tu + "', " +
                               " @tu_timeIn='" + data.tu_timeIn + "', " +
                               " @tu_timeOut='" + data.tu_timeOut + "', " +
                               " @we='" + data.we + "', " +
                               " @we_timeIn='" + data.we_timeIn + "', " +
                               " @we_timeOut='" + data.we_timeOut + "', " +
                               " @th='" + data.th + "', " +
                               " @th_timeIn='" + data.th_timeIn + "', " +
                               " @th_timeOut='" + data.th_timeOut + "', " +
                               " @fr='" + data.fr + "', " +
                               " @fr_timeIn='" + data.fr_timeIn + "', " +
                               " @fr_timeOut='" + data.fr_timeOut + "', " +
                               " @sa='" + data.sa + "', " +
                               " @sa_timeIn='" + data.sa_timeIn + "', " +
                               " @sa_timeOut='" + data.sa_timeOut + "', " +
                               " @su='" + data.su + "', " +
                               " @su_timeIn='" + data.su_timeIn + "', " +
                               " @su_timeOut='" + data.su_timeOut + "', " +
                               " @userID='" + ds_tokey.userID + "', " +
                               " @dayAverage="+ data.dayAverage +", " +
                               " @insert='1' ";

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (string)myCommand.ExecuteScalar();
                            }

                            //This is save log
                            string logevent = "New";
                            string logmodules = "NewShiftWork";
                            string olddata = "";
                            string newdata = "ShiftName = "+ data.shiftName + "; mo = " + data.mo + "; mo_timeIn = " + data.mo_timeIn + "; mo_timeOut = " + data.mo_timeOut + "; tu = " + data.tu + "; tu_timein = " + data.tu_timeIn + "; " +
                                "tu_timeout = " + data.tu_timeOut + "; we = " + data.we + "; we_timein = " + data.we_timeIn + "; we_timeout = " + data.we_timeOut + ";  th  = " + data.th + "; th_timein = " + data.th_timeIn + "; " +
                                "th_timeout = " + data.th_timeOut + "; fr  = " + data.fr + "; fr_timein = " + data.fr_timeIn + "; fr_timeout = " + data.fr_timeOut + "; sa = " + data.sa + "; sa_timein = " + data.sa_timeIn + "; " +
                                "sa_timeout = " + data.sa_timeOut + "; su = " + data.su + "; su_timein = " + data.su_timeIn + "; su_timeout = " + data.su_timeOut + "; dayAverage = " + data.dayAverage + ";   status_ID = 3";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        }

                        if (Result == "1")
                        {

                            ret.ModelErrors = "Update fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateShiftWork")]
        public ShiftWorkListResult UpdateShiftWork(UpdateShiftWorkParam data)
        {
            var ret = new ShiftWorkListResult();
            string Command = "";
            string Result = "";
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {                      
                        var ds_update = (from c in db.tb_shiftWorking
                                         where c.shiftWorkingID == data.shiftWorkingID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            /*Command = " DECLARE	@return_value int " +
                                " @return_value = EXEC p_i_shiftwork " +
                                " @shiftWorkingID = '" + data.shiftWorkingID + "', " +
                                " @shiftName = N'" + data.shiftName + "', " +
                                " @mo='" + data.mo + "', " +
                                " @mo_timeIn='" + data.mo_timeIn + "', " +
                                " @mo_timeOut='" + data.mo_timeOut + "', " +
                                " @tu='" + data.tu + "', " +
                                " @tu_timeIn='" + data.tu_timeIn + "', " +
                                " @tu_timeOut='" + data.tu_timeOut + "', " +
                                " @we='" + data.we + "', " +
                                " @we_timeIn='" + data.we_timeIn + "', " +
                                " @we_timeOut='" + data.we_timeOut + "', " +
                                " @th='" + data.th + "', " +
                                " @th_timeIn='" + data.th_timeIn + "', " +
                                " @th_timeOut='" + data.th_timeOut + "', " +
                                " @fr='" + data.fr + "', " +
                                " @fr_timeIn='" + data.fr_timeIn + "', " +
                                " @fr_timeOut='" + data.fr_timeOut + "', " +
                                " @sa='" + data.sa + "', " +
                                " @sa_timeIn='" + data.sa_timeIn + "', " +
                                " @sa_timeOut='" + data.sa_timeOut + "', " +
                                " @su='" + data.su + "', " +
                                " @su_timeIn='" + data.su_timeIn + "', " +
                                " @su_timeOut='" + data.su_timeOut + "', " +
                                " @userID='" + ds_tokey.userID + "', " +
                                " @insert='2' " +
                                " SELECT	'ReturnValue' = @return_value";*/

                            Command = " EXEC p_i_shiftwork " +
                                " @shiftWorkingID = '" + data.shiftWorkingID + "', " +
                                " @shiftName = N'" + data.shiftName + "', " +
                                " @mo='" + data.mo + "', " +
                                " @mo_timeIn='" + data.mo_timeIn + "', " +
                                " @mo_timeOut='" + data.mo_timeOut + "', " +
                                " @tu='" + data.tu + "', " +
                                " @tu_timeIn='" + data.tu_timeIn + "', " +
                                " @tu_timeOut='" + data.tu_timeOut + "', " +
                                " @we='" + data.we + "', " +
                                " @we_timeIn='" + data.we_timeIn + "', " +
                                " @we_timeOut='" + data.we_timeOut + "', " +
                                " @th='" + data.th + "', " +
                                " @th_timeIn='" + data.th_timeIn + "', " +
                                " @th_timeOut='" + data.th_timeOut + "', " +
                                " @fr='" + data.fr + "', " +
                                " @fr_timeIn='" + data.fr_timeIn + "', " +
                                " @fr_timeOut='" + data.fr_timeOut + "', " +
                                " @sa='" + data.sa + "', " +
                                " @sa_timeIn='" + data.sa_timeIn + "', " +
                                " @sa_timeOut='" + data.sa_timeOut + "', " +
                                " @su='" + data.su + "', " +
                                " @su_timeIn='" + data.su_timeIn + "', " +
                                " @su_timeOut='" + data.su_timeOut + "', " +
                                " @userID='" + ds_tokey.userID + "', " +
                                " @dayAverage='" + data.dayAverage + "', " +
                                " @insert='2' ";

                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                    Result = (string)myCommand.ExecuteScalar();                                                                                   
                                }

                                //This is save log
                                string logevent = "Update";
                                string logmodules = "UpdateShiftWork";
                                string olddata = "";
                                string newdata = "ShiftName = " + data.shiftName + "; mo = " + data.mo + "; mo_timeIn = " + data.mo_timeIn + "; mo_timeOut = " + data.mo_timeOut + "; tu = " + data.tu + "; tu_timein = " + data.tu_timeIn + "; " +
                                    "tu_timeout = " + data.tu_timeOut + "; we = " + data.we + "; we_timein = " + data.we_timeIn + "; we_timeout = " + data.we_timeOut + ";  th  = " + data.th + "; th_timein = " + data.th_timeIn + "; " +
                                    "th_timeout = " + data.th_timeOut + "; fr  = " + data.fr + "; fr_timein = " + data.fr_timeIn + "; fr_timeout = " + data.fr_timeOut + "; sa = " + data.sa + "; sa_timein = " + data.sa_timeIn + "; " +
                                    "sa_timeout = " + data.sa_timeOut + "; su = " + data.su + "; su_timein = " + data.su_timeIn + "; su_timeout = " + data.su_timeOut + "; dayAverage = " + data.dayAverage + ";   status_ID = 3";
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);
                            }

                        }

                       
                        if (Result == "1")
                        {
                            ret.ModelErrors = "Update fail";
                            ret.ResultObject = null;
                            ret.StatusCode = 400;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Expectation Failed";
                            return ret;
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelShiftWork")]
        public ShiftWorkListResult DelShiftWork(DelShiftWorkParam data)
        {
            var ret = new ShiftWorkListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_shiftWorking
                                         where c.shiftWorkingID == data.shiftWorkingID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelShifWork";
                        string olddata = "";
                        string newdata = "shiftworkingid= "+ data.shiftWorkingID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/EmpTypeList")]
        public EMPTypeListResult EmpTypeList(EmpLevelListParam data)
        {
            var ret = new EMPTypeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empType
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.empTypeID,
                                           c.empTypeText 
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<EMPTypeListResulttViewModelResult> ResultObject = new List<EMPTypeListResulttViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EMPTypeListResulttViewModelResult()
                            {
                                empTypeID = c.empTypeID.ToString(),
                                empTypeText = c.empTypeText.ToString() 
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/EmpSalaryList")]
        public EmpSalaryListResult EmpSalaryList(EmpSalaryListParam data)
        {
            var ret = new EmpSalaryListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_empSalary
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.salaryID,
                                           c.empID,
                                           c.paymentPercent,
                                           c.empBankAccountID
                                       }).ToList();

                        if (data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            List<EmpSalaryListResulttViewModelResult> ResultObject = new List<EmpSalaryListResulttViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EmpSalaryListResulttViewModelResult()
                            {
                                salaryID = c.salaryID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2).FirstOrDefault(),
                                paymentPercent = c.paymentPercent.ToString(),
                                empBankAccountName = db.tb_empBankAccount.Where(w => w.empBankAccountID == c.empBankAccountID).Select(s => s.bankAccountName).FirstOrDefault()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have Emp - Level data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No Emp - Level data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEmpSalary")]
        public EmpSalaryListResult NewEmpSalary(NewEmpSalaryParam data)
        {
            var ret = new EmpSalaryListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_empSalary.Add(new tb_empSalary
                        {
                            empID = data.empID,
                            paymentPercent = data.paymentPercent,
                            empBankAccountID = data.empBankAccountID,
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEmpSalary";
                        string olddata = "";
                        string newdata = "empid = "+ data.empID + "; paymentpercent =" + data.paymentPercent + "; empBankAccountID =" + data.empBankAccountID + ";   status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEmpSalary")]
        public EmpSalaryListResult UpdateEmpSalary(UpdateEmpSalaryParam data)
        {
            var ret = new EmpSalaryListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empSalary
                                         where c.salaryID == data.salaryID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empid = " + ds_update.empID + "; paymentpercent =" + ds_update.paymentPercent + "; empBankAccountID =" + ds_update.empBankAccountID + ";  status_ID = 3";
                            ds_update.empID = data.empID;
                            ds_update.paymentPercent = data.paymentPercent;
                            ds_update.empBankAccountID = data.empBankAccountID;
                            ds_update.status_id = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEmpSalary";
                       // string olddata = "";
                        string newdata = "empid = " + data.empID + "; paymentpercent =" + data.paymentPercent + "; empBankAccountID =" + data.empBankAccountID + ";  status_ID = 3";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEmpSalary")]
        public EmpSalaryListResult DelEmpSalary(DelEmpSalaryParam data)
        {
            var ret = new EmpSalaryListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_empSalary
                                         where c.salaryID == data.salaryID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelEmpSalary";
                        string olddata = "";
                        string newdata = "salaryID = "+ data.salaryID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/OTRequestList")]
        public OTRequestListResult OTRequestList(OTRequestListParam data)
        {
            var ret = new OTRequestListResult();
             WriteLogFile("OTRequestList ==> TokenKey:" + data.TokenKey + ", lang: " + data.lang + ", empID: "+ data.empID);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status==0)
                        {
                            var ds_Data = (from c in db.tb_otRequest
                                           where c.empID == ds_tokey.empID
                                           orderby c.startDate descending
                                           select new
                                           {
                                               c.otRequestID,
                                               c.otRequestNo,
                                               c.empID,
                                               c.otTypeID,
                                               c.startDate,
                                               c.endDate,
                                               c.otStartTime,
                                               c.otEndTime,
                                               c.noted,
                                               c.fileAttached,
                                               c.managerID,
                                               c.status_ID
                                           }).ToList();
                            if (ds_Data != null)
                            {
                                List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
                                ResultObject = ds_Data.Select(c => new OTRequestListResultViewModelResult()
                                {
                                    otRequestID = c.otRequestID.ToString(),
                                    otRequestNo = c.otRequestNo,
                                    empName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    otTypeName = db.tb_otType.Where(w => w.otTypeID == c.otTypeID).Select(s => s.otTypeText).FirstOrDefault(),
                                    startDate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    otStartTime = new DateTime(c.otStartTime.Ticks).ToString("HH:mm"),
                                    otEndTime = new DateTime(c.otEndTime.Ticks).ToString("HH:mm"),

                                    noted = c.noted == null ? "" : c.noted.ToString(),
                                    fileAttached = c.fileAttached == null ? "" : c.fileAttached,
                                    managerName = c.managerID == 0 ? "" : data.lang == "1" ? db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    qtyHour = db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "" : db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).Sum(su => su.qtyHour).ToString("##,###.##"),
                                    status = db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault(),
                                    historyCount = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "" : db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Count().ToString()
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                        else
                        {
                              var ds_Data = (from c in db.tb_otRequest
                                              where c.empID == ds_tokey.empID & c.startDate >= data.stdate & c.startDate <= data.enddate & c.status_ID == data.status
                                              orderby c.startDate descending
                                              select new
                                              {
                                                  c.otRequestID,
                                                  c.otRequestNo,
                                                  c.empID,
                                                  c.otTypeID,
                                                  c.startDate,
                                                  c.endDate,
                                                  c.otStartTime,
                                                  c.otEndTime,
                                                  c.noted,
                                                  c.fileAttached,
                                                  c.managerID,
                                                  c.status_ID
                                              }).ToList();

                            

                            if (ds_Data != null)
                            {
                                List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
                                ResultObject = ds_Data.Select(c => new OTRequestListResultViewModelResult()
                                {
                                    otRequestID = c.otRequestID.ToString(),
                                    otRequestNo = c.otRequestNo,
                                    empName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    otTypeName = db.tb_otType.Where(w => w.otTypeID == c.otTypeID).Select(s => s.otTypeText).FirstOrDefault(),
                                    startDate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    otStartTime = new DateTime(c.otStartTime.Ticks).ToString("HH:mm"),
                                    otEndTime = new DateTime(c.otEndTime.Ticks).ToString("HH:mm"),

                                    noted = c.noted == null ? "" : c.noted.ToString(),
                                    fileAttached = c.fileAttached == null ? "" : c.fileAttached,
                                    managerName = c.managerID == 0 ? "" : db.tb_employees.Where(w => w.empID == c.managerID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    qtyHour = db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "" : db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).Sum(su => su.qtyHour).ToString("##,###.###"),
                                    status = db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault(),
                                    historyCount = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "" : db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Count().ToString()
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/OTRequestApproveList")]
        public OTRequestListResult OTRequestApproveList(OTRequestApproveListParam data)
        {
            var ret = new OTRequestListResult();
            List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status == 0)
                        {

                            var ds_Data = (from c in db.tb_otRequest
                                           where c.status_ID != 0 && c.status_ID != 2
                                           //orderby c.startDate
                                           // orderby c.otRequestNo descending
                                           orderby c.startDate descending
                                           select new
                                           {
                                               c.otRequestID,
                                               c.otRequestNo,
                                               c.empID,
                                               c.startDate,
                                               c.otTypeID,
                                               c.endDate,
                                               c.otStartTime,
                                               c.otEndTime,
                                               c.noted,
                                               c.fileAttached,
                                               delegateID = 0,
                                               managerEmpID = c.managerID,
                                               //userID = ds_tokey.userID,
                                               //approveUserID = subap.user_add == null ? 0 : subap.user_add,
                                               c.status_ID
                                               //subap.user_add
                                           }).ToList();

                            if (ds_Data != null)
                            {
                                ResultObject = ds_Data.Select(c => new OTRequestListResultViewModelResult()
                                {
                                    otRequestID = c.otRequestID.ToString(),
                                    otRequestNo = c.otRequestNo,
                                    empName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                    otTypeName = db.tb_otType.Where(w => w.otTypeID == c.otTypeID).Select(s => s.otTypeText).FirstOrDefault(),
                                    startDate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    otStartTime = c.otStartTime.ToString("hh':'mm"),
                                    otEndTime = c.otEndTime.ToString("hh':'mm"),
                                    noted = c.noted,
                                    managerNoted = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Select(s => s.noted).FirstOrDefault(),
                                    fileAttached = c.fileAttached,
                                    qtyHour = db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "0" : db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).Sum(su => su.qtyHour).ToString("#,##0.00"),
                                    status = getOTStatus(c.status_ID, c.otRequestID, ds_tokey.userID), // c.status_ID == 2 ? "Not Approved" : db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault()
                                                                                                       // status = c.status_text.ToString(),
                                    historyCount = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Count().ToString(),
                                    managerEmpID = c.managerEmpID,
                                    //delegateID = getDelegateID(c.managerEmpID, c.startDate, c.endDate),
                                    approveUserID = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID && w.user_add == ds_tokey.userID).Count() > 0 ? ds_tokey.userID : 0

                                }).OrderByDescending(i => i.status).ToList();

                                ResultObject = ResultObject.Where(w => w.managerEmpID == ds_tokey.empID || w.approveUserID == ds_tokey.userID).ToList();
                            }

                            //ResultObject = ResultObject.Where(w => w.approveUserID == ds_tokey.userID).ToList();

                            if (ResultObject != null)
                            {
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                        else
                        {

                           /* var ds_Data = (from c in db.tb_otRequest
                                           where c.status_ID != 0 && c.status_ID != 2 && c.startDate >= data.stdate && c.startDate <= data.enddate && c.status_ID == data.status
                                           //orderby c.startDate
                                           // orderby c.otRequestNo descending
                                           orderby c.startDate descending
                                           select new
                                           {
                                               c.otRequestID,
                                               c.otRequestNo,
                                               c.empID,
                                               c.startDate,
                                               c.otTypeID,
                                               c.endDate,
                                               c.otStartTime,
                                               c.otEndTime,
                                               c.noted,
                                               c.fileAttached,
                                               delegateID = 0,
                                               managerEmpID = c.managerID,
                                               //userID = ds_tokey.userID,
                                               //approveUserID = subap.user_add == null ? 0 : subap.user_add,
                                               c.status_ID
                                               //subap.user_add
                                           }).ToList();*/

                            if (data.status == 1 || data.status == 4)
                            {
                                var ds_Data = (from c in db.tb_otRequest
                                               join f in db.tb_status on c.status_ID equals f.status_ID
                                               where c.startDate >= data.stdate && c.startDate <= data.enddate && c.status_ID == data.status && c.managerID == data.managerID
                                               //orderby c.startDate
                                               // orderby c.otRequestNo descending
                                               orderby c.startDate descending
                                               select new
                                               {
                                                   c.otRequestID,
                                                   c.otRequestNo,
                                                   c.empID,
                                                   c.startDate,
                                                   c.otTypeID,
                                                   c.endDate,
                                                   c.otStartTime,
                                                   c.otEndTime,
                                                   c.noted,
                                                   c.fileAttached,
                                                   delegateID = 0,
                                                   managerEmpID = c.managerID,
                                                   //userID = ds_tokey.userID,
                                                   //approveUserID = subap.user_add == null ? 0 : subap.user_add,
                                                   c.status_ID,
                                                   c.tb_status.status_text
                                                   //subap.user_add
                                               }).ToList();
                                

                                if (ds_Data != null)
                                {
                                    ResultObject = ds_Data.Select(c => new OTRequestListResultViewModelResult()
                                    {
                                        otRequestID = c.otRequestID.ToString(),
                                        otRequestNo = c.otRequestNo,
                                        empName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                        otTypeName = db.tb_otType.Where(w => w.otTypeID == c.otTypeID).Select(s => s.otTypeText).FirstOrDefault(),
                                        startDate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                        endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                        otStartTime = c.otStartTime.ToString("hh':'mm"),
                                        otEndTime = c.otEndTime.ToString("hh':'mm"),
                                        noted = c.noted,
                                        managerNoted = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Select(s => s.noted).FirstOrDefault(),
                                        fileAttached = c.fileAttached,
                                        qtyHour = db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "0" : db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).Sum(su => su.qtyHour).ToString("#,##0.00"),
                                        
                                        //status = getOTStatus(c.status_ID, c.otRequestID, ds_tokey.userID), // c.status_ID == 2 ? "Not Approved" : db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault()
                                                                                                           // status = c.status_text.ToString(),
                                        
                                        status = c.status_text,

                                        historyCount = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Count().ToString(),
                                        managerEmpID = c.managerEmpID,
                                        //delegateID = getDelegateID(c.managerEmpID, c.startDate, c.endDate),
                                        approveUserID = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID && w.user_add == ds_tokey.userID).Count() > 0 ? ds_tokey.userID : 0

                                    }).OrderByDescending(i => i.status).ToList();

                                    ResultObject = ResultObject.Where(w => w.managerEmpID == ds_tokey.empID || w.approveUserID == ds_tokey.userID).ToList();
                                }

                                //ResultObject = ResultObject.Where(w => w.approveUserID == ds_tokey.userID).ToList();

                                if (ResultObject != null)
                                {
                                    ret.ModelErrors = null;
                                    ret.ResultObject = ResultObject;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                                }
                                else
                                {
                                    ret.ModelErrors = "Don't have data ...!";
                                    ret.ResultObject = null;
                                    ret.StatusCode = 405;
                                    ret.IsSuccess = false;
                                    ret.CommonErrors = "No data";
                                    return ret;
                                }
                            }
                            else
                            {
                                var ds_Data = (from c in db.tb_otRequest
                                               join r in db.tb_otApprove on c.otRequestID equals r.otRequestID
                                               join u in db.tb_users on r.user_add equals u.userID
                                               where u.empID == data.managerID & r.status_ID == data.status & c.startDate >= data.stdate & c.startDate <= data.enddate
                                               //orderby c.startDate
                                               // orderby c.otRequestNo descending
                                               orderby c.startDate descending
                                               select new
                                               {
                                                   c.otRequestID,
                                                   c.otRequestNo,
                                                   c.empID,
                                                   c.startDate,
                                                   c.otTypeID,
                                                   c.endDate,
                                                   c.otStartTime,
                                                   c.otEndTime,
                                                   c.noted,
                                                   c.fileAttached,
                                                   delegateID = 0,
                                                   managerEmpID = u.empID,
                                                   //userID = ds_tokey.userID,
                                                   //approveUserID = subap.user_add == null ? 0 : subap.user_add,
                                                   c.status_ID
                                                   //subap.user_add
                                               }).ToList();

                                if (ds_Data != null)
                                {
                                    ResultObject = ds_Data.Select(c => new OTRequestListResultViewModelResult()
                                    {
                                        otRequestID = c.otRequestID.ToString(),
                                        otRequestNo = c.otRequestNo,
                                        empName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1 + " " + s.lastName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2 + " " + s.lastName2).FirstOrDefault(),
                                        otTypeName = db.tb_otType.Where(w => w.otTypeID == c.otTypeID).Select(s => s.otTypeText).FirstOrDefault(),
                                        startDate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                        endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                        otStartTime = c.otStartTime.ToString("hh':'mm"),
                                        otEndTime = c.otEndTime.ToString("hh':'mm"),
                                        noted = c.noted,
                                        managerNoted = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Select(s => s.noted).FirstOrDefault(),
                                        fileAttached = c.fileAttached,
                                        qtyHour = db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).FirstOrDefault() == null ? "0" : db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).Sum(su => su.qtyHour).ToString("#,##0.00"),
                                        status = getOTStatus(c.status_ID, c.otRequestID, ds_tokey.userID), // c.status_ID == 2 ? "Not Approved" : db.tb_status.Where(w => w.status_ID == c.status_ID).Select(s => s.status_text).FirstOrDefault()
                                                                                                           // status = c.status_text.ToString(),
                                        historyCount = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID).Count().ToString(),
                                        managerEmpID = c.managerEmpID,
                                        //delegateID = getDelegateID(c.managerEmpID, c.startDate, c.endDate),
                                       // approveUserID = db.tb_otApprove.Where(w => w.otRequestID == c.otRequestID && w.user_add == ds_tokey.userID).Count() > 0 ? ds_tokey.userID : 0
                                        approveUserID = c.managerEmpID

                                    }).OrderByDescending(i => i.status).ToList();

                                    ResultObject = ResultObject.Where(w => w.managerEmpID == ds_tokey.empID || w.approveUserID == ds_tokey.userID).ToList();
                                }

                                //ResultObject = ResultObject.Where(w => w.approveUserID == ds_tokey.userID).ToList();

                                if (ResultObject != null)
                                {
                                    ret.ModelErrors = null;
                                    ret.ResultObject = ResultObject;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                                }
                                else
                                {
                                    ret.ModelErrors = "Don't have data ...!";
                                    ret.ResultObject = null;
                                    ret.StatusCode = 405;
                                    ret.IsSuccess = false;
                                    ret.CommonErrors = "No data";
                                    return ret;
                                }
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private string getOTStatus(int? statusID, int? RequestID, int? userID)
        {
            string stsName = "";
            using (var db = new db_hrmsEntities())
            {
                if (statusID == 4)
                {
                    stsName = "Rejected";
                }
                else
                {
                    var chkApproved = db.tb_otApprove.Where(w => w.otRequestID == RequestID && w.user_add == userID && w.status_ID == 3).FirstOrDefault();
                    if (chkApproved != null)
                    {
                        stsName = "Approved";
                    }
                    else
                    {
                        stsName = "Pending";
                    }
                }
            }
            return stsName;
        }

        private string getLeaveStatus(int? statusID, int? RequestID, int? userID)
        {
            string stsName = "";
            using (var db = new db_hrmsEntities())
            {
                if (statusID == 4)
                {
                    stsName = "Rejected";
                }
                else
                {
                    var chkApproved = db.tb_leaveApprove.Where(w => w.leaveRequestID == RequestID && w.user_add == userID && w.status_ID == 3).FirstOrDefault();
                    if (chkApproved != null)
                    {
                        stsName = "Approved";
                    }
                    else
                    {
                        stsName = "Pending";
                    }
                }
            }
            return stsName;
        }

        private int? getDelegateID(int? empID, DateTime? startDate, DateTime? endDate)
        {
            int? delegateID;

            using (var db = new db_hrmsEntities())
            {
                if (empID != null && startDate != null && endDate != null)
                {
                    var dbDelegate = db.tb_delagate.Where(w => w.empID == empID && startDate >= w.strDate && startDate <= w.endDate && w.status_id != 2).FirstOrDefault();
                    if (dbDelegate != null)
                    {
                        delegateID = dbDelegate.delegateEmpID;
                    }
                    else
                    {
                        delegateID = 0;
                    }
                }
                else
                {
                    delegateID = 0;
                }
            }
            return delegateID;
        }

        [HttpPost]
        [Route("api/User/NewOTRequest")]
        public OTRequestListResult NewOTRequest(NewOTRequestParam data)
        {
            var ret = new OTRequestListResult();
            WriteLogFile("NewOTRequest => TokenKey:" + data.TokenKey.ToString() + ", lang:" + data.lang.ToString() + ", empID:" + data.empID.ToString() + ", otTypeID:" + data.otTypeID.ToString() +
                   ", startDate:" + data.startDate.ToString() +
                   ", endDate:" + data.endDate.ToString() +
                   ", otStartTime:" + data.otStartTime.ToString() +
                   ", otEndTime:" + data.otEndTime.ToString() +
                   ", noted:" + data.noted.ToString() +
                   ", fileAttached:" + data.fileAttached.ToString() +
                   ", managerID: " + data.managerID.ToString() );
            string FromDevice = "--- FROM Web App ---";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();

                    if (ds_tokey != null)
                    {
                        TimeSpan startOTTime = TimeSpan.Parse(data.otStartTime.ToString("HH:mm"));
                        TimeSpan endOTTime = TimeSpan.Parse(data.otEndTime.ToString("HH:mm"));                        


                        //var ds_saveOT = db.p_InsertRequestOT(data.empID, data.startDate, data.endDate, startOTTime, endOTTime,
                        //    data.noted, data.fileAttached, data.managerID, ds_tokey.userID, data.otTypeID).FirstOrDefault();

                        string Command;
                        int Result;

                        string New_OtDate = Convert.ToDateTime(data.startDate).ToString("yyyy-MM-dd");
                        string New_endtDate = Convert.ToDateTime(data.endDate).ToString("yyyy-MM-dd");

                        int blcheck=0;

                        //this is check data first to employee reject by themself
                        var ds_check = (from ch in db.tb_otRequest
                                        where ch.empID == data.empID && ch.startDate == data.startDate && ch.status_ID == 1
                                        select new
                                        {
                                            ch.empID
                                        }).FirstOrDefault();


                        if (ds_check == null)                       
                        {
                            //this is check by manager reject if ==null system can save data. status = 3 is approved.
                            var ds_check2 = (from ch in db.tb_otRequest
                                             where ch.empID == data.empID && ch.startDate == data.startDate & ch.status_ID == 3
                                             select new
                                             {
                                                 ch.empID
                                             }).FirstOrDefault();

                            if (ds_check2 == null && ds_check == null)
                            {
                                Command = " EXEC p_InsertRequestOT @emp_id = " + data.empID + ", @dateOT='" + New_OtDate + "', " +
                              " @endtDate= '" + New_endtDate + "', @strTime = '" + startOTTime + "', @endTime='" + endOTTime + "', " +
                              " @noted=N'" + data.noted + "', @fileAttached='" + data.fileAttached + "', " +
                              " @managerID = " + data.managerID + ", @userAdd=" + ds_tokey.userID + ", @otTypeID = " + data.otTypeID + "";

                                WriteLogFile("NewOTRequest ==> command: " + Command);

                                using (SqlConnection myConnection = new SqlConnection(connectionString))
                                {
                                    myConnection.Open();
                                    using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                    {
                                        Result = (int)myCommand.ExecuteScalar();
                                    }
                                }

                                if (Result > 0)
                                {
                                    //send mail to approver
                                    var db_ot = db.tb_otRequest.Where(w => w.otRequestID == Result).FirstOrDefault();
                                    if (db_ot != null)
                                    {
                                        var db_approver = db.tb_employees.Where(w => w.empID == db_ot.managerID).FirstOrDefault();
                                        var db_emp = db.tb_employees.Where(w => w.empID == db_ot.empID).FirstOrDefault();
                                        var db_tokenRequest = db.tb_users.Where(w => w.empID == db_approver.empID).FirstOrDefault();

                                        string new_StartTime = new DateTime(db_ot.otStartTime.Ticks).ToString("HH:mm");
                                        string new_EndTime = new DateTime(db_ot.otEndTime.Ticks).ToString("HH:mm");


                                        if (db_approver != null && db_approver.empEmail != null && db_emp != null)
                                        {
                                            string str = "Hi, " + db_approver.firstName2 + " " + db_approver.lastName2 + Environment.NewLine +
                                            "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " request OT " + Environment.NewLine
                                            + "start date: " + New_OtDate + " to " + New_endtDate + Environment.NewLine +
                                            "Start time: " + new_StartTime + " to " + new_EndTime + Environment.NewLine;

                                            Boolean isSendMail = SendMeail(db_approver.empEmail, "HRM - Employee new request OT.", str, FromDevice, db_ot.managerID.ToString(), db_ot.empID.ToString(), false, "4");

                                            if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                                            {
                                                Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), "HRM - Employee new request OT", str, db_ot.managerID.ToString(), FromDevice, data.empID.ToString(), false);
                                            }
                                        }
                                    }

                                    //This is save log
                                    string logevent = "New";
                                    string logmodules = "NewOTRequest";
                                    string olddata = "";
                                    string newdata = "Empid="+data.empID+ "; dateot=" + New_OtDate + "; enddate=" + New_endtDate + "; strTime=" + startOTTime + "; " +
                                        "endtime=" + endOTTime + "; noted =" + data.noted + "; fileattahced=" + data.fileAttached + "; managerid=" + data.managerID + ";  useradd=" + ds_tokey.userID + "; ottypeid=" + data.otTypeID + "; status_ID = 3.";
                                    insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                                    if (data.lang == "1")
                                    {
                                        ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                                    }
                                    else
                                    {
                                        ret.ModelErrors = "Save complete";
                                    }

                                    //get confirm data .....

                                    List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();

                                    int setEmpid = int.Parse(ds_tokey.empID.ToString());

                                    ResultObject = GetOTTimeData(data.lang, setEmpid);

                                    ret.ResultObject = ResultObject;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                                }
                                else
                                {
                                    ret.ModelErrors = "Save Request OT error...!";
                                    ret.ResultObject = null;
                                    ret.StatusCode = 401;
                                    ret.IsSuccess = false;
                                    ret.CommonErrors = "Save Request OT error...!";
                                    return ret;
                                }
                            }
                            else
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ກະລຸນາກວດກາວັນເດືອນປີຮ້ອງຂໍ ຂອງທ່ານອີກຄັ້ງ ເພາະບາງທີ່ມັນອາດຈະຊໍ້າກັນ ຫຼື ວັນເດືອນປີນີ້ອາດມີການອະນຸມັດແລ້ວ.";
                                }
                                else
                                {
                                    ret.ModelErrors = "Please, check your date's request overtime sometime the date is duplicate or date was approve.";
                                }
                                List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
                                int setEmpid = int.Parse(ds_tokey.empID.ToString());
                                ResultObject = GetOTTimeData(data.lang, setEmpid);
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 201;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;

                            }
                        }
                        else
                        {
                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ທ່ານໄດ້ຮ້ອງຂໍວັນທີເດືອນປີ ນີ້ແລ້ວ.";
                            }
                                else
                            {
                                ret.ModelErrors = "Your Overtime is duplicate.";
                            }

                            ret.ResultObject = null;
                            ret.StatusCode = 201;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;

                            /*List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
                            int setEmpid = int.Parse(ds_tokey.empID.ToString());
                            ResultObject = GetOTTimeData(data.lang, setEmpid);
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 201;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;*/


                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile("TokenKey:" + data.TokenKey.ToString() + ", lang:" + data.lang.ToString() + ", empID:" + data.empID.ToString() + ", otTypeID:" + data.otTypeID.ToString() +
                    ", startDate:" + data.startDate.ToString() +
                    ", endDate:" + data.endDate.ToString() +
                    ", otStartTime:" + data.otStartTime.ToString() +
                    ", otEndTime:"+ data.otEndTime.ToString() +
                    ", noted:" + data.noted.ToString() +
                    ", fileAttached:"+ data.fileAttached.ToString() + 
                    ", managerID: "+ data.managerID.ToString() +", "+ ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
            return null;
        }

        [HttpPost]
        [Route("api/User/NewOTRequestMobile")]
        public OTRequestListResult NewOTRequestMobile(NewOTRequestMobileParam data)
        {
            var ret = new OTRequestListResult();
            WriteLogFile("NewOTRequestMobile => TokenKey:" + data.TokenKey.ToString() + ", lang:" + data.lang.ToString() + ", empID:" + data.empID.ToString() + ", otTypeID:" + data.otTypeID.ToString() +
                   ", startDate:" + data.startDate.ToString() +
                   ", endDate:" + data.endDate.ToString() +
                   ", otStartTime:" + data.otStartTime.ToString() +
                   ", otEndTime:" + data.otEndTime.ToString() +
                   ", noted:" + data.noted.ToString() +
                   ", fileAttached:" + data.fileAttached.ToString() +
                   ", managerID: " + data.managerID.ToString());
            string FromDevice = "--- From Mobile App ---";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();

                    if (ds_tokey != null)
                    {
                        //TimeSpan startOTTime = TimeSpan.Parse(data.otStartTime.ToString("HH:mm"));
                        //TimeSpan endOTTime = TimeSpan.Parse(data.otEndTime.ToString("HH:mm"));

                        string startOTTime = data.otStartTime.ToString();
                        string endOTTime = data.otEndTime.ToString();

                        string Command;
                        int Result;

                        //This is check date before
                        var ds_check = (from ch in db.tb_otRequest
                                        where ch.empID == data.empID & ch.startDate == data.startDate & ch.status_ID == 1
                                        select new
                                        {
                                            ch.empID
                                        }).FirstOrDefault();
                         if (ds_check == null)
                        {
                            var ds_check2 = (from ch in db.tb_otRequest
                                            where ch.empID == data.empID & ch.startDate == data.startDate & ch.status_ID == 3
                                            select new
                                            {
                                                ch.empID
                                            }).FirstOrDefault();
                            if (ds_check2 == null)
                            {

                                Command = " EXEC p_InsertRequestOTMobile @emp_id = " + data.empID + ", @dateOT='" + data.startDate + "', " +
                                  " @endtDate= '" + data.endDate + "', @strTime = '" + startOTTime + "', @endTime='" + endOTTime + "', " +
                                  " @noted=N'" + data.noted + "', @fileAttached='" + data.fileAttached + "', " +
                                  " @managerID = " + data.managerID + ", @userAdd=" + ds_tokey.userID + ", @otTypeID = " + data.otTypeID + "";

                                WriteLogFile("NewEmpOT command: " + Command);

                                using (SqlConnection myConnection = new SqlConnection(connectionString))
                                {
                                    myConnection.Open();
                                    using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                    {
                                        Result = (int)myCommand.ExecuteScalar();
                                    }
                                }

                                if (Result > 0)
                                {
                                    string new_StartTime = "";
                                    string new_EndTime = "";
                                    string New_OtDate = "";
                                    string New_endtDate = "";
                                    //send mail to approver
                                    var db_ot = db.tb_otRequest.Where(w => w.otRequestID == Result).FirstOrDefault();
                                    if (db_ot != null)
                                    {
                                        var db_approver = db.tb_employees.Where(w => w.empID == db_ot.managerID).FirstOrDefault();
                                        var db_emp = db.tb_employees.Where(w => w.empID == db_ot.empID).FirstOrDefault();
                                        var db_tokenRequest = db.tb_users.Where(w => w.empID == db_approver.empID).FirstOrDefault();
                                        if (db_approver != null && db_approver.empEmail != null && db_emp != null)
                                        {
                                            new_StartTime = new DateTime(db_ot.otStartTime.Ticks).ToString("HH:mm");
                                            new_EndTime = new DateTime(db_ot.otEndTime.Ticks).ToString("HH:mm");
                                            New_OtDate = Convert.ToDateTime(data.startDate).ToString("yyyy-MM-dd");
                                            New_endtDate = Convert.ToDateTime(data.endDate).ToString("yyyy-MM-dd");

                                            string str = "Hi, " + db_approver.firstName2 + " " + db_approver.lastName2 + Environment.NewLine +
                                            "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " request OT " + Environment.NewLine
                                            + "start date: " + New_OtDate + " to " + New_endtDate + Environment.NewLine
                                            + "Start time: " + new_StartTime + " to " + new_EndTime + Environment.NewLine;

                                            Boolean isSendMail = SendMeail(db_approver.empEmail, "HRM - Employee new request OT.", str, FromDevice, db_ot.managerID.ToString(), db_ot.empID.ToString(), true, "4");


                                            if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                                            {
                                                Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), "HRM - Employee new request OT", str, db_ot.managerID.ToString(), FromDevice, data.empID.ToString(), true);
                                            }
                                        }
                                    }

                                    //This is save log
                                    string logevent = "New";
                                    string logmodules = "NewOTRequest";
                                    string olddata = "";
                                    string newdata = "Empid=" + data.empID + "; dateot=" + New_OtDate + "; enddate=" + New_endtDate + "; strTime=" + startOTTime + "; " +
                                        "endtime=" + endOTTime + "; noted =" + data.noted + "; fileattahced=" + data.fileAttached + "; managerid=" + data.managerID + ";  useradd=" + ds_tokey.userID + "; ottypeid=" + data.otTypeID + "; status_ID = 3.";
                                    insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                                    if (data.lang == "1")
                                    {
                                        ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                                    }
                                    else
                                    {
                                        ret.ModelErrors = "Save complete";
                                    }

                                    //get confirm data .....

                                    List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();

                                    //ResultObject = GetOTTimeData(data.lang, Convert.ToInt32(ds_tokey.empID));

                                    ret.ResultObject = null;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                                }
                                else
                                {
                                    ret.ModelErrors = "Save Request OT error...!";
                                    ret.ResultObject = null;
                                    ret.StatusCode = 401;
                                    ret.IsSuccess = false;
                                    ret.CommonErrors = "Save Request OT error...!";
                                    return ret;
                                }
                            }
                            else
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ກະລຸນາກວດກາວັນເດືອນປີຮ້ອງຂໍ ຂອງທ່ານອີກຄັ້ງ ເພາະບາງທີ່ມັນອາດຈະຊໍ້າກັນ ຫຼື ວັນເດືອນປີນີ້ອາດມີການອະນຸມັດແລ້ວ.";
                                }
                                else
                                {
                                    ret.ModelErrors = "Please, check your date's request overtime sometime the date is duplicate or date was approve.";
                                }

                                ret.ResultObject = null;
                                ret.StatusCode = 401;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "Save Request OT error...!";
                                return ret;
                            }
                        }
                        else
                        {
                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ກະລຸນາກວດກາວັນເດືອນປີຮ້ອງຂໍ ຂອງທ່ານອີກຄັ້ງ ເພາະບາງທີ່ມັນອາດຈະຊໍ້າກັນ ຫຼື ວັນເດືອນປີນີ້ອາດມີການອະນຸມັດແລ້ວ.";
                            }
                            else
                            {
                                ret.ModelErrors = "Please, check your date's request overtime sometime the date is duplicate or date was approve.";
                            }

                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save Request OT error...!";
                            return ret;
                        }

                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
            return null;
        }

        [HttpPost]
        [Route("api/User/GetOTDataToConfirm")]
        public OTRequestListResult GetOTDataToConfirm(ConfirmDataOTRequestParam data)
        {
            var ret = new OTRequestListResult();
            List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
            using (var db = new db_hrmsEntities())
            {
                var ds_tokey = (from c in db.v_user_permission
                                where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                select new
                                {
                                    c.empID,
                                    c.userID
                                }).FirstOrDefault();

                if (ds_tokey != null)
                {
                    //re
                    ResultObject = GetOTTimeData(data.lang, data.empID);
                    ret.ModelErrors = null;
                    ret.ResultObject = ResultObject;
                    ret.StatusCode = 200;
                    ret.IsSuccess = true;
                    ret.CommonErrors = null;
                    return ret;
                }
                else
                {
                    ret.ModelErrors = "Unauthorized...!";
                    ret.ResultObject = null;
                    ret.StatusCode = 200;
                    ret.IsSuccess = true;
                    ret.CommonErrors = null;
                    return ret;
                }
            }
        }

        private List<OTRequestListResultViewModelResult> GetOTTimeData(string LangID, int empID = 0, int addUserID = 0)
        {
            using (var db = new db_hrmsEntities())
            {
                List<OTRequestListResultViewModelResult> ResultObject = new List<OTRequestListResultViewModelResult>();
                var ds_Data = (from c in db.tb_otRequest join d in db.tb_otRequestDetail on c.otRequestID equals d.otRequestID
                               where c.status_ID == 0
                               orderby c.startDate
                               select new
                               {
                                   c.otRequestID,
                                   c.otRequestNo,
                                   c.empID,
                                   c.otTypeID,
                                   c.startDate,
                                   c.endDate,
                                   c.noted,
                                   d.startTime,
                                   d.endTime,
                                   d.qtyHour,
                                   c.user_add
                               }).ToList();

                ds_Data = ds_Data.Where(w => w.empID == empID || w.user_add == addUserID).ToList();

                if (ds_Data != null)
                {
                    // DateTime.Parse("24/01/2013", new CultureInfo("en-CA"));
                    ResultObject = ds_Data.Select(c => new OTRequestListResultViewModelResult()
                    {
                        otRequestID = c.otRequestID.ToString(),
                        otRequestNo = c.otRequestNo,
                        empName = LangID == "1" || LangID == null ? db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.empID).Select(s => s.firstName2).FirstOrDefault(),
                        otTypeName = db.tb_otType.Where(w => w.otTypeID == c.otTypeID).Select(s => s.otTypeText).FirstOrDefault(),
                        startDate =  Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                        endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                        noted = c.noted,
                        otStartTime = c.startTime.ToString("hh") + ":" + c.startTime.ToString("mm"),
                        otEndTime = c.endTime.ToString("hh") + ":"+ c.endTime.ToString("mm"), 
                        qtyHour = c.qtyHour.ToString()
                    }).ToList();
                    return ResultObject;
                }
                else
                {
                    return null;
                }
            }
        }

        [HttpPost]
        [Route("api/User/ConfirmOTRequest")]
        public OTRequestListResult ConfirmOTRequest(ConfirmOTRequestParam data)
        {
            var ret = new OTRequestListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();

                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_otRequest
                                         where c.status_ID == 0
                                         select c).ToList();

                        ds_update = ds_update.Where(w => w.empID == ds_tokey.empID || w.user_add == ds_tokey.userID).ToList();

                        if (ds_update != null)
                        {
                            foreach (var item in ds_update)
                            {
                                item.status_ID = 1;
                                item.user_add = ds_tokey.userID;
                                item.date_add = DateTime.Now;
                            }

                            db.SaveChanges();

                            // update email send
                            var ds_sendEmail = (from c in db.tb_email_send
                                             where c.status_id == 0 && c.user_add == ds_tokey.empID && c.date_add < DateTime.Now
                                                select c).ToList();
                            if (ds_sendEmail != null)
                            {
                                foreach (var itemEmail in ds_sendEmail)
                                {
                                    itemEmail.status_id = 1;                                   
                                }
                                db.SaveChanges();
                            }

                            // update email send
                            var ds_notiapp = (from c in db.tb_noti_send
                                                where c.status_id == 0 && c.user_add == ds_tokey.empID && c.date_add < DateTime.Now
                                                select c).ToList();
                            if (ds_notiapp != null)
                            {
                                foreach (var itemNoti in ds_notiapp)
                                {
                                    itemNoti.status_id = 1;
                                }
                                db.SaveChanges();
                            }

                            //This is save log
                            string logevent = "Confirm";
                            string logmodules = "ConfirmOTRequest";
                            string olddata = "";
                            string newdata = "User_add="+ ds_tokey.empID +"; DateAdd="+ DateTime.Now +".";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Confirm Request OT error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Confirm Request OT error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelOTDataToConfirm")]
        public OTRequestListResult DelOTDataToConfirm(DelOTRequestParam data)
        {
            var ret = new OTRequestListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_otRequest
                                         where c.otRequestID == data.otRequestID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelOTDataToConfirm";
                        string olddata = "";
                        string newdata = "otrequestid= "+ data.otRequestID +"; status_ID = 2";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelOTRequest")]
        public OTRequestListResult DelOTRequest(DelOTRequestParam data)
        {
            var ret = new OTRequestListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_otRequest
                                         where c.otRequestID == data.otRequestID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelOTRequest";
                        string olddata = "";
                        string newdata = "otrequestid = "+ data.otRequestID +"; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EducationTypeList")]
        public EducationTypeListResult EducationTypeList(EducationTypeListParam data)
        {
            var ret = new EducationTypeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_educationType
                                       where c.status_ID == 3
                                       select new
                                       {
                                           c.educationTypeID,
                                           c.educationTypeCode,
                                           c.educationTypeName1,
                                           c.educationTypeName2
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<EducationTypeListResulttViewModelResult> ResultObject = new List<EducationTypeListResulttViewModelResult>();
                            ResultObject = ds_Data.Select(c => new EducationTypeListResulttViewModelResult()
                            {
                                educationTypeID = c.educationTypeID.ToString(),
                                educationTypeCode = c.educationTypeCode,
                                educationTypeName1 = c.educationTypeName1,
                                educationTypeName2 = c.educationTypeName2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have education type data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewEducationType")]
        public EducationTypeListResult NewEducationType(NewEducationTypeParam data)
        {
            var ret = new EducationTypeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_educationType.Add(new tb_educationType
                        {
                            educationTypeCode = data.educationTypeCode,
                            educationTypeName1 = data.educationTypeName1,
                            educationTypeName2 = data.educationTypeName2,
                            status_ID = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewEducationType";
                        string olddata = "";
                        string newdata = "Educationtypecode = " + data.educationTypeCode + "; EducationTypeName1 = "+ data.educationTypeName1 +"; educationtypename2 = "+ data.educationTypeName2 +"; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateEducationType")]
        public EducationTypeListResult UpdateEducationType(UpdateEducationTypeParam data)
        {
            var ret = new EducationTypeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                        where(c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_educationType
                                         where c.educationTypeID == data.educationTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "Educationtypecode = " + ds_update.educationTypeCode + "; EducationTypeName1 = " + ds_update.educationTypeName1 + "; educationtypename2 = " + ds_update.educationTypeName2 + "; status_ID = 3.";
                            ds_update.educationTypeCode = data.educationTypeCode;
                            ds_update.educationTypeName1 = data.educationTypeName1;
                            ds_update.educationTypeName2 = data.educationTypeName2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateEducationType";
                        //string olddata = "";
                        string newdata = "Educationtypecode = " + data.educationTypeCode + "; EducationTypeName1 = " + data.educationTypeName1 + "; educationtypename2 = " + data.educationTypeName2 + "; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelEducationType")]
        public EducationTypeListResult DelEducationType(DelEducationTypeParam data)
        {
            var ret = new EducationTypeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_educationType
                                         where c.educationTypeID == data.educationTypeID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_ID = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();
                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelOTRequest";
                        string olddata = "";
                        string newdata = "educationTypeID = " + data.educationTypeID + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelegateList")]
        public DelagateListResult DelegateList(DelagateListParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status == 0)
                        {

                            var ds_Data = (from c in db.tb_delagate
                                               //where c.status_id == 1
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.empID,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.tb_status.status_text
                                           }).ToList();

                            if (data.empID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empID.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    delegateEmpID = c.delegateEmpID.ToString(),
                                    delegateEmpName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2).FirstOrDefault(),
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_text
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                        else
                        {

                            var ds_Data = (from c in db.tb_delagate
                                               where c.status_id == data.status & c.strDate >= data.stdate & c.endDate <= data.enddate
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.empID,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.tb_status.status_text
                                           }).ToList();

                            if (data.empID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empID.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    delegateEmpID = c.delegateEmpID.ToString(),
                                    delegateEmpName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2).FirstOrDefault(),
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_text
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/DelegateList_rq")]
        public DelagateListResult DelegateList_rq(DelagateListParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status == 0)
                        {

                            var ds_Data = (from c in db.tb_delegate_request
                                               //where c.status_id == 1
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.empID,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.tb_status.status_text
                                           }).ToList();

                            if (data.empID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empID.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    delegateEmpID = c.delegateEmpID.ToString(),
                                    delegateEmpName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2).FirstOrDefault(),
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_text
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                        else
                        {

                            var ds_Data = (from c in db.tb_delegate_request
                                           where c.status_id == data.status & c.strDate >= data.stdate & c.endDate <= data.enddate
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.empID,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.tb_status.status_text
                                           }).ToList();

                            if (data.empID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empID.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    delegateEmpID = c.delegateEmpID.ToString(),
                                    delegateEmpName = data.lang == "1" || data.lang == null ? db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName1).FirstOrDefault() : db.tb_employees.Where(w => w.empID == c.delegateEmpID).Select(s => s.firstName2).FirstOrDefault(),
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_text
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/DelegateApproverList")]
        public DelagateListResult DelegateApproverList(DelagateApproverListParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status == 0)
                        {

                            var ds_Data = (from c in db.tb_delagate
                                             //  where c.status_id != 2
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.tb_employees.empNo,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.status_id,
                                               c.tb_status.status_text,
                                               c.delegateNote
                                           }).ToList();

                            if (data.delegateEmpID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.delegateEmpID == data.delegateEmpID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empNo.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_id == 2 ? "Not Approved" : c.status_text,
                                    delegateNoted = c.delegateNote
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                        else
                        {

                            var ds_Data = (from c in db.tb_delagate
                                               where c.strDate >= data.stdate && c.endDate <= data.enddate && c.status_id == data.status && c.status_id !=2
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.tb_employees.empNo,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.status_id,
                                               c.tb_status.status_text,
                                               c.delegateNote
                                           }).ToList();

                            if (data.delegateEmpID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.delegateEmpID == data.delegateEmpID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empNo.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_id == 2 ? "Not Approved" : c.status_text,
                                    delegateNoted = c.delegateNote
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/DelegateApproverList_rq")]
        public DelagateListResult DelegateApproverList_rq(DelagateApproverListParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        if (data.status == 0)
                        {

                            var ds_Data = (from c in db.tb_delegate_request
                                            //   where c.status_id != 2
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.tb_employees.empNo,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.status_id,
                                               c.tb_status.status_text,
                                               c.delegateNote
                                           }).ToList();

                            if (data.delegateEmpID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.delegateEmpID == data.delegateEmpID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empNo.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_id == 2 ? "Not Approved" : c.status_text,
                                    delegateNoted = c.delegateNote
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                        else
                        {

                            var ds_Data = (from c in db.tb_delegate_request
                                           where c.strDate >= data.stdate && c.endDate <= data.enddate && c.status_id == data.status && c.status_id != 2
                                           orderby c.strDate descending
                                           select new
                                           {
                                               c.delegateID,
                                               c.tb_employees.empNo,
                                               c.tb_employees.firstName1,
                                               c.tb_employees.firstName2,
                                               c.delegateEmpID,
                                               c.noted,
                                               c.strDate,
                                               c.endDate,
                                               c.reCallDate,
                                               c.status_id,
                                               c.tb_status.status_text,
                                               c.delegateNote
                                           }).ToList();

                            if (data.delegateEmpID > 0)
                            {
                                ds_Data = ds_Data.Where(w => w.delegateEmpID == data.delegateEmpID).ToList();
                            }
                            if (ds_Data != null)
                            {
                                List<DelagateListResulttViewModelResult> ResultObject = new List<DelagateListResulttViewModelResult>();
                                ResultObject = ds_Data.Select(c => new DelagateListResulttViewModelResult()
                                {
                                    delegateID = c.delegateID.ToString(),
                                    empID = c.empNo.ToString(),
                                    empName = data.lang == "1" || data.lang == null ? c.firstName1 : c.firstName2,
                                    noted = c.noted,
                                    strDate = Convert.ToDateTime(c.strDate).ToString("dd/MM/yyyy"),
                                    endDate = Convert.ToDateTime(c.endDate).ToString("dd/MM/yyyy"),
                                    reCallDate = Convert.ToDateTime(c.reCallDate).ToString("dd/MM/yyyy"),
                                    strDate2 = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                    endDate2 = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                    reCallDate2 = Convert.ToDateTime(c.reCallDate).ToString("yyyy-MM-dd"),
                                    status = c.status_id == 2 ? "Not Approved" : c.status_text,
                                    delegateNoted = c.delegateNote
                                }).OrderByDescending(i => i.status).ToList();
                                ret.ModelErrors = null;
                                ret.ResultObject = ResultObject;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                            else
                            {
                                ret.ModelErrors = "Don't have delegate data ...!";
                                ret.ResultObject = null;
                                ret.StatusCode = 405;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "No data";
                                return ret;
                            }
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/NewDelegate")]
        public DelagateListResult NewDelegate(NewDelagateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            string FromDevice = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        var ds_checkFromweb = (from c in db.v_user_permission
                                               where (c.webTokenKey == data.tokenKey)
                                               select new
                                               {
                                                   c.empID
                                               }).ToList();
                        if (ds_checkFromweb.Count > 0)
                        {
                            FromDevice = "--- FROM Wep App---";
                        } else
                        {
                            FromDevice = "--- FROM Mobile App---";
                        }

                        string Command;
                        int Result;


                        Command = " EXEC p_InsertDelegate @empID = " + data.empID + ", @delegateEmpID=" + data.delegateEmpID + ", " +
                          " @noted= N'" + data.noted + "', @strDate = '" + data.strDate + "', @endDate='" + data.endDate + "', " +
                          " @reCallDate = '" + data.reCallDate + "', @user_add=" + ds_tokey.userID + "";

                        //  WriteLogFile("NewEmpLeave command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }

                            if (Result == 1)
                            {
                                var db_degegate = db.tb_employees.Where(w => w.empID == data.delegateEmpID).FirstOrDefault();
                                var db_emp = db.tb_employees.Where(w => w.empID == data.empID).FirstOrDefault();
                                var db_tokenRequest = db.tb_users.Where(w => w.empID == data.delegateEmpID).FirstOrDefault();
                                if (db_degegate != null && db_degegate.empEmail != null)
                                {
                                    string str = "Hi, " + db_degegate.firstName2 + " " + db_degegate.lastName2 + Environment.NewLine +
                                     "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " was delegate user right of HRM system to you." + Environment.NewLine
                                     + " start date: " + data.strDate + " and end date: " + data.endDate + "." + Environment.NewLine;
                                    Boolean isSendMail = SendMeail(db_degegate.empEmail, "HRM - User Delegate.", str, FromDevice, data.delegateEmpID.ToString(), data.empID.ToString(), true, "5");

                                    if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                                    {
                                        Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), "HRM - User Delegate", str, data.delegateEmpID.ToString(), FromDevice, data.empID.ToString(), true);
                                    }
                                }

                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                                }
                                else
                                {
                                    ret.ModelErrors = "Save complete";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;

                                //This is save log
                                string logevent = "New";
                                string logmodules = "NewDelegate";
                                string olddata = "";
                                string newdata = "empID = " + data.empID + "; FromDevice=" + FromDevice + "; delegateEmpID = " + data.delegateEmpID + "; " +
                                    "noted  = " + data.noted + "; strDate = " + data.strDate + "; enddate = " + data.endDate + "; recaldate = " + data.reCallDate + ".";
                                insertLog(data.tokenKey, logevent, logmodules, olddata, newdata);
                            }
                            else
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ຂໍ້ມູນຊໍ້າກັນ";
                                }
                                else
                                {
                                    ret.ModelErrors = "Duplicate Data.";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 401;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "Date is duplicate.";
                                return ret;
                            }

                           

                        }

                        
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateDelegate")]
        public DelagateListResult UpdateDelegate(UpdateDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delagate
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empID = " + ds_update.empID + "; delegateEmpID = " + ds_update.delegateEmpID + "; " +
                            "noted  = " + ds_update.noted + "; strDate = " + ds_update.strDate + "; enddate = " + ds_update.endDate + "; recaldate = " + ds_update.reCallDate + ";  status_ID = 3.";

                            ds_update.empID = data.empID;
                            ds_update.delegateEmpID = data.delegateEmpID;
                            ds_update.noted = data.noted;
                            ds_update.strDate = data.strDate;
                            ds_update.endDate = data.endDate;
                            ds_update.reCallDate = data.reCallDate;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();
                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateDelegate";
                        //string olddata = "";
                        string newdata = "empID = " + data.empID + "; delegateEmpID = " + data.delegateEmpID + "; " +
                            "noted  = " + data.noted + "; strDate = " + data.strDate + "; enddate = " + data.endDate + "; recaldate = " + data.reCallDate + ";  status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ReCallDelegate")]
        public DelagateListResult ReCallDelegate(ReCallDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delagate
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "noted = " + ds_update.noted + "; RecalDate =" + DateTime.Now + "; user_add = " + ds_update.user_add + "; date_add=" + ds_update .date_add + ".";
                            ds_update.noted = data.noted;
                            ds_update.reCallDate = DateTime.Now;
                            ds_update.status_id = 6;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Recal";
                        string logmodules = "RecallDelegate";
                        //string olddata = "";
                        string newdata = "noted = " + data.noted + "; RecalDate ="+ DateTime.Now +"; user_add = "+ ds_tokey.userID +"; date_add="+ DateTime.Now +"; status_ID = 6.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/autoReCallDelegate_rq")]
        public DelagateListResult autoReCallDelegate_rq(ReCallDelegate_rq_Param data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            string Command;
            int Result;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delegate_request
                                             //where c.empID == ds_tokey.empID & c.endDate <= DateTime.Now & c.status_id == 3
                                         where  c.endDate <= DateTime.Now & c.status_id == 3
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "noted = " + ds_update.noted + "; RecalDate =" + DateTime.Now + "; user_add = " + ds_update.user_add + "; date_add=" + ds_update.date_add + ".";
                            ds_update.noted = "Auto recall in the end date";
                            ds_update.reCallDate = DateTime.Now;
                            ds_update.status_id = 6;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;

                            //==================
                            Command = " EXEC p_autoRecallDelegate_rq @empid = " + ds_tokey.empID + " ";

                            WriteLogFile("NewEmpLeave command: " + Command);

                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                    Result = (int)myCommand.ExecuteScalar();
                                }
                            }
                        }
                        db.SaveChanges();
                        //==============================
                        

                       




                        //This is save log
                        string logevent = "Recal";
                        string logmodules = "RecallDelegate";
                        //string olddata = "";
                        string newdata = "noted = Auto recall in the end date; RecalDate =" + DateTime.Now + "; user_add = " + ds_tokey.userID + "; date_add=" + DateTime.Now + "; status_ID = 6.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/ApproveDelegate")]
        public DelagateListResult ApproveDelegate(ApproveDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            string FromDevice = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        var ds_checkFromweb = (from c in db.v_user_permission
                                               where (c.webTokenKey == data.TokenKey)
                                               select new
                                               {
                                                   c.empID
                                               }).ToList();
                        if (ds_checkFromweb.Count > 0)
                        {
                            FromDevice = "--- FROM Wep App---";
                        }
                        else
                        {
                            FromDevice = "--- FROM Mobile App---";
                        }


                        var ds_update = (from c in db.tb_delagate
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.delegateNote = data.delegateNoted;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Approve";
                        string logmodules = "ApproveDelegate";
                        string olddata = "";
                        string newdata = "FromDevice = " + FromDevice + "; User_Add = "+ ds_tokey.userID +"; delegateNote = "+ data.delegateNoted +"; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        var db_approver = db.tb_employees.Where(w => w.empID == ds_tokey.empID).FirstOrDefault();
                        var db_emp = db.tb_employees.Where(w => w.empID == ds_update.empID).FirstOrDefault();
                        var db_getDelegate = db.tb_delagate.Where(w => w.delegateID == data.delegateID).FirstOrDefault();
                        var db_tokenRequest = db.tb_users.Where(w => w.empID == db_getDelegate.empID).FirstOrDefault();
                        string approvermail;
                        string subject;
                        string content;

                        if (db_approver != null && db_emp.empEmail != null && db_emp != null)
                        {
                            approvermail = db_emp.empEmail;
                            subject = "HRM - Approve delegate.";
                            content = "Hi, " + db_emp.firstName2 + " " + db_emp.lastName2 + Environment.NewLine +
                                    "Your delegate is approved by: " + db_approver.firstName2 + " " + db_approver.lastName2;
                            if (approvermail != "" && approvermail != null)
                            {
                                Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, ds_update.empID.ToString(), ds_tokey.empID.ToString(), true, "12");
                            }

                            if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                            {
                                Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), subject, content, db_getDelegate.empID.ToString(), FromDevice, db_getDelegate.delegateEmpID.ToString(), true);
                            }
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອະນຸມັດຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Approve complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApproveDelegate_rq")]
        public DelagateListResult ApproveDelegate_rq(ApproveDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            int get_empId = 0;
            int delegateId = 0;
            string FromDevice = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        var ds_checkFromweb = (from c in db.v_user_permission
                                               where (c.webTokenKey == data.TokenKey)
                                               select new
                                               {
                                                   c.empID
                                               }).ToList();
                        if (ds_checkFromweb.Count > 0)
                        {
                            FromDevice = "--- FROM Wep App---";
                        }
                        else
                        {
                            FromDevice = "--- FROM Mobile App---";
                        }


                        var ds_update = (from c in db.tb_delegate_request
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            get_empId = int.Parse(ds_update.empID.ToString());
                            delegateId = int.Parse(ds_update.delegateEmpID.ToString());
                            ds_update.status_id = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.delegateNote = data.delegateNoted;
                        }

                        db.SaveChanges();
                        //==============================
                        string Command;
                        int Result;


                        Command = " EXEC p_approve_delegate_rq @delegat1 = " + get_empId + ", @delegate2=" + delegateId + " ";

                        //  WriteLogFile("NewEmpLeave command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }
                            myConnection.Close();
                        }


                        //This is save log
                        string logevent = "Approve";
                        string logmodules = "ApproveDelegate request";
                        string olddata = "";
                        string newdata = "FromDevice = " + FromDevice + "; User_Add = " + ds_tokey.userID + "; delegateNote = " + data.delegateNoted + "; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        var db_approver = db.tb_employees.Where(w => w.empID == ds_tokey.empID).FirstOrDefault();
                        var db_emp = db.tb_employees.Where(w => w.empID == get_empId).FirstOrDefault();
                        var db_getDelegate = db.tb_delegate_request.Where(w => w.delegateID == data.delegateID).FirstOrDefault();
                        var db_tokenRequest = db.tb_users.Where(w => w.empID == db_getDelegate.empID).FirstOrDefault();
                        string approvermail;
                        string subject;
                        string content;

                        if (db_approver != null && db_emp.empEmail != null && db_emp != null)
                        {
                            approvermail = db_emp.empEmail;
                            subject = "HRM - Approve delegate.";
                            content = "Hi, " + db_emp.firstName2 + " " + db_emp.lastName2 + Environment.NewLine +
                                    "Your delegate is approved by: " + db_approver.firstName2 + " " + db_approver.lastName2;
                            if (approvermail != "" && approvermail != null)
                            {
                                Boolean isSendMail = SendMeail(approvermail, subject, content, FromDevice, ds_update.empID.ToString(), ds_tokey.empID.ToString(), true, "12");
                            }

                            if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                            {
                                Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), subject, content, db_getDelegate.empID.ToString(), FromDevice, db_getDelegate.delegateEmpID.ToString(), true);
                            }
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອະນຸມັດຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Approve complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/DelDelegate")]
        public DelagateListResult DelDelegate(DelDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delagate
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelOTRequest";
                        string olddata = "";
                        string newdata = "DelegateID = " + data.delegateID + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UnApproveDelegate")]
        public DelagateListResult UnApproveDelegate(UnApproveDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delagate
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.delegateNote = data.delegateNoted;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "UnApprove";
                        string logmodules = "UnApproveDelegate";
                        string olddata = "";
                        string newdata = "delegateID = " + data.delegateID + "; DelegateNote = "+ data.delegateNoted +"; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບໍ່ອະນຸມັດຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Un approve data complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UnApproveDelegate_rq")]
        public DelagateListResult UnApproveDelegate_rq(UnApproveDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delegate_request
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.delegateNote = data.delegateNoted;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "UnApprove";
                        string logmodules = "UnApproveDelegate";
                        string olddata = "";
                        string newdata = "delegateID = " + data.delegateID + "; DelegateNote = " + data.delegateNoted + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບໍ່ອະນຸມັດຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Un approve data complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/NewDelegate_rq")]
        public DelagateListResult NewDelegate_rq(NewDelagateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            string FromDevice = "";
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        var ds_checkFromweb = (from c in db.v_user_permission
                                               where (c.webTokenKey == data.tokenKey)
                                               select new
                                               {
                                                   c.empID
                                               }).ToList();
                        if (ds_checkFromweb.Count > 0)
                        {
                            FromDevice = "--- FROM Wep App---";
                        }
                        else
                        {
                            FromDevice = "--- FROM Mobile App---";
                        }

                        string Command;
                        int Result;


                        Command = " EXEC p_InsertDelegate_rq @empID = " + data.empID + ", @delegateEmpID=" + data.delegateEmpID + ", " +
                          " @noted= N'" + data.noted + "', @strDate = '" + data.strDate + "', @endDate='" + data.endDate + "', " +
                          " @reCallDate = '" + data.reCallDate + "', @user_add=" + ds_tokey.userID + "";

                        //  WriteLogFile("NewEmpLeave command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }

                            if (Result == 1)
                            {
                                var db_degegate = db.tb_employees.Where(w => w.empID == data.delegateEmpID).FirstOrDefault();
                                var db_emp = db.tb_employees.Where(w => w.empID == data.empID).FirstOrDefault();
                                var db_tokenRequest = db.tb_users.Where(w => w.empID == data.delegateEmpID).FirstOrDefault();
                                if (db_degegate != null && db_degegate.empEmail != null)
                                {
                                    string str = "Hi, " + db_degegate.firstName2 + " " + db_degegate.lastName2 + Environment.NewLine +
                                     "Employee name: " + db_emp.firstName2 + " " + db_emp.lastName2 + " was delegate user right of HRM system to you." + Environment.NewLine
                                     + " start date: " + data.strDate + " and end date: " + data.endDate + "." + Environment.NewLine;
                                    Boolean isSendMail = SendMeail(db_degegate.empEmail, "HRM - User Delegate.", str, FromDevice, data.delegateEmpID.ToString(), data.empID.ToString(), true, "5");

                                    if (db_tokenRequest.Device_token != "" && db_tokenRequest.Device_token != null)
                                    {
                                        Boolean isNoti = SingleNotification(db_tokenRequest.Device_token.ToString(), "HRM - User Delegate", str, data.delegateEmpID.ToString(), FromDevice, data.empID.ToString(), true);
                                    }
                                }

                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                                }
                                else
                                {
                                    ret.ModelErrors = "Save complete";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 200;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;

                                //This is save log
                                string logevent = "New";
                                string logmodules = "NewDelegate Request";
                                string olddata = "";
                                string newdata = "empID = " + data.empID + "; FromDevice=" + FromDevice + "; delegateEmpID = " + data.delegateEmpID + "; " +
                                    "noted  = " + data.noted + "; strDate = " + data.strDate + "; enddate = " + data.endDate + "; recaldate = " + data.reCallDate + ".";
                                insertLog(data.tokenKey, logevent, logmodules, olddata, newdata);
                            }
                            else
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ຂໍ້ມູນຊໍ້າກັນ";
                                }
                                else
                                {
                                    ret.ModelErrors = "Duplicate Data.";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 401;
                                ret.IsSuccess = false;
                                ret.CommonErrors = "Date is duplicate.";
                                return ret;
                            }



                        }


                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateDelegate_rq")]
        public DelagateListResult UpdateDelegate_rq(UpdateDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delegate_request
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "empID = " + ds_update.empID + "; delegateEmpID = " + ds_update.delegateEmpID + "; " +
                            "noted  = " + ds_update.noted + "; strDate = " + ds_update.strDate + "; enddate = " + ds_update.endDate + "; recaldate = " + ds_update.reCallDate + ";  status_ID = 3.";

                            ds_update.empID = data.empID;
                            ds_update.delegateEmpID = data.delegateEmpID;
                            ds_update.noted = data.noted;
                            ds_update.strDate = data.strDate;
                            ds_update.endDate = data.endDate;
                            ds_update.reCallDate = data.reCallDate;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();
                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateDelegate request";
                        //string olddata = "";
                        string newdata = "empID = " + data.empID + "; delegateEmpID = " + data.delegateEmpID + "; " +
                            "noted  = " + data.noted + "; strDate = " + data.strDate + "; enddate = " + data.endDate + "; recaldate = " + data.reCallDate + ";  status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ReCallDelegate_rq")]
        public DelagateListResult ReCallDelegate_rq(ReCallDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delegate_request
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "noted = " + ds_update.noted + "; RecalDate =" + DateTime.Now + "; user_add = " + ds_update.user_add + "; date_add=" + ds_update.date_add + ".";
                            ds_update.noted = data.noted;
                            ds_update.reCallDate = DateTime.Now;
                            ds_update.status_id = 6;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Recal";
                        string logmodules = "RecallDelegate request";
                        //string olddata = "";
                        string newdata = "noted = " + data.noted + "; RecalDate =" + DateTime.Now + "; user_add = " + ds_tokey.userID + "; date_add=" + DateTime.Now + "; status_ID = 6.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

      
        [HttpPost]
        [Route("api/User/DelDelegate_rq")]
        public DelagateListResult DelDelegate_rq(DelDelegateParam data)
        {
            var ret = new DelagateListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_delegate_request
                                         where c.delegateID == data.delegateID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelOTRequest request";
                        string olddata = "";
                        string newdata = "DelegateID = " + data.delegateID + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        




        [HttpPost]
        [Route("api/User/GetEmpByDeptID")]
        public GetEmpByDeptIDResult GetEmpByDeptID(EmpByDeptIDParam data)
        {
            var ret = new GetEmpByDeptIDResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.v_dept_unit_employee
                                           //where c.deptID == data.DeptID && c.empID != ds_tokey.empID
                                       where   c.empID != ds_tokey.empID
                                       select new
                                       {
                                           c.empID,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2
                                       }).ToList();
                        
                        if (ds_Data != null)
                        {
                            List<GetEmpByDeptIDtViewModelResult> ResultObject = new List<GetEmpByDeptIDtViewModelResult>();
                            ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            {
                                empID = c.empID.ToString(),
                                empName = data.lang == "1" || data.lang == null || data.lang == "" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                            }).ToList();

                            //if (data.lang == "1" || data.lang == null || data.lang == "")
                            //{
                            //    ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            //    {
                            //        empID = c.empID.ToString(),
                            //        empName = c.firstName1 + " " + c.lastName1,
                            //        delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                            //    }).ToList();
                            //} else
                            //{
                            //    ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            //    {
                            //        empID = c.empID.ToString(),
                            //        empName = c.firstName2 + " " + c.lastName2,
                            //        delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                            //    }).ToList();
                            //}


                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/GetEmpByDeptID_rq")]
        public GetEmpByDeptIDResult GetEmpByDeptID_rq(EmpByDeptIDParam data)
        {
            var ret = new GetEmpByDeptIDResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.v_dept_unit_employee
                                           where c.deptID == data.DeptID && c.empID != ds_tokey.empID
                                       where c.empID != ds_tokey.empID
                                       select new
                                       {
                                           c.empID,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<GetEmpByDeptIDtViewModelResult> ResultObject = new List<GetEmpByDeptIDtViewModelResult>();
                            ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            {
                                empID = c.empID.ToString(),
                                empName = data.lang == "1" || data.lang == null || data.lang == "" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                            }).ToList();

                            //if (data.lang == "1" || data.lang == null || data.lang == "")
                            //{
                            //    ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            //    {
                            //        empID = c.empID.ToString(),
                            //        empName = c.firstName1 + " " + c.lastName1,
                            //        delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                            //    }).ToList();
                            //} else
                            //{
                            //    ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            //    {
                            //        empID = c.empID.ToString(),
                            //        empName = c.firstName2 + " " + c.lastName2,
                            //        delegatetype = checkdelegated(ds_tokey.empID, c.empID)
                            //    }).ToList();
                            //}


                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/GetEmpByDeptID2")]
        public GetEmpByDeptIDResult GetEmpByDeptID2(EmpByDeptIDParam data)
        {
            var ret = new GetEmpByDeptIDResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.v_dept_unit_employee
                                       where c.deptID == data.DeptID 
                                       select new
                                       {
                                           c.empID,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<GetEmpByDeptIDtViewModelResult> ResultObject = new List<GetEmpByDeptIDtViewModelResult>();
                            ResultObject = ds_Data.Select(c => new GetEmpByDeptIDtViewModelResult()
                            {
                                empID = c.empID.ToString(),
                                empName = data.lang == "1" || data.lang == null ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LoanListMobile")]
        public LoanListResult LoanListMobile(LoanListParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loan
                                       where c.empID == data.empid & c.status_id != 2
                                       orderby c.loanStart descending
                                       select new
                                       {
                                           c.loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<LoanListResultObject> ResultObject = new List<LoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new LoanListResultObject()
                            {
                                loanID = c.loanID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.loanStart).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.loanEnd).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                totalBL = getTotalBL(c.loanID, c.totalLoan).ToString("N"),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LoanList")]
        public LoanListResult LoanList(LoanListParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loan
                                       where c.status_id != 2 orderby c.loanStart descending
                                       select new
                                       {
                                           c.loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<LoanListResultObject> ResultObject = new List<LoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new LoanListResultObject()
                            {
                                loanID = c.loanID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.loanStart).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.loanEnd).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                totalBL = getTotalBL(c.loanID, c.totalLoan).ToString("N"),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private double getTotalBL(long loanid = 0, double? totalLoan = 0)
        {
            double totalbalance = 0;
            using (var db = new db_hrmsEntities())
            {
                double? totalpaid = db.tb_loanDetail.Where(w => w.loanID == loanid && w.paidStatus == 3 && w.status_id == 3).Sum(su => su.pay_amount);
                if(totalpaid == null)
                {
                    totalpaid = 0;
                }
                totalbalance = Convert.ToDouble(totalLoan) - Convert.ToDouble(totalpaid);
            }
            return totalbalance < 0 ? 0 : totalbalance;
        }

        private double getTotalBLSLDRT(long loanid = 0, double? totalLoan = 0)
        {
            double totalbalance = 0;
            using (var db = new db_hrmsEntities())
            {
                double? totalpaid = db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == loanid && w.paidStatus == 3 && w.status_id == 3).Sum(su => su.pay_amount);
                if (totalpaid == null)
                {
                    totalpaid = 0;
                }
                totalbalance = Convert.ToDouble(totalLoan) - Convert.ToDouble(totalpaid);
            }
            return totalbalance < 0 ? 0 : totalbalance;
        }

        [HttpPost]
        [Route("api/User/LoanDetailList")]
        public LoanDetailListResult LoanDetailList(LoanDetailListParam data)
        {
            var ret = new LoanDetailListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loanDetail
                                       where c.loanID == data.loanID && c.status_id == 3
                                       orderby c.loanDetailID
                                       select new
                                       {
                                           c.loanDetailID,
                                           c.tb_loan.tb_employees.empID,
                                           c.tb_loan.tb_employees.empNo,
                                           c.tb_loan.tb_employees.firstName1,
                                           c.tb_loan.tb_employees.firstName2,
                                           c.tb_loan.tb_employees.lastName1,
                                           c.tb_loan.tb_employees.lastName2,
                                           c.monthBL,
                                           c.acc_balance,
                                           c.monthlyPay,
                                           c.loan_incen,
                                           c.pay_amount,
                                           c.totalBL,
                                           c.paidStatus,
                                           c.payDate,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<LoanDetailListResultObject> ResultObject = new List<LoanDetailListResultObject>();
                            ResultObject = ds_Data.Select(c => new LoanDetailListResultObject()
                            {
                                loanDetailID = c.loanDetailID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                section = getUnitName(c.empID),
                                monthBL = Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                acc_balance = Convert.ToDouble(c.acc_balance).ToString("N"),
                                acc_balance2 = Convert.ToDouble(c.acc_balance).ToString("#,##0"),
                                monthlyPay = Convert.ToDouble(c.monthlyPay).ToString("N"),
                                monthlyPay2 = Convert.ToDouble(c.monthlyPay).ToString("#,##0"),
                                loan_incen = Convert.ToDouble(c.loan_incen).ToString("N"),
                                loan_incen2 = Convert.ToDouble(c.loan_incen).ToString("#,##0"),
                                pay_amount = Convert.ToDouble(c.pay_amount).ToString("N"),
                                pay_amount2 = Convert.ToDouble(c.pay_amount).ToString("#,##0"),
                                totalBL = Convert.ToDouble(c.totalBL).ToString("N"),
                                totalBL2 = Convert.ToDouble(c.totalBL).ToString("#,##0"),
                                payDate = c.payDate == null ? "" : Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                payMonth = Convert.ToDateTime(c.monthBL).ToString("MM-yyyy"),
                                paidStatus = c.paidStatus == 1 ? "Pending" : "Paid"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have delegate data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LoanPaymentList")]
        public LoanListResult LoanPaymentList(LoanListParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loan
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data.Count > 0)
                        {
                            List<LoanListResultObject> ResultObject = new List<LoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new LoanListResultObject()
                            {
                                loanID = c.loanID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LoanPaymentDetail")]
        public LoanDetailListResult LoanPaymentDetail(LoanDetailListParam data)
        {
            var ret = new LoanDetailListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loanDetail
                                       where c.loanID == data.loanID && c.paidStatus == 1 && c.status_id == 3
                                       orderby c.loanDetailID
                                       select new
                                       {
                                           c.loanDetailID,
                                           c.tb_loan.tb_employees.empID,
                                           c.tb_loan.tb_employees.empNo,
                                           c.tb_loan.tb_employees.firstName1,
                                           c.tb_loan.tb_employees.firstName2,
                                           c.tb_loan.tb_employees.lastName1,
                                           c.tb_loan.tb_employees.lastName2,
                                           c.monthBL,
                                           c.acc_balance,
                                           c.monthlyPay,
                                           c.loan_incen,
                                           c.pay_amount,
                                           c.totalBL,
                                           c.paidStatus,
                                           c.payDate,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<LoanDetailListResultObject> ResultObject = new List<LoanDetailListResultObject>();
                            ResultObject = ds_Data.Select(c => new LoanDetailListResultObject()
                            {
                                loanDetailID = c.loanDetailID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                section = getUnitName(c.empID),
                                monthBL = Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                acc_balance = Convert.ToDouble(c.acc_balance).ToString("N"),
                                acc_balance2 = Convert.ToDouble(c.acc_balance).ToString("#,##0"),
                                monthlyPay = Convert.ToDouble(c.monthlyPay).ToString("N"),
                                monthlyPay2 = Convert.ToDouble(c.monthlyPay).ToString("#,##0"),
                                loan_incen = Convert.ToDouble(c.loan_incen).ToString("N"),
                                loan_incen2 = Convert.ToDouble(c.loan_incen).ToString("#,##0"),
                                pay_amount = Convert.ToDouble(c.pay_amount).ToString("N"),
                                pay_amount2 = Convert.ToDouble(c.pay_amount).ToString("#,##0"),
                                totalBL = Convert.ToDouble(c.totalBL).ToString("N"),
                                totalBL2 = Convert.ToDouble(c.totalBL).ToString("#,##0"),
                                payDate = c.payDate == null ? "" : Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                payMonth = Convert.ToDateTime(c.monthBL).ToString("MM-yyyy"),
                                paidStatus = c.paidStatus == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private string getUnitName(int empid = 0, string lan = "")
        {
            string unitname = "";
            using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.tb_empInfo
                                    where c.empID == empid
                                    select new
                                    {
                                        c.tb_unit.unitName1,
                                        c.tb_unit.unitName2,
                                    }).FirstOrDefault();

                    if(ds_tokey != null)
                    {
                        unitname = lan == "1" ? ds_tokey.unitName1 : ds_tokey.unitName2;
                    }
                }
            return unitname;
        }

        [HttpPost]
        [Route("api/User/NewLoan")]
        public LoanListResult NewLoan(NewLoanParam data)
        {
            var ret = new LoanListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //DateTime dt = DateTime.Now;
                        //string genLeaveRequestNo = dt.ToString("yyyyMMddHHmmss") + data.empID;

                        string Command;
                        int Result;
                        Command = "";

                        Command = " EXEC p_iu_loan @loanID=0, @empID = " + data.empID + ", @amountLoan=" + data.amountLoan + ", " +
                          " @loanMonth= " + data.loanMonth + ", @requestDate = '" + data.requestDate + "',@loanPercent=" + data.loanPercent + ", " +
                          " @totalLoan=" + data.totalLoan + ", @loanStart='" + data.loanStart + "', " +
                          " @loanEnd = '" + data.loanEnd + "', @LoanReason=N'" + data.LoanReason + "', @loanFile = '" + data.loanFile + "', " +
                          " @user_add=" + ds_tokey.userID + ", @loan_incen=" + data.loan_incen + ",@monthlyAmount=" + data.payMonth + "";

                        WriteLogFile("NewLoan command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }
                        }
                        if (Result == 1)
                        {
                            //This is save log
                            string logevent = "New";
                            string logmodules = "NewLoan";
                            string olddata = "";
                            string newdata = "empid = " + data.empID + "; amountLoan  = " + data.amountLoan + "; loanMonth = " + data.loanMonth + "; " +
                                "requestDate = " + data.requestDate + "; Percent = " + data.loanPercent + "; totalLoan = " + data.totalLoan + "; " +
                                "loanStart = " + data.loanStart + "; loanEnd = " + data.loanEnd + "; LoanReason = " + data.LoanReason + "; " +
                                "loanFile = " + data.loanFile + "; user_add = " + ds_tokey.userID + "; loan_incen = " + data.loan_incen + "; monthlyAmount = " + data.payMonth + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateLoan")]
        public LoanListResult UpdateLoan(UpdateLoanParam data)
        {
            var ret = new LoanListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //DateTime dt = DateTime.Now;
                        //string genLeaveRequestNo = dt.ToString("yyyyMMddHHmmss") + data.empID;

                        string Command;
                        int Result;
                        Command = "";

                       /* Command = " EXEC p_iu_loan @loanID=" + data.loanID + ", @empID = 0, @amountLoan=" + data.amountLoan + ", " +
                          " @loanMonth= " + data.loanMonth + ", @requestDate = '" + DateTime.Now + "', @loanPercent=" + data.loanPercent + ", " +
                          " @totalLoan=" + data.totalLoan + ", @loanStart='" + data.loanStart + "', " +
                          " @loanEnd = '" + data.loanEnd + "', @LoanReason= N'" + data.LoanReason + "', @loanFile = '" + data.loanFile + "', " +
                          " @user_add=" + ds_tokey.userID + ",@loan_incen=" + data.loan_incen + ", @monthlyAmount=" + data.payMonth + "";*/


                        Command = " EXEC p_iu_loan @loanID= "+ data.loanID +", @empID = " + data.empID + ", @amountLoan=" + data.amountLoan + ", " +
                          " @loanMonth= " + data.loanMonth + ", @requestDate = '" + DateTime.Now + "',@loanPercent=" + data.loanPercent + ", " +
                          " @totalLoan=" + data.totalLoan + ", @loanStart='" + data.loanStart + "', " +
                          " @loanEnd = '" + data.loanEnd + "', @LoanReason=N'" + data.LoanReason + "', @loanFile = N'" + data.loanFile + "', " +
                          " @user_add=" + ds_tokey.userID + ", @loan_incen=" + data.loan_incen + ",@monthlyAmount=" + data.payMonth + "";


                        WriteLogFile("UpdateLoan command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }
                        }
                        if (Result == 1)
                        {

                            //This is save log
                            string logevent = "Update";
                            string logmodules = "UpdateLoan";
                            string olddata = "";
                            string newdata = "empid = " + data.empID + "; amountLoan  = " + data.amountLoan + "; loanMonth = " + data.loanMonth + "; " +
                                "requestDate = " + data.requestDate + "; Percent = " + data.loanPercent + "; totalLoan = " + data.totalLoan + "; " +
                                "loanStart = " + data.loanStart + "; loanEnd = " + data.loanEnd + "; LoanReason = " + data.LoanReason + "; " +
                                "loanFile = " + data.loanFile + "; user_add = " + ds_tokey.userID + "; loan_incen = " + data.loan_incen + "; monthlyAmount = " + data.payMonth + "; ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelLoan")]
        public LoanListResult DelLoan(DelLoanParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_loan
                                         where c.loanID == data.loanID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();
                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelLoan";
                        string olddata = "";
                        string newdata = "LoanID = " + data.loanID + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/RejectLoan")]
        public LoanListResult RejectLoan(DelLoanParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_loan
                                         where c.loanID == data.loanID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "user_add= "+ ds_update.user_add +"; date_add="+ ds_update.date_add +"; status_ID = "+ ds_update.status_id +".";
                            ds_update.status_id = 4;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            db.SaveChanges();
                        }

                        DateTime dt = DateTime.Now;
                        string loanApproveNo = dt.ToString("yyyyMMddHHmmss") + ds_update.empID;

                        db.tb_loanApprove.Add(new tb_loanApprove
                        {
                            loanApproveNo = loanApproveNo,
                            loanID = data.loanID,
                            noted = data.noted,
                            status_ID = 4,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Reject";
                        string logmodules = "RejectLoan";
                        //string olddata = "";
                        string newdata = "loanApproveNo = " + loanApproveNo + ";  loanID = "+ data.loanID + "; noted " + data.noted + "; " +
                            "user_add " + ds_tokey.userID + "; date_add " + DateTime.Now + "; status_ID = 4.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "Reject ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Reject complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/LoanApproveList")]
        public LoanListResult LoanApproveList(LoanListParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loan
                                       where c.status_id == 1
                                       select new
                                       {
                                           c.loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<LoanListResultObject> ResultObject = new List<LoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new LoanListResultObject()
                            {
                                loanID = c.loanID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_loanDetail.Where(w => w.loanID == c.loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.loanStart).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.loanEnd).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                approverEmpId = LoanApproverEmpId(c.loanID, c.empID, ds_tokey.empID),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ResultObject = ResultObject.Where(w => w.approverEmpId == ds_tokey.empID).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private int LoanApproverEmpId(int? loadID = 0, int? requestID = 0, int? empID = 0)
        {
            int approver;
            int? deptid = 0;
            int? levelid = 0;
            int? approveTypeID = 7;

            using (var db = new db_hrmsEntities())
            {
                deptid = db.v_dept_unit_employee.Where(w => w.empID == requestID).Select(s => s.deptID).FirstOrDefault();
                levelid = db.tb_loanApprove.Where(w => w.loanID == loadID && w.status_ID == 3).Count() + 1;

                var db_data = db.tb_approvalSetting.Where(w => w.appLevel == levelid && w.approveTypeID == approveTypeID && w.approveDept == deptid && w.empID == empID && w.status_id == 3).FirstOrDefault();
                if(db_data != null)
                {
                    approver = Convert.ToInt32(db_data.empID);
                }
                else
                {
                    approver = 0;
                }
            }
            return approver;
        }

        private int SLDRTLoanApproverEmpId(int? loadID = 0, int? requestID = 0, int? empID = 0)
        {
            int approver;
            int? deptid = 0;
            int? levelid = 0;
            int? approveTypeID = 7;

            using (var db = new db_hrmsEntities())
            {
                deptid = db.v_dept_unit_employee.Where(w => w.empID == requestID).Select(s => s.deptID).FirstOrDefault();
                levelid = db.tb_SLDRT_loanApprove.Where(w => w.SLDRT_loanID == loadID && w.status_ID == 3).Count() + 1;

                var db_data = db.tb_approvalSetting.Where(w => w.appLevel == levelid && w.approveTypeID == approveTypeID && w.approveDept == deptid && w.empID == empID && w.status_id == 3).FirstOrDefault();
                if (db_data != null)
                {
                    approver = Convert.ToInt32(db_data.empID);
                }
                else
                {
                    approver = 0;
                }
            }
            return approver;
        }

        [HttpPost]
        [Route("api/User/ApproveLoan")]
        public LoanListResult ApproveLoan(ApproveLoanParam data)
        {
            var ret = new LoanListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        int deptid;
                        int maxlevel;
                        int savedlevel;

                        var ds_update = db.tb_loan.Where(w => w.loanID == data.loanID).FirstOrDefault();
                        deptid = db.v_dept_unit_employee.Where(w => w.empID == ds_update.empID).Select(s => s.deptID).FirstOrDefault();
                        maxlevel = db.tb_approvalSetting.Where(w => w.approveTypeID == 7 && w.approveDept == deptid && w.status_id == 3).Count();
                        if (ds_update != null && maxlevel > 0)
                        {
                            DateTime dt = DateTime.Now;
                            string loanApproveNo = dt.ToString("yyyyMMddHHmmss") + ds_update.empID;

                            db.tb_loanApprove.Add(new tb_loanApprove
                            {
                                loanApproveNo = loanApproveNo,
                                loanID = data.loanID,
                                noted = data.noted,
                                status_ID = 3,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });

                            db.SaveChanges();

                            //This is save log
                            string logevent = "Approve";
                            string logmodules = "ApproveLoan";
                            string olddata = "";
                            string newdata = "loanApproveNo = " + loanApproveNo + "; loanID " + data.loanID + "; " +
                                "noted " + data.noted + "; user_add " + ds_tokey.userID + "; date_add " + DateTime.Now + ";  status_ID = 2.";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            savedlevel = db.tb_loanApprove.Where(w => w.loanID == data.loanID && w.status_ID == 3).Count();

                            if (savedlevel == maxlevel)
                            {
                                ds_update.approveDate = DateTime.Now;
                                ds_update.status_id = 3;
                                ds_update.user_add = ds_tokey.userID;
                                ds_update.date_add = DateTime.Now;
                                db.SaveChanges();

                                //This is save log
                                logevent = "Approve";
                                logmodules = "ApproveLoan";
                                olddata = "";
                                newdata = "(if (savelevel == maxlevel); user_add = "+ ds_tokey.userID +"; date_add " + DateTime.Now + ";  status_ID = 2.";
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            }

                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApproveLoanHistory")]
        public ApproveLaonHistoryResult ApproveLoanHistory(ApproveLoanHistoryParam data)
        {
            var ret = new ApproveLaonHistoryResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_loanApprove
                                       where c.loanID == data.loanID
                                       orderby c.date_add
                                       select new
                                       {
                                           c.loanApproveNo,
                                           c.noted,
                                           c.user_add,
                                           c.date_add
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<ApproveLoanHistoryViewModelResult> ResultObject = new List<ApproveLoanHistoryViewModelResult>();
                            ResultObject = ds_Data.Select(c => new ApproveLoanHistoryViewModelResult()
                            {
                                approverName = db.tb_employees.Where(w => w.tb_users.Any(usr => usr.userID == c.user_add && usr.status_id == 3)).Select(s => s.firstName2).FirstOrDefault(),
                                noted = c.noted,
                                approveDateTime = Convert.ToDateTime(c.date_add).ToString("dd/MM/yyyy hh:mm tt")
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SaveLoanPayment")]
        public LoanListResult LoanPayment(LoanPaymentParam data)
        {
            var ret = new LoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null && Convert.ToDouble(data.pay_amount) > 0)
                    {
                        var ds_update = (from c in db.tb_loanDetail
                                         where c.loanDetailID == data.loandetailid && c.status_id == 3
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            var ds_mid = (from c in db.tb_loanDetail
                                             where c.loanID == ds_update.loanID orderby c.loanDetailID descending
                                             select c).FirstOrDefault();
                            int mid = ds_mid.loanDetailID;
                            if(data.loandetailid == mid)
                            {
                                if(Convert.ToDouble(ds_update.pay_amount) > Convert.ToDouble(data.pay_amount))
                                {
                                    ret.ModelErrors = data.lang == "1" ? "ກະລຸນາຈ່າຍໃຫ້ຄົບກ່ອນ." : "Please pay full.";
                                    ret.ResultObject = null;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                                }
                            }
                            string olddata = "";
                            double paying = Convert.ToDouble(data.pay_amount) - Convert.ToDouble(ds_update.pay_amount);
                            if(paying > 0)
                            {
                                paying = Convert.ToDouble(ds_update.pay_amount);
                            }
                            else
                            {
                                paying = Convert.ToDouble(data.pay_amount);
                            }
                            olddata = "Pay_amount="+ ds_update.pay_amount + "; paidStatus=" + ds_update.paidStatus + "; user_add=" + ds_tokey.userID + "; date_add=" + ds_update.date_add + ";  ";

                            ds_update.pay_amount = paying;
                            ds_update.paidStatus = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            db.SaveChanges();

                            double ebalance = Convert.ToDouble(ds_update.pay_amount) - Convert.ToDouble(data.pay_amount);
                            if (data.loandetailid != mid & ebalance > 0)
                            {
                                var dbloan = db.tb_loanDetail.Where(w => w.loanID == ds_update.loanID && w.status_id == 3).ToList();
                                dbloan = dbloan.Where(w => w.loanDetailID > data.loandetailid).OrderBy(or => or.loanDetailID).ToList();
                                double totalBL = 0;
                                double acc_balance = 0;
                                double pay_amount = 0;
                                int monthqty = dbloan.Count;
                                totalBL = Convert.ToDouble(ds_update.totalBL) + ebalance;
                                pay_amount = totalBL / monthqty;

                                ds_update.totalBL = totalBL;
                                db.SaveChanges();

                                //This is save log
                                string logevent = "SaveLoan";
                                string logmodules = "SaveLoanPayment";
                                //string olddata = "";
                                string newdata = "totalBL = " + totalBL + ".";
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                                acc_balance = totalBL;

                                foreach (var item in dbloan)
                                {
                                    totalBL = totalBL - pay_amount;
                                    item.acc_balance = acc_balance;
                                    item.pay_amount = pay_amount;
                                    item.totalBL = totalBL;
                                    acc_balance = totalBL;
                                    db.SaveChanges();

                                    //This is save log
                                    logevent = "SaveLoan";
                                    logmodules = "SaveLoanPayment";
                                    //string olddata = "";
                                    newdata = "(Loop Foreach) totalBL = " + totalBL + "; acc_balance = " + acc_balance + "; " +
                                        "pay_amount = " + pay_amount + "; acc_balanceTotal  = " + totalBL + ";  ";
                                    insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                                }
                            }

                            
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        [HttpPost]
        [Route("api/User/SLDRTLoanListMobile")]
        public SLDRTLoanListResult SLDRTLoanListMobile(LoanListParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_SLDRT_loan
                                       where c.empID == data.empid & c.status_id != 2
                                       orderby c.loanStart descending
                                       select new
                                       {
                                           c.SLDRT_loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data.Count > 0)
                        {
                            List<SLDRTLoanListResultObject> ResultObject = new List<SLDRTLoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new SLDRTLoanListResultObject()
                            {
                                SLDRT_loanID = c.SLDRT_loanID.ToString(),
                                empID = c.empID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.loanEnd).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                totalBL = getTotalBLSLDRT(c.SLDRT_loanID, c.totalLoan).ToString("N"),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SLDRTLoanList")]
        public SLDRTLoanListResult SLDRTLoanList(LoanListParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_SLDRT_loan
                                       where c.status_id != 2 orderby c.loanStart descending
                                       select new
                                       {
                                           c.SLDRT_loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data.Count > 0)
                        {
                            List<SLDRTLoanListResultObject> ResultObject = new List<SLDRTLoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new SLDRTLoanListResultObject()
                            {
                                SLDRT_loanID = c.SLDRT_loanID.ToString(),
                                empID = c.empID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.loanEnd).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                totalBL = getTotalBLSLDRT(c.SLDRT_loanID, c.totalLoan).ToString("N"),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SLDRTLoanDetailList")]
        public SLDRTLoanDetailListResult SLDRTLoanDetailList(SLDRTLoanDetailListParam data)
        {
            var ret = new SLDRTLoanDetailListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_SLDRT_loanDetail
                                       where c.SLDRT_loanID == data.SLDRT_loanID && c.status_id == 3
                                       orderby c.SLDRT_loanDetailID
                                       select new
                                       {
                                           c.SLDRT_loanDetailID,
                                           c.tb_SLDRT_loan.tb_employees.empID,
                                           c.tb_SLDRT_loan.tb_employees.empNo,
                                           c.tb_SLDRT_loan.tb_employees.firstName1,
                                           c.tb_SLDRT_loan.tb_employees.firstName2,
                                           c.tb_SLDRT_loan.tb_employees.lastName1,
                                           c.tb_SLDRT_loan.tb_employees.lastName2,
                                           c.monthBL,
                                           c.acc_balance,
                                           c.monthlyPay,
                                           c.loan_incen,
                                           c.pay_amount,
                                           c.totalBL,
                                           c.paidStatus,
                                           c.payDate,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<SLDRTLoanDetailListResultObject> ResultObject = new List<SLDRTLoanDetailListResultObject>();
                            ResultObject = ds_Data.Select(c => new SLDRTLoanDetailListResultObject()
                            {
                                loanDetailID = c.SLDRT_loanDetailID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                section = getUnitName(c.empID),
                                monthBL = Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                acc_balance = Convert.ToDouble(c.acc_balance).ToString("N"),
                                acc_balance2 = Convert.ToDouble(c.acc_balance).ToString("#,##0"),
                                monthlyPay = Convert.ToDouble(c.monthlyPay).ToString("N"),
                                monthlyPay2 = Convert.ToDouble(c.monthlyPay).ToString("#,##0"),
                                loan_incen = Convert.ToDouble(c.loan_incen).ToString("N"),
                                loan_incen2 = Convert.ToDouble(c.loan_incen).ToString("#,##0"),
                                pay_amount = Convert.ToDouble(c.pay_amount).ToString("N"),
                                pay_amount2 = Convert.ToDouble(c.pay_amount).ToString("#,##0"),
                                totalBL = Convert.ToDouble(c.totalBL).ToString("N"),
                                totalBL2 = Convert.ToDouble(c.totalBL).ToString("#,##0"),
                                payDate = c.payDate == null ? "" : Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                payMonth = Convert.ToDateTime(c.monthBL).ToString("MM-yyyy"),
                                paidStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have delegate data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SLDRTLoanPaymentList")]
        public SLDRTLoanListResult SLDRTLoanPaymentList(LoanListParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_SLDRT_loan
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.SLDRT_loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.paidStatus,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data.Count > 0)
                        {
                            List<SLDRTLoanListResultObject> ResultObject = new List<SLDRTLoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new SLDRTLoanListResultObject()
                            {
                                SLDRT_loanID = c.SLDRT_loanID.ToString(),
                                empID = c.empID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                amountLoan = Convert.ToDouble(c.amountLoan).ToString("N"),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = c.payMonth.ToString(),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SLDRTLoanPaymentDetail")]
        public SLDRTLoanDetailListResult SLDRTLoanPaymentDetail(SLDRTLoanDetailListParam data)
        {
            var ret = new SLDRTLoanDetailListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_SLDRT_loanDetail
                                       where c.SLDRT_loanID == data.SLDRT_loanID && c.paidStatus == 1 && c.status_id == 3
                                       orderby c.SLDRT_loanDetailID
                                       select new
                                       {
                                           c.SLDRT_loanDetailID,
                                           c.tb_SLDRT_loan.tb_employees.empID,
                                           c.tb_SLDRT_loan.tb_employees.empNo,
                                           c.tb_SLDRT_loan.tb_employees.firstName1,
                                           c.tb_SLDRT_loan.tb_employees.firstName2,
                                           c.tb_SLDRT_loan.tb_employees.lastName1,
                                           c.tb_SLDRT_loan.tb_employees.lastName2,
                                           c.monthBL,
                                           c.acc_balance,
                                           c.monthlyPay,
                                           c.loan_incen,
                                           c.pay_amount,
                                           c.totalBL,
                                           c.paidStatus,
                                           c.payDate,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<SLDRTLoanDetailListResultObject> ResultObject = new List<SLDRTLoanDetailListResultObject>();
                            ResultObject = ds_Data.Select(c => new SLDRTLoanDetailListResultObject()
                            {
                                loanDetailID = c.SLDRT_loanDetailID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                section = getUnitName(c.empID),
                                monthBL = Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                acc_balance = Convert.ToDouble(c.acc_balance).ToString("N"),
                                acc_balance2 = Convert.ToDouble(c.acc_balance).ToString("#,##0"),
                                monthlyPay = Convert.ToDouble(c.monthlyPay).ToString("N"),
                                monthlyPay2 = Convert.ToDouble(c.monthlyPay).ToString("#,##0"),
                                loan_incen = Convert.ToDouble(c.loan_incen).ToString("N"),
                                loan_incen2 = Convert.ToDouble(c.loan_incen).ToString("#,##0"),
                                pay_amount = Convert.ToDouble(c.pay_amount).ToString("N"),
                                pay_amount2 = Convert.ToDouble(c.pay_amount).ToString("#,##0"),
                                totalBL = Convert.ToDouble(c.totalBL).ToString("N"),
                                totalBL2 = Convert.ToDouble(c.totalBL).ToString("#,##0"),
                                payDate = c.payDate == null ? "" : Convert.ToDateTime(c.monthBL).ToString("yyyy-MM-dd"),
                                payMonth = Convert.ToDateTime(c.monthBL).ToString("MM-yyyy"),
                                paidStatus = c.paidStatus == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewSLDRTLoan")]
        public SLDRTLoanListResult NewSLDRTLoan(NewSLDRTLoanParam data)
        {
            var ret = new SLDRTLoanListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //DateTime dt = DateTime.Now;
                        //string genLeaveRequestNo = dt.ToString("yyyyMMddHHmmss") + data.empID;

                        string Command;
                        int Result;
                        Command = "";

                        Command = " EXEC p_iu_sldrtloan @SLDRT_loanID=0, @empID = " + data.empID + ", @amountLoan=" + data.amountLoan + ", " +
                          " @loanMonth= " + data.loanMonth + ", @requestDate = '" + data.requestDate + "',@loanPercent=" + data.loanPercent + ", " +
                          " @totalLoan=" + data.totalLoan + ", @loanStart='" + data.loanStart + "', " +
                          " @loanEnd = '" + data.loanEnd + "', @LoanReason=N'" + data.LoanReason + "', @loanFile = '" + data.loanFile + "', " +
                          " @user_add=" + ds_tokey.userID + ", @loan_incen=" + data.loan_incen + ",@monthlyAmount=" + data.payMonth + "";

                        WriteLogFile("NewLoan command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }
                        }
                        if (Result == 1)
                        {

                            //This is save log
                            string logevent = "New";
                            string logmodules = "NewSLDRTLoan";
                            string olddata = "";
                            string newdata = "EmpID = " + data.empID + "; amountLoan = " + data.amountLoan + "; loanMonth = " + data.loanMonth + "; " +
                                " requestDate = " + data.requestDate + "; loanpercent = " + data.loanPercent + "; totalLoan = " + data.totalLoan + "; " +
                                " loanstart = " + data.loanStart + "; loanEnd = " + data.loanEnd + "; LoanReason = " + data.LoanReason + "; file = " + data.loanFile + "; " +
                                " user_add  = " + ds_tokey.userID + "; loanIncentie = " + data.loan_incen + "; monthlyamount = " + data.payMonth + ". ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateSLDRTLoan")]
        public SLDRTLoanListResult UpdateSLDRTLoan(UpdateSLDRTLoanParam data)
        {
            var ret = new SLDRTLoanListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //DateTime dt = DateTime.Now;
                        //string genLeaveRequestNo = dt.ToString("yyyyMMddHHmmss") + data.empID;

                        string Command;
                        int Result;
                        Command = "";

                        Command = " EXEC p_iu_sldrtloan @SLDRT_loanID=" + data.SLDRT_loanID + ", @empID = 0, @amountLoan=" + data.amountLoan + ", " +
                          " @loanMonth= " + data.loanMonth + ", @requestDate = '" + DateTime.Now + "',@loanPercent=" + data.loanPercent + ", " +
                          " @totalLoan=" + data.totalLoan + ", @loanStart='" + data.loanStart + "', " +
                          " @loanEnd = '" + data.loanEnd + "', @LoanReason=N'" + data.LoanReason + "', @loanFile = N'" + data.loanFile + "', " +
                          " @user_add=" + ds_tokey.userID + ", @loan_incen=" + data.loan_incen + ",@monthlyAmount=" + data.payMonth + "";

                        WriteLogFile("UpdateLoan command: " + Command);

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                                Result = (int)myCommand.ExecuteScalar();
                            }
                        }
                        if (Result == 1)
                        {
                            //This is save log
                            string logevent = "Update";
                            string logmodules = "UpdateSLDRTLoan";
                            string olddata = "";
                            string newdata = "EmpID = 0; amountLoan = " + data.amountLoan + "; loanMonth = " + data.loanMonth + "; " +
                                " requestDate = " + DateTime.Now + "; loanpercent = " + data.loanPercent + "; totalLoan = " + data.totalLoan + "; " +
                                " loanstart = " + data.loanStart + "; loanEnd = " + data.loanEnd + "; LoanReason = " + data.LoanReason + "; file = " + data.loanFile + "; " +
                                " user_add  = " + ds_tokey.userID + "; loanIncentie = " + data.loan_incen + "; monthlyamount = " + data.payMonth + ". ";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelSLDRTLoan")]
        public SLDRTLoanListResult DelSLDRTLoan(DelSLDRTLoanParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_SLDRT_loan
                                         where c.SLDRT_loanID == data.sldrtloanid
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelSLDRTLoan";
                        string olddata = "";
                        string newdata = "SLDRT_LoanID = " + data.sldrtloanid + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/RejectSLDRTLoan")]
        public SLDRTLoanListResult RejectSLDRTLoan(RejectSLDRTLoanParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_SLDRT_loan
                                         where c.SLDRT_loanID == data.sldrtloanid
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 4;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            db.SaveChanges();
                        }

                        DateTime dt = DateTime.Now;
                        string loanApproveNo = dt.ToString("yyyyMMddHHmmss") + ds_update.empID;

                        db.tb_SLDRT_loanApprove.Add(new tb_SLDRT_loanApprove
                        {
                            ApproveNo = loanApproveNo,
                            SLDRT_loanID = data.sldrtloanid,
                            noted = data.noted,
                            status_ID = 4,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Reject";
                        string logmodules = "RejectSLDRTLoan";
                        string olddata = "";
                        string newdata = "ApproveNo = " + loanApproveNo + "; SLDRT_LoanID = "+ data.sldrtloanid + "; noted = " + data.noted + "; date_add = " + DateTime.Now + ";  status_ID = 4.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "Reject ຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Reject complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SLDRTLoanApproveList")]
        public SLDRTLoanListResult SLDRTLoanApproveList(SLDRTLoanListParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_SLDRT_loan
                                       where c.status_id == 1
                                       select new
                                       {
                                           c.SLDRT_loanID,
                                           c.empID,
                                           c.tb_employees.empNo,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.amountLoan,
                                           c.loanMonth,
                                           c.requestDate,
                                           c.approveDate,
                                           c.loanPercent,
                                           c.totalLoan,
                                           c.loanStart,
                                           c.loanEnd,
                                           c.LoanReason,
                                           c.loanFile,
                                           c.payMonth,
                                           c.status_id
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<SLDRTLoanListResultObject> ResultObject = new List<SLDRTLoanListResultObject>();
                            ResultObject = ds_Data.Select(c => new SLDRTLoanListResultObject()
                            {
                                SLDRT_loanID = c.SLDRT_loanID.ToString(),
                                empID = c.empID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                loanMonth = c.loanMonth.ToString(),
                                requestDate = Convert.ToDateTime(c.requestDate).ToString("yyyy-MM-dd"),
                                requestDate2 = Convert.ToDateTime(c.requestDate).ToString("dd-MM-yyyy"),
                                loanPercent = c.loanPercent.ToString(),
                                totalLoan = Convert.ToDouble(c.totalLoan).ToString("N"),
                                loan_incen = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.loan_incen).FirstOrDefault()).ToString("N"),
                                monthlyamount = Convert.ToDouble(db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == c.SLDRT_loanID && w.status_id == 3).Select(s => s.pay_amount).FirstOrDefault()).ToString("N"),
                                loanStart = Convert.ToDateTime(c.loanStart).ToString("yyyy-MM-dd"),
                                loanStart2 = Convert.ToDateTime(c.loanStart).ToString("dd-MM-yyyy"),
                                loanEnd = Convert.ToDateTime(c.loanEnd).ToString("yyyy-MM-dd"),
                                loanEnd2 = Convert.ToDateTime(c.loanEnd).ToString("dd-MM-yyyy"),
                                LoanReason = c.LoanReason,
                                loanFile = c.loanFile,
                                payMonth = Convert.ToDouble(c.payMonth).ToString("N"),
                                approverEmpId = SLDRTLoanApproverEmpId(c.SLDRT_loanID, c.empID, ds_tokey.empID),
                                payStatus = c.status_id == 1 ? "Pending" : "Approved"
                            }).ToList();
                            ResultObject = ResultObject.Where(w => w.approverEmpId == ds_tokey.empID).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApproveSLDRTLoan")]
        public SLDRTLoanListResult ApproveSLDRTLoan(ApproveSLDRTLoanParam data)
        {
            var ret = new SLDRTLoanListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        int deptid;
                        int maxlevel;
                        int savedlevel;

                        var ds_update = db.tb_SLDRT_loan.Where(w => w.SLDRT_loanID == data.SLDRT_loanID).FirstOrDefault();
                        deptid = db.v_dept_unit_employee.Where(w => w.empID == ds_update.empID).Select(s => s.deptID).FirstOrDefault();
                        maxlevel = db.tb_approvalSetting.Where(w => w.approveTypeID == 7 && w.approveDept == deptid && w.status_id == 3).Count();
                        if (ds_update != null && maxlevel > 0)
                        {
                            DateTime dt = DateTime.Now;
                            string loanApproveNo = dt.ToString("yyyyMMddHHmmss") + ds_update.empID;

                            db.tb_SLDRT_loanApprove.Add(new tb_SLDRT_loanApprove
                            {
                                ApproveNo = loanApproveNo,
                                SLDRT_loanID = data.SLDRT_loanID,
                                noted = data.noted,
                                status_ID = 3,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });

                            db.SaveChanges();

                            savedlevel = db.tb_SLDRT_loanApprove.Where(w => w.SLDRT_loanID == data.SLDRT_loanID && w.status_ID == 3).Count();

                            if (savedlevel == maxlevel)
                            {
                                ds_update.approveDate = DateTime.Now;
                                ds_update.status_id = 3;
                                ds_update.user_add = ds_tokey.userID;
                                ds_update.date_add = DateTime.Now;
                                db.SaveChanges();
                            }

                            //This is save log
                            string logevent = "Approve";
                            string logmodules = "ApproveSLDRTLoan";
                            string olddata = "";
                            string newdata = "ApproveNo = " + loanApproveNo + "; SLDRT_LoanID = "+ data.SLDRT_loanID +"; " +
                                " user_add = " + ds_tokey.userID + "; date_add = "+ DateTime.Now +"; approveDate = "+ DateTime.Now +"; status_ID = 3.";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Save complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Save data error...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/SaveSLDRTLoanPayment")]
        public SLDRTLoanListResult SaveSLDRTLoanPayment(SLDRTLoanPaymentParam data)
        {
            var ret = new SLDRTLoanListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null && Convert.ToDouble(data.pay_amount) > 0)
                    {
                        var ds_update = (from c in db.tb_SLDRT_loanDetail
                                         where c.SLDRT_loanDetailID == data.sldrtloandetailid && c.status_id == 3
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            var ds_mid = (from c in db.tb_SLDRT_loanDetail
                                          where c.SLDRT_loanID == ds_update.SLDRT_loanID
                                          orderby c.SLDRT_loanDetailID descending
                                          select c).FirstOrDefault();
                            int mid = ds_mid.SLDRT_loanDetailID;
                            if (data.sldrtloandetailid == mid)
                            {
                                if (Convert.ToDouble(ds_update.pay_amount) > Convert.ToDouble(data.pay_amount))
                                {
                                    ret.ModelErrors = data.lang == "1" ? "ກະລຸນາຈ່າຍໃຫ້ຄົບກ່ອນ." : "Please pay full.";
                                    ret.ResultObject = null;
                                    ret.StatusCode = 200;
                                    ret.IsSuccess = true;
                                    ret.CommonErrors = null;
                                    return ret;
                                }
                            }
                            double paying = Convert.ToDouble(data.pay_amount) - Convert.ToDouble(ds_update.pay_amount);
                            if (paying > 0)
                            {
                                paying = Convert.ToDouble(ds_update.pay_amount);
                            }
                            else
                            {
                                paying = Convert.ToDouble(data.pay_amount);
                            }

                            string olddata = "";
                            olddata = "pay_amount = "+ ds_update.pay_amount +"; user_add="+ds_tokey.userID +"; date_add="+ DateTime.Now +".";
                            ds_update.pay_amount = paying;
                            ds_update.paidStatus = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            db.SaveChanges();

                            //This is save log
                            string logevent = "Save";
                            string logmodules = "SaveSLDRTLoanPayment";
                            //string olddata = "";
                            string newdata = "pay_amount = " + paying + "; user_add=" + ds_tokey.userID + "; date_add=" + DateTime.Now + ".";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                            double ebalance = Convert.ToDouble(ds_update.pay_amount) - Convert.ToDouble(data.pay_amount);
                            if (data.sldrtloandetailid != mid & ebalance > 0)
                            {
                                var dbloan = db.tb_SLDRT_loanDetail.Where(w => w.SLDRT_loanID == ds_update.SLDRT_loanID && w.status_id == 3).ToList();
                                dbloan = dbloan.Where(w => w.SLDRT_loanDetailID > data.sldrtloandetailid).OrderBy(or => or.SLDRT_loanDetailID).ToList();
                                double totalBL = 0;
                                double acc_balance = 0;
                                double pay_amount = 0;
                                int monthqty = dbloan.Count;
                                totalBL = Convert.ToDouble(ds_update.totalBL) + ebalance;
                                pay_amount = totalBL / monthqty;

                                ds_update.totalBL = totalBL;
                                db.SaveChanges();

                                //This is save log
                                logevent = "Save";
                                logmodules = "SaveSLDRTLoanPayment";
                                //string olddata = "";
                                newdata = "pay_amount = " + pay_amount + "; totalBL = "+ totalBL +".";
                                insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                                acc_balance = totalBL;

                                foreach (var item in dbloan)
                                {
                                    totalBL = totalBL - pay_amount;
                                    item.acc_balance = acc_balance;
                                    item.pay_amount = pay_amount;
                                    item.totalBL = totalBL;
                                    acc_balance = totalBL;
                                    db.SaveChanges();

                                    //This is save log
                                    logevent = "Save";
                                    logmodules = "SaveSLDRTLoanPayment";
                                    //string olddata = "";
                                    newdata = "(Foreach Loop) totalBL = " + totalBL + "; acc_balance = " + acc_balance + "; pay_amount="+ pay_amount +"; acc_balance = "+ totalBL +".";
                                    insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                                }
                            }
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApproveLeaveHistory")]
        public ApproveRequestHistoryResult ApproveLeaveHistory(ApproveRequestHistoryParam data)
        {
            var ret = new ApproveRequestHistoryResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_leaveApprove
                                       where c.leaveRequestID == data.RequestID
                                       orderby c.date_add
                                       select new
                                       {
                                           c.leaveApproveID,
                                           c.leaveApproveNo,
                                           c.noted,
                                           c.user_add,
                                           c.date_add,
                                           c.tb_leaveRequest.empID
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<ApproveRequestHistoryViewModelResult> ResultObject = new List<ApproveRequestHistoryViewModelResult>();
                            ResultObject = ds_Data.Select(c => new ApproveRequestHistoryViewModelResult()
                            {
                                approverName = db.tb_employees.Where(w => w.tb_users.Any(usr => usr.userID == c.user_add && usr.status_id == 3)).Select(s => s.firstName1).FirstOrDefault(),
                                noted = c.noted,
                                approveDateTime = Convert.ToDateTime(c.date_add).ToString("dd/MM/yyyy hh:mm tt")
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApproveOTHistory")]
        public ApproveRequestHistoryResult ApproveOTHistory(ApproveRequestHistoryParam data)
        {
            var ret = new ApproveRequestHistoryResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_otApprove
                                       where c.otRequestID == data.RequestID
                                       orderby c.date_add
                                       select new
                                       {
                                           c.otApproveID,
                                           c.otApproveNo,
                                           c.noted,
                                           c.user_add,
                                           c.date_add
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<ApproveRequestHistoryViewModelResult> ResultObject = new List<ApproveRequestHistoryViewModelResult>();
                            ResultObject = ds_Data.Select(c => new ApproveRequestHistoryViewModelResult()
                            {
                                approverName = db.tb_employees.Where(w => w.tb_users.Any(usr => usr.userID == c.user_add && usr.status_id == 3)).Select(s => s.firstName1).FirstOrDefault(),
                                noted = c.noted,
                                approveDateTime = Convert.ToDateTime(c.date_add).ToString("dd/MM/yyyy hh:mm tt")
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        #region DashBoard
        [HttpPost]
        [Route("api/User/DBLeaveDay")]
        public checkleaveRequestListResult DBLeaveDay(checkleaveRequestListParam data)
        {
            var ret = new checkleaveRequestListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_leaveType
                                       where c.status_ID == 3
                                       orderby c.leaveTypeID
                                       select new
                                       {
                                           c.leaveTypeID,
                                           c.leaveTypeCode,
                                           c.leaveTypeName1,
                                           c.leaveTypeName2
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<checkleaveRequestListViewModelResult> ResultObject = new List<checkleaveRequestListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new checkleaveRequestListViewModelResult()
                            {
                                leavetypeid = c.leaveTypeID.ToString(),
                                leavetypename = data.lang == "1" ? c.leaveTypeName1 : c.leaveTypeName2,
                                leaveadd = addleave(c.leaveTypeID, data.empID),
                                leaveuse = useleave(c.leaveTypeID, data.empID),
                                leavebalance = gleavebalance.ToString()
                            }).ToList();
                            ResultObject = ResultObject.Where(w => w.leaveadd != "0").ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No leave data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DBOT")]
        public DBOTListResult DBOT(DBOTListParam data)
        {
            var ret = new DBOTListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_otRequest
                                       where Convert.ToDateTime(c.startDate).Month >= DateTime.Now.Month -1 && c.empID == data.empID && c.status_ID == 3
                                       orderby c.startDate descending
                                       select new
                                       {
                                           c.otRequestID,
                                           c.startDate,
                                           c.endDate,
                                           c.otStartTime,
                                           c.otEndTime
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<DBOTListViewModelResult> ResultObject = new List<DBOTListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new DBOTListViewModelResult()
                            {
                                otdate = Convert.ToDateTime(c.startDate).ToString("dd/MM/yyyy"),
                                starttime = Convert.ToDateTime(c.otStartTime).ToString("HH:mm"),
                                endtime = Convert.ToDateTime(c.otEndTime).ToString("HH:mm"),
                                hourqty = db.tb_otRequestDetail.Where(w => w.otRequestID == c.otRequestID).Sum(s => s.qtyHour).ToString()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }
        #endregion

        private string addleave(int? typeid = 0, int? empid = 0)
        {
            double? leaveqty = 0;
            gleavebalance = 0;
            gaddleave = 0;
            guseleave = 0;


            using (var db = new db_hrmsEntities())
            {
                /*this is query get expDate*/
                var ds_expdate = (from dx in db.tb_leaveRequest
                                  where dx.empID == empid
                                  orderby dx.leaveRequestID descending
                                  select new
                                  {
                                      dx.expDate
                                  }).FirstOrDefault();


                leaveqty = db.tb_leaveRequest.Where(w => w.empID == empid && w.leaveTypeID == typeid && w.transactionType == 1 && w.status_ID == 3 && w.expDate == ds_expdate.expDate).Sum(s => s.amountDay);
                gaddleave = leaveqty == null ? 0 : leaveqty;
                return Convert.ToString(leaveqty == null ? 0 : leaveqty);
            }
        }
        private string useleave(int? typeid = 0, int? empid = 0)
        {
            double? leaveqty = 0;
            gleavebalance = 0;

            //update new code
            string sYear = DateTime.Now.Year.ToString();
            int xyear = int.Parse(sYear);

            using (var db = new db_hrmsEntities())
            {
                leaveqty = db.v_leaverequest.Where(w => w.empID == empid && w.leaveTypeID == typeid && w.transactionType == 3 && w.status_ID == 3 && w.startyear==xyear).Sum(s => s.amountDay);
                guseleave = leaveqty == null ? 0 : leaveqty;
                if(gaddleave > 0)
                {
                    gleavebalance = gaddleave - (guseleave < 0 ? -(guseleave) : guseleave);
                }
                return Convert.ToString(leaveqty == null ? 0 : leaveqty);
            }
        }

        [HttpPost]
        [Route("api/User/EmployeeUnderManager")]
        public EmpployeeUnderListResult EmployeeUnderManager(EmpployeeUnderListParam data)
        {
            var ret = new EmpployeeUnderListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //var ds_data = (from c in db.v_dept_unit_employee
                        //               where c.mgrid == ds_tokey.empID && c.status_id == 3
                        //               select new
                        //               {
                        //                   c.empID,
                        //                   c.firstName1,
                        //                   c.firstName2,
                        //                   c.lastName1,
                        //                   c.lastName2
                        //               }).Distinct().ToList();
                        var ds_data = (from c in db.tb_employees
                                        where (c.rqApproval1 == ds_tokey.empID || c.rqApproval2 == ds_tokey.empID || c.rqApproval3 == ds_tokey.empID) && c.status_id == 3
                                        select new
                                        {
                                            c.empID,
                                            c.firstName1,
                                            c.firstName2,
                                            c.lastName1,
                                            c.lastName2
                                        }).Distinct().ToList();

                        if (ds_data.Count > 0)
                        {
                            List<EmpployeeUnderListModelResult> ResultObject = new List<EmpployeeUnderListModelResult>();
                            ResultObject = ds_data.Where(w => w.empID != ds_tokey.empID).Select(c => new EmpployeeUnderListModelResult()
                            {
                                empID = c.empID.ToString(),
                                empName = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmployeeUnderResponse")]
        public EmpployeeUnderListResult EmployeeUnderResponse(EmpployeeUnderListParam data)
        {
            var ret = new EmpployeeUnderListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {

                        //int? depID = db.v_dept_unit_employee.Where(w => w.empID == ds_tokey.empID && w.status_id == 3).Select(s => s.companyID).FirstOrDefault();
                        //  int? depID = db.v_dept_unit_employee.Where(w => w.empID == ds_tokey.empID && w.status_id == 3).Select(s => s.deptID).FirstOrDefault();
                        //var ds_data = (from c in db.v_dept_unit_employee
                        //                   //where c.companyID == depID && c.status_id == 3
                        //                   //  where c.deptID == depID && c.status_id == 3
                        //               select new
                        //               {
                        //                   c.empID,
                        //                   c.firstName1,
                        //                   c.firstName2,
                        //                   c.lastName1,
                        //                   c.lastName2
                        //               }).Distinct().ToList();
                        var ds_data = (from c in db.v_mgr_emp
                                       where c.empid1 == ds_tokey.empID
                                       select new
                                       {
                                           c.empID,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2,
                                           c.mgrfirstName1,
                                           c.mgrlastName1
                                       }).Distinct().ToList();
                        if (ds_data.Count > 0)
                        {
                            List<EmpployeeUnderListModelResult> ResultObject = new List<EmpployeeUnderListModelResult>();
                            ResultObject = ds_data.Where(w => w.empID != ds_tokey.empID).Select(c => new EmpployeeUnderListModelResult()
                            {
                                empID = c.empID.ToString(),
                                //empName = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2
                                empName =  c.mgrfirstName1 + " " + c.mgrlastName1
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/EmployeeUnderResponse1")]
        public EmpployeeUnderListResult EmployeeUnderResponse1(EmpployeeUnderListParam data)
        {
            var ret = new EmpployeeUnderListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //int? depID = db.v_dept_unit_employee.Where(w => w.empID == ds_tokey.empID && w.status_id == 3).Select(s => s.companyID).FirstOrDefault();
                        int? depID = db.v_dept_unit_employee.Where(w => w.empID == ds_tokey.empID && w.status_id == 3).Select(s => s.deptID).FirstOrDefault();
                        var ds_data = (from c in db.v_dept_unit_employee
                                           //where c.companyID == depID && c.status_id == 3
                                       where c.deptID == depID && c.status_id == 3
                                       select new
                                       {
                                           c.empID,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2
                                       }).Distinct().ToList();
                        if (ds_data.Count > 0)
                        {
                            List<EmpployeeUnderListModelResult> ResultObject = new List<EmpployeeUnderListModelResult>();
                            ResultObject = ds_data.Where(w => w.empID != ds_tokey.empID).Select(c => new EmpployeeUnderListModelResult()
                            {
                                empID = c.empID.ToString(),
                                empName = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }



        [HttpPost]
        [Route("api/User/RoleList")]
        public RoleListResult RoleList(RoleListParam data)
        {
            var ret = new RoleListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_app_role
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.roleId,
                                           c.roleName
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<RoletViewModelResult> ResultObject = new List<RoletViewModelResult>();
                            ResultObject = ds_Data.Select(c => new RoletViewModelResult()
                            {
                                roleID = c.roleId.ToString(),
                                roleName = c.roleName
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have delegate data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewRole")]
        public RoleListResult NewRole(NewRoleParam data)
        {
            var ret = new RoleListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        int roleNo = db.tb_role.Where(w => w.roleID > 0).Count() + 1;

                        db.tb_app_role.Add(new tb_app_role
                        {
                            roleName = data.roleName,
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();
                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewRole";
                        string olddata = "";
                        string newdata = "roleName = " + data.roleName + "; user_add = " + ds_tokey.userID + "; date_add = " + DateTime.Now + "; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdateRole")]
        public RoleListResult UpdateRole(UpdateRoleParam data)
        {
            var ret = new RoleListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_app_role
                                         where c.roleId == data.roleID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "RoleName = " + ds_update.roleName + "; user_add =" + ds_update.user_add + "; date_add=" + ds_update.date_add + ";  status_ID = 3.";
                            ds_update.roleName = data.roleName;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateRole";
                        //string olddata = "";
                        string newdata = "RoleName = " + data.roleName + "; user_add ="+ ds_tokey.userID + "; date_add=" + DateTime.Now+ ";  status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelRole")]
        public RoleListResult DelRole(DelRoleParam data)
        {
            var ret = new RoleListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_app_role
                                         where c.roleId == data.roleID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();
                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelRole";
                        string olddata = "";
                        string newdata = "roleID = " + data.roleID + "; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PermissionList")]
        public PermissionListResult PermissionList(PermissionListParam data)
        {
            var ret = new PermissionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_app_permission
                                       where c.status_id == 3
                                       select new
                                       {
                                           c.app_permissionId,
                                           c.app_permissionName
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<PermissiontViewModelResult> ResultObject = new List<PermissiontViewModelResult>();
                            ResultObject = ds_Data.Select(c => new PermissiontViewModelResult()
                            {
                                permissionID = c.app_permissionId.ToString(),
                                permissionName = c.app_permissionName.ToString()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have delegate data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewPermission")]
        public PermissionListResult NewPermission(NewPermissionParam data)
        {
            var ret = new PermissionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        db.tb_app_permission.Add(new tb_app_permission
                        {
                            app_permissionName = data.permissionName,
                            status_id = 3,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewPermission";
                        string olddata = "";
                        string newdata = "app_permissionName = " + data.permissionName + "; date_add="+ DateTime.Now +"; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UpdatePermisstion")]
        public PermissionListResult UpdatePermisstion(UpdatePermissionParam data)
        {
            var ret = new PermissionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    string olddata = "";
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_app_permission
                                         where c.app_permissionId == data.permissionID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            olddata = "app_permissionName = " + ds_update.app_permissionName + "; user_add="+ ds_update.user_add +"; date_add =" + ds_update.date_add + "; status_ID = 3.";
                            ds_update.app_permissionName = data.PermissionName;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewPermission";
                        //string olddata = "";
                        string newdata = "permissionid = " + data.permissionID + "; permissioname="+ data.PermissionName +"; date_add=" + DateTime.Now + "; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelPermission")]
        public PermissionListResult DelPermission(DelPermissionParam data)
        {
            var ret = new PermissionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_app_permission
                                         where c.app_permissionId == data.permissionID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelPermission";
                        string olddata = "";
                        string newdata = "permissionid = " + data.permissionID + "; user_add="+ ds_tokey.userID +"; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/RolePermissionList")]
        public RolPermissionListResult RolePermissionList(RolePermissionListParam data)
        {
            var ret = new RolPermissionListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_app_permission
                                       orderby c.app_permissionName
                                       select new
                                       {
                                           c.app_permissionId,
                                           c.app_permissionName
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<RolPermissionListModelResult> ResultObject = new List<RolPermissionListModelResult>();
                            ResultObject = ds_Data.Select(c => new RolPermissionListModelResult()
                            {
                                roleId = data.roleID.ToString(),
                                app_permissionId = c.app_permissionId.ToString(),
                                app_permissionName = c.app_permissionName,
                                app_view = getRolePermission(data.roleID, c.app_permissionId),
                                app_add = setadd,
                                app_edit = setedit,
                                app_del = setdel,
                                app_action = setact,
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Data is not found...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private string getRolePermission(int roleid = 0, int perid = 0)
        {
            using (var db = new db_hrmsEntities())
            {
                var ds_Data = (from c in db.tb_app_role_permission
                               where c.roleId == roleid && c.app_permissionId == perid && c.status_id == 3
                               select new
                               {
                                   c.app_view,
                                   c.app_add,
                                   c.app_edit,
                                   c.app_del,
                                   c.app_action
                               }).FirstOrDefault();
                if (ds_Data != null)
                {
                    setview = ds_Data.app_view == null ? "0" : ds_Data.app_view.ToString();
                    setadd = ds_Data.app_add == null ? "0" : ds_Data.app_add.ToString();
                    setedit = ds_Data.app_edit == null ? "0" : ds_Data.app_edit.ToString();
                    setdel = ds_Data.app_del == null ? "0" : ds_Data.app_del.ToString();
                    setact = ds_Data.app_action == null ? "0" : ds_Data.app_action.ToString();
                }
                else
                {
                    setview = "0";
                    setadd = "0";
                    setedit = "0";
                    setdel = "0";
                    setact = "0";
                }
            }
            return setview;
        }

        [HttpPost]
        [Route("api/User/NewUpdateRolePermission")]
        public RolPermissionListResult NewUpdateRolePermission(NewRolePermissionListParam data)
        {
            var ret = new RolPermissionListResult();
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.userID
                                    }).FirstOrDefault();
                    string appview = "";
                    string apdd = "";
                    string aedit = "";
                    string adel = "";
                    string apaction = "";

                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_app_role_permission
                                         where c.roleId == data.roleId && c.app_permissionId == data.app_permissionId
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            if (data.appname.ToLower() == "view")
                            {
                                ds_update.app_view = data.appvalue == null ? 0 : data.appvalue;
                            }
                            else if (data.appname.ToLower() == "add")
                            {
                                ds_update.app_add = data.appvalue == null ? 0 : data.appvalue;
                            }
                            else if (data.appname.ToLower() == "edit")
                            {
                                ds_update.app_edit = data.appvalue == null ? 0 : data.appvalue;
                            }
                            else if (data.appname.ToLower() == "del")
                            {
                                ds_update.app_del = data.appvalue == null ? 0 : data.appvalue;
                            }
                            else if (data.appname.ToLower() == "action")
                            {
                                ds_update.app_action = data.appvalue == null ? 0 : data.appvalue;
                            }
                            ds_update.status_id = 3;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;

                            appview = ds_update.app_view.ToString();
                            apdd = ds_update.app_add.ToString();
                            aedit = ds_update.app_edit.ToString();
                            adel = ds_update.app_del.ToString();
                            apaction = ds_update.app_del.ToString();
                        }
                        else
                        {
                            db.tb_app_role_permission.Add(new tb_app_role_permission
                            {
                                roleId = data.roleId,
                                app_permissionId = data.app_permissionId,
                                app_view = data.appname.ToLower() == "view" ? data.appvalue : 0,
                                app_add = data.appname.ToLower() == "add" ? data.appvalue : 0,
                                app_edit = data.appname.ToLower() == "edit" ? data.appvalue : 0,
                                app_del = data.appname.ToLower() == "del" ? data.appvalue : 0,
                                app_action = data.appname.ToLower() == "action" ? data.appvalue : 0,
                                status_id = 3,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewUpdateRolePermission";
                        string olddata = "";
                        string newdata = "AppermissionID = "+ data.app_permissionId +"; RoleID = " + data.roleId + "; app_view ="+ appview +"; app_add="+ apdd +"; appedit = "+ aedit +"; app_del = "+ adel +"; appaction = "+ apaction +"; status_ID = 3.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);



                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/RolePermissionAccess")]
        public GetRolPermissionListResult RolePermissionAccess(GetRolePermissionListParam data)
        {
            var ret = new GetRolPermissionListResult();
            var ResultObject = new GetRolPermissionListModelResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.roleId
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_app_role_permission
                                       where c.roleId == ds_tokey.roleId && c.app_permissionId == data.app_permissionId && c.status_id == 3
                                       select new
                                       {
                                           c.app_view,
                                           c.app_add,
                                           c.app_edit,
                                           c.app_del,
                                           c.app_action
                                       }).FirstOrDefault();
                        if (ds_Data != null)
                        {
                            ResultObject.app_view = ds_Data.app_view.ToString();
                            ResultObject.app_add = ds_Data.app_add.ToString();
                            ResultObject.app_edit = ds_Data.app_edit.ToString();
                            ResultObject.app_del = ds_Data.app_del.ToString();
                            ResultObject.app_action = ds_Data.app_action.ToString();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ResultObject.app_view = "0";
                            ResultObject.app_add = "0";
                            ResultObject.app_edit = "0";
                            ResultObject.app_del = "0";
                            ResultObject.app_action = "0";
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        protected string GetPosition(string get_empid)
        {
            string ret = "";
            try
            {
                int newEmpid = int.Parse(get_empid.ToString());
                using (var db = new db_hrmsEntities())
                {
                    var ds = (from c in db.v_employess
                              where c.empID == newEmpid
                              select new
                              {
                                  c.empPosition
                              }).FirstOrDefault();
                    if (ds != null)
                    {
                        ret = ds.empPosition == null ? "" : ds.empPosition.ToString();
                    }
                }

                return ret;
            } catch
            {
                return ret;
            }
        } 

        [HttpPost]
        [Route("api/User/UserList")]
        public UserListResult UserList(UserListParam data)
        {
            var ret = new UserListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_users
                                       where c.status_id == 3 & c.username != "admin"
                                       orderby c.username
                                       select new
                                       {
                                           c.userID,
                                           c.username,
                                           c.empID,
                                           c.tb_employees.firstName1,
                                           c.tb_employees.firstName2,
                                           c.tb_employees.lastName1,
                                           c.tb_employees.lastName2,
                                           c.roleID,
                                           c.tb_app_role.roleName,
                                           c.expDate,
                                           c.tb_employees.empNo
                                       }).ToList();
                        //if(data.roleid > 0)
                        //{
                        //    ds_Data = ds_Data.Where(w => w.roleID == data.roleid).ToList();
                        //}
                        if (ds_Data != null)
                        {
                            List<UserViewModelResult> ResultObject = new List<UserViewModelResult>();
                            ResultObject = ds_Data.Select(c => new UserViewModelResult()
                            {
                                userID = c.userID.ToString(),
                                username = c.username,
                                empid = c.empID.ToString(),
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                roleid = c.roleID.ToString(),
                                rolename = c.roleName,
                                expiredate = Convert.ToDateTime(c.expDate).ToString("dd-MM-yyyy"),
                                expiredate2 = Convert.ToDateTime(c.expDate).ToString("yyyy-MM-dd"),
                                empNo = c.empNo.ToString(),
                                empPosition = GetPosition(c.empID.ToString())
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/UserEmployeeList")]
        public UserEmployeeListResult UserEmployeeList(UserEmployeeListParam data)
        {
            var ret = new UserEmployeeListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.v_employess
                                       where c.empID != ds_tokey.empID && c.status_id ==3
                                       orderby c.firstName2
                                       select new
                                       {
                                           c.empID,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2
                                       }).ToList();

                        if (ds_Data != null)
                        {
                            List<UserEmployeeListViewModelResult> ResultObject = new List<UserEmployeeListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new UserEmployeeListViewModelResult()
                            {
                                empid = c.empID.ToString(),
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/NewUser")]
        public UserListResult NewUser(NewUserParam data)
        {
            var ret = new UserListResult();
            string userpwd ="";
            string userencode="";
            int password_length = 16;
            int pass_complex = 1;
            int pass_hit = 24;
            int pass_expDay = 120;

            DateTime today = DateTime.Now;
            DateTime dateExp = today.AddDays(pass_expDay);
 

            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID,
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ckh_user = (from c in db.tb_users
                                       where (c.empID == data.empID) && c.status_id ==3
                                       select new
                                       {
                                           c.userID
                                       }).FirstOrDefault();

                        
                        if (ckh_user != null)
                        {
                            ret.ModelErrors = data.username + " user is existing. Try again...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Existing user.";
                            return ret;
                        }
                        

                        var ds = (from c in db.tb_secure_setting
                                  where c.status_id == 3
                                  select new
                                  {
                                      c.password_length,
                                      c.pass_complex,
                                      c.pass_hit,
                                      c.pass_expDay
                                  }).FirstOrDefault();
                        //This is get password, both random password and encrypt password                        
                        if (ds != null)
                        {
                            password_length = ds.password_length;
                            pass_complex = ds.pass_complex;
                            pass_hit = ds.pass_hit;
                            pass_expDay = ds.pass_expDay;
                            dateExp = today.AddDays(pass_expDay);
                        }

                        int nloop = 0;

                        while (nloop < 1)
                        {
                            userpwd = RandomString(password_length, pass_complex);
                            userencode = Base64Encode(userpwd + data.username.ToLower());

                            //check pwd history
                            var ds_pass = (from c in db.tb_pass_history
                                           where (c.username == data.username && c.pwd == userencode)
                                           select new
                                           {
                                               c.passID,
                                               c.username
                                           }).FirstOrDefault();

                            if (ds_pass != null)
                            {
                                userpwd = RandomString(password_length, pass_complex);
                                userencode = userpwd + data.username.ToLower();
                                userencode = Base64Encode(userencode);
                                nloop = 0;
                            }
                            else
                            {
                                nloop = 1;
                            }
                        }
                        


                        db.tb_users.Add(new tb_users
                        {
                            username = data.username,
                            pwd = userencode,
                            empID = data.empID,
                            roleID = data.roleID,
                            appTokenKey = "",
                            webTokenKey = "",
                            Device_token = "",
                            sendNoti = 0,
                            status_id = 3,
                            strDate = today,
                            expDate = data.expDate,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });

                        db.SaveChanges();

                        //This is save log
                        string logevent = "New";
                        string logmodules = "NewUser";
                        string olddata = "";
                        string newdata = "username = " + data.username + "; empId = " + data.empID + "; roleID = " + data.roleID + "; strdate="+ today+ "; expdate = " + data.expDate + ";  status_ID = 2, Password ="+ userpwd +"";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        db.tb_pass_history.Add(new tb_pass_history
                        {
                            username = data.username,
                            pwd = userencode,
                            user_add = ds_tokey.userID,
                            date_add = DateTime.Now
                        });
                        db.SaveChanges();
                        
                        //send email user name & password to the user
                        var ds_Email = (from c in db.tb_employees
                                        where (c.empID == data.empID)
                                        select new
                                        {
                                            c.empEmail,
                                            c.firstName2,
                                            c.lastName2
                                        }).FirstOrDefault();
                        if (ds_Email.empEmail != null && ds_Email.empEmail != "")
                        {
                            string str = "Hi, " + ds_Email.firstName2 + " " + ds_Email.lastName2 + Environment.NewLine + 
                                "User login: " + data.username + " and password: " + userpwd;

                            Boolean isSendMail = SendMeail(ds_Email.empEmail, "Your new HRM user login and password.", str, "", data.empID.ToString(), ds_tokey.empID.ToString(), true, "");
                        }

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ບັນທຶກຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Save complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private static Random random = new Random();
        public static string RandomString(int length, int passComplex)
        {
            string anUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZZ";
            string aLowerCase = "abcdefghijklmnopqrstuvwxyz";
            string aNumber = "0123456789";
            string aSpecial = "!@#$%^&*()-_]";
            string chars = anUpperCase + aNumber + aSpecial + aLowerCase;
            if (passComplex == 0)
            {
                anUpperCase = "abcdefghijklmnopqrstuvwxyz";
                aLowerCase = "";
                aNumber = "0123456789";
                aSpecial = "";
                chars = anUpperCase + aNumber;
            }

            //string nubr = DateTime.Now.ToString("yyyyddmmss");
            //string chars = "ABcdEfgHijKlM@" + nubr + "nOpqRsTuVwxYZ";

            
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        [HttpPost]
        [Route("api/User/UpdateUser")]
        public UserListResult UpdateUser(UpdateUserParam data)
        {
            var ret = new UserListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_users
                                         where c.userID == data.userID
                                         select c).FirstOrDefault();
                        string olddata = "";
                        if (ds_update != null)
                        {
                            olddata = "username = "+ ds_update.username +"; roleID = "+ ds_update.roleID +"; expdate="+ ds_update.expDate +"; user_add="+ ds_update.user_add +"; date_add="+ds_update.date_add +".";
                            ds_update.username = data.username;
                            ds_update.roleID = data.roleID;
                            ds_update.expDate = data.expDate;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }
                        db.SaveChanges();

                        //This is save log
                        string logevent = "Update";
                        string logmodules = "UpdateUser";
                        //string olddata = "";
                        string newdata = "username = " + data.username + "; roleID = " + data.roleID + "; expdate=" + data.expDate + "; user_add=" + ds_tokey.userID + "; date_add=" + DateTime.Now + ".";

                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ອັບແດບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Update complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/DelUser")]
        public UserListResult DelUser(DelUserParam data)
        {
            var ret = new UserListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_users
                                         where c.userID == data.userID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.status_id = 2;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                        }

                        db.SaveChanges();

                        //This is save log
                        string logevent = "Delete";
                        string logmodules = "DelUser";
                        string olddata = "";
                        string newdata = "userid = " + data.userID + "; date_add="+ DateTime.Now +"; status_ID = 2.";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "ລຶບຂໍ້ມູນສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Delete complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ResetUserPwd")]
        public UserListResult ResetUserPwd(ResetUserPwdParam data)
        {
            var ret = new UserListResult();
            string userpwd = "";
            int password_length = 16;
            int pass_complex = 1;
            int pass_hit = 24;
            int pass_expDay = 120;
            DateTime today = DateTime.Now;
            DateTime dateExp = today.AddDays(pass_expDay);
            string emailAddress = "";
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_update = (from c in db.tb_users
                                         where c.userID == data.userID
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            int nloop = 0;
                            string userencode = "";


                            var ds = (from c in db.tb_secure_setting
                                      where c.status_id == 3
                                      select new
                                      {
                                          c.password_length,
                                          c.pass_complex,
                                          c.pass_hit,
                                          c.pass_expDay
                                      }).FirstOrDefault();
                            if (ds != null)
                            {
                                password_length = ds.password_length;
                                pass_complex = ds.pass_complex;
                                pass_hit = ds.pass_hit;
                                pass_expDay = ds.pass_expDay;
                                dateExp = today.AddDays(pass_expDay);
                            }

                            string Command;

                            Command = " EXEC p_tmp_pass @username = N'" + ds_update.username.ToLower() + "', @pass_hit='" + pass_hit + "' ";

                            using (SqlConnection myConnection = new SqlConnection(connectionString))
                            {
                                myConnection.Open();
                                using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                                {
                                 //   Result = (int)myCommand.ExecuteScalar();
                                }
                            }

                            while (nloop < 1)
                            {
                                userpwd = RandomString(password_length, pass_complex);
                                userencode = Base64Encode(userpwd + ds_update.username.ToLower());

                                //check pwd history
                                var ds_pass = (from c in db.tmp_pass
                                               where (c.username == ds_update.username.ToLower() && c.pwd == userencode)
                                               select new
                                               {                                               
                                                   c.username
                                               }).FirstOrDefault();

                                if (ds_pass != null)
                                {
                                    userpwd = RandomString(password_length, pass_complex);
                                    userencode = userpwd + ds_update.username.ToLower();
                                    userencode = Base64Encode(userencode);
                                    nloop = 0;
                                }
                                else
                                {
                                    nloop = 1;
                                }
                            }

                            ds_update.pwd = userencode;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.expDate = dateExp;
                            db.SaveChanges();

                            db.tb_pass_history.Add(new tb_pass_history
                            {
                                username = ds_update.username.ToLower(),
                                pwd = userencode,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });
                            db.SaveChanges();
                        }
                        else
                        {
                            ret.ModelErrors = "User data is not found...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "User data is not found...!";
                            return ret;
                        }

                        //send email user name & password to the user
                        var ds_Email = (from c in db.tb_employees
                                        where (c.empID == ds_update.empID)
                                        select new
                                        {
                                            c.empEmail,
                                            c.firstName2,
                                            c.lastName2
                                        }).FirstOrDefault();
                        if (ds_Email.empEmail != null && ds_Email.empEmail != "")
                        {
                            emailAddress = ds_Email.empEmail.ToString().ToLower();
                        } else
                        {
                            emailAddress = "hrmsystem@laoworldpublic.com";
                        }

                            string str = "Hi, " + ds_Email.firstName2 + " " + ds_Email.lastName2 + Environment.NewLine +
                                " Your User name is: " + ds_update.username.ToString() + Environment.NewLine +
                                " Your new password is: " + userpwd + Environment.NewLine;
                            Boolean isSendMail = SendMeail(emailAddress, "Reset your HRM password.", str, "", ds_update.empID.ToString(), ds_tokey.empID.ToString(), true, "");

                        //This is save log
                        string logevent = "Reset";
                        string logmodules = "ResetPassword";
                        string olddata = "";
                        string newdata = "UserName = " + ds_update.username + "; DateReset = "+ DateTime.Now +". New = "+ userpwd + Environment.NewLine +"";
                        insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);

                        if (data.lang == "1")
                        {
                            ret.ModelErrors = "Reset ລະຫັດສໍາເລັດ";
                        }
                        else
                        {
                            ret.ModelErrors = "Reset password complete";
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/changpass")]
        public UserListResult changpass(ChangePwdParam data)
        {
            var ret = new UserListResult();
            string userpwd;
            string userencode;
            string oldPass;
            // WriteLogFile("changpass ==> TokenKey:" + data.TokenKey + ", lang:" + data.lang + ", currentPWD:" + data.currentPWD + ", newPass:" + data.newPass);

            
            int password_length = 16;
            int pass_complex = 1;
            int pass_hit = 24;
            int pass_expDay = 120;
           
            DateTime today = DateTime.Now;
            DateTime dateExp = today.AddDays(pass_expDay);
            string anUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZZ";
            string aLowerCase = "abcdefghijklmnopqrstuvwxyz";
            string aNumber = "0123456789";
            string aSpecial = "!@#$%^&*()-_]";
            int numUpper = 0;
            int numLower = 0;
            int numNums = 0;
            int numSpecials = 0;
            string get_username = "";
            string searchText;
            int i_loop = 0;

            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_users
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID,
                                        c.username,
                                        c.empEmail,
                                        c.firstName1,
                                        c.lastName1,
                                        c.firstName2,
                                        c.lastName2
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        get_username = ds_tokey.username.ToLower();
                        oldPass = Base64Encode(data.currentPWD + ds_tokey.username);
                    } else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }

                    var ds = (from c in db.tb_secure_setting
                              where c.status_id == 3
                              select new
                              {
                                  c.password_length,
                                  c.pass_complex,
                                  c.pass_hit,
                                  c.pass_expDay
                              }).FirstOrDefault();
                    if (ds != null)
                    {
                        password_length = ds.password_length;
                        pass_complex = ds.pass_complex;
                        pass_hit = ds.pass_hit;
                        pass_expDay = ds.pass_expDay;
                        dateExp = today.AddDays(pass_expDay);
                    }
                    if (data.newPass.Length < password_length)
                    {
                        if (data.lang == "1")
                        {
                            if (pass_complex == 1)
                            {
                                ret.ModelErrors = "ລະຫັດຄວນມີຄວາມຍາວ " + password_length.ToString() + " ປະສົມ ຕົວອັກສອນ ໃຫຍ່-ນ້ອຍ, ຕົວເລກ ແລະ ອັກສອນພິເສດ ປະສົມກັນ ...!";
                            } else
                            {
                                ret.ModelErrors = "ລະຫັດຄວນມີຄວາມຍາວ " + password_length.ToString() + " ...!";
                            }
                            
                        }
                        else
                        {
                            if (pass_complex == 1)
                            {
                                ret.ModelErrors = "Password must have length " + password_length.ToString() + " digit and combination of numbers, letters, and special characters";
                            }
                            else
                            {
                                ret.ModelErrors = "Password must have length " + password_length.ToString() + " ...!";
                            }
                            
                        }
                        ret.ResultObject = null;
                        ret.StatusCode = 406;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;
                        return ret;
                    }
                    if (pass_complex == 1)
                    {
                        for (var i = 0; i < data.newPass.Length; i++)
                        {
                            i_loop = i;
                            //searchText = data.newPass.Substring(i, i + 1);
                            searchText = data.newPass.Substring(i,1);
                            if (anUpperCase.Contains(searchText))
                            {
                                numUpper++;
                            }
                            if (aLowerCase.Contains(searchText))
                            {
                                numLower++;
                            }
                            if (aNumber.Contains(searchText))
                            {
                                numNums++;
                            }
                            if (aSpecial.Contains(searchText))
                            {
                                numSpecials++;
                            }
                        }


                        if (numUpper < 2 || numLower < 2 || numNums < 2 || numSpecials < 2)
                        {
                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ລະຫັດຄວນມີ ຕົວອັກສອນ ໃຫຍ່-ນ້ອຍ, ຕົວເລກ ແລະ ອັກສອນພິເສດ ປະສົມກັນ ...!";
                            }
                            else
                            {
                                ret.ModelErrors = "Password must be a combination of numbers, letters, and special characters";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 406;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }

                    }


                    userpwd = data.newPass.ToString();
                    userencode = userpwd + get_username.ToLower();
                    userencode = Base64Encode(userencode);
                    oldPass = Base64Encode(data.currentPWD + get_username);

                    if (pass_hit > 0)
                    {
                        string Command;
                        int Result;

                        Command = " EXEC p_tmp_pass @username = " + get_username + ", @pass_hit=N'" + pass_hit + "' ";                      

                        using (SqlConnection myConnection = new SqlConnection(connectionString))
                        {
                            myConnection.Open();
                            using (SqlCommand myCommand = new SqlCommand(Command, myConnection))
                            {
                               // Result = (int)myCommand.ExecuteScalar();
                            }
                        }

                        var ds_passHit = (from c in db.tmp_pass
                                          where c.username == get_username && c.pwd == userencode
                                          select c).ToList();
                        if (ds_passHit != null)
                        {
                            if (ds_passHit.Count > 0)
                            {
                                if (data.lang == "1")
                                {
                                    ret.ModelErrors = "ລະຫັດຜ່ານຖືກນໍາໃຊ້ກ່ອນໜ້ານີ້ແລ້ວ ກະລຸນາປ່ຽນລະຫັດຜ່ານໃໝ່ ...!";
                                }
                                else
                                {
                                    ret.ModelErrors = "Your password already used before,  Please choose a password that you haven't already used with this account";
                                }
                                ret.ResultObject = null;
                                ret.StatusCode = 406;
                                ret.IsSuccess = true;
                                ret.CommonErrors = null;
                                return ret;
                            }
                        }

                    }

                    var ds_checkUser = (from c in db.tb_users
                                        where c.userID == ds_tokey.userID && c.pwd == oldPass
                                        select c).ToList();
                    if (ds_checkUser.Count > 0)
                    {
                        var ds_update = (from c in db.tb_users
                                         where c.userID == ds_tokey.userID && c.pwd == oldPass
                                         select c).FirstOrDefault();
                        if (ds_update != null)
                        {
                            ds_update.pwd = userencode;
                            ds_update.user_add = ds_tokey.userID;
                            ds_update.date_add = DateTime.Now;
                            ds_update.expDate = dateExp;


                            db.SaveChanges();


                            db.tb_pass_history.Add(new tb_pass_history
                            {
                                username = get_username.ToLower(),
                                pwd = userencode,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });
                            db.SaveChanges();
                        }                        
                        else
                        {
                            ret.ModelErrors = "User authen fail...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "User authen fail...!";
                            return ret;
                        }
                    } else
                    {
                        ret.ModelErrors = "User authen fail...!";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "User authen fail...!";
                        return ret;
                    }
                                   
                    if (ds_tokey.empEmail != null || ds_tokey.empEmail != "")
                    {
                        string str = "Hi, " + ds_tokey.firstName2 + " " + ds_tokey.lastName2 + Environment.NewLine +
                            "Your new password: " + userpwd;
                        Boolean isSendMail = SendMeail(ds_tokey.empEmail, "Reset your HRM password.", str, "", ds_tokey.empID.ToString(), ds_tokey.empID.ToString(), true, "");
                    }

                    if (data.lang == "1")
                    {
                        ret.ModelErrors = "ປ່ຽນລະຫັດຜ່ານສໍາເລັດແລ້ວ";
                    }
                    else
                    {
                        ret.ModelErrors = "Change password complete";
                    }
                    ret.ResultObject = null;
                    ret.StatusCode = 200;
                    ret.IsSuccess = true;
                    ret.CommonErrors = null;
                    return ret;





                }
                    

            } catch (Exception ex)  {
                WriteLogFile(ex.Message + ", I loop: "+ i_loop.ToString());
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }

        }

        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }
        public static string Base64Decode(string base64EncodedData)
        {
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }

        [HttpPost]
        [Route("api/User/PRMonth")]
        public PRMonthListResult PRMonth(PRMonthListParam data)
        {
            var ret = new PRMonthListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = db.tb_paymentRecord.GroupBy(o => o.monthCal).Select(s => s.FirstOrDefault()).Distinct().ToList();

                        if (ds_Data != null)
                        {
                            List<PRMonthModelResult> ResultObject = new List<PRMonthModelResult>();
                            ResultObject = ds_Data.Select(c => new PRMonthModelResult()
                            {
                                monthid = c.monthCal == null ? "" : c.monthCal.ToString(),
                                monthname = c.monthCal == null ? "" : c.monthCal.ToString(),
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/FGMonth")]
        public PRMonthListResult FGMonth(PRMonthListParam data)
        {
            var ret = new PRMonthListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = db.tb_workingDay.GroupBy(o => o.workmonth).Select(s => s.FirstOrDefault()).Distinct().ToList();

                        if (ds_Data != null)
                        {
                            List<PRMonthModelResult> ResultObject = new List<PRMonthModelResult>();
                            ResultObject = ds_Data.Select(c => new PRMonthModelResult()
                            {
                                monthid = c.workmonth == null ? "" : c.workmonth.ToString(),
                                monthname = c.workmonth == null ? "" : c.workmonth.ToString(),
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PRYear")]
        public PRYearListResult PRYear(PRYearListParam data)
        {
            var ret = new PRYearListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = db.tb_paymentRecord.GroupBy(o => o.YearCal).Select(s => s.FirstOrDefault()).Distinct().ToList();

                        if (ds_Data != null)
                        {
                            List<PRYearModelResult> ResultObject = new List<PRYearModelResult>();
                            ResultObject = ds_Data.Select(c => new PRYearModelResult()
                            {
                                yearid = c.YearCal == null ? "" : c.YearCal.ToString(),
                                yearname = c.YearCal == null ? "" : c.YearCal.ToString(),
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/FGYear")]
        public PRYearListResult FGYear(PRYearListParam data)
        {
            var ret = new PRYearListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = db.tb_salary_list.GroupBy(o => o.salaryYear).Select(s => s.FirstOrDefault()).Distinct().ToList();
                        //var ds_Data = db.tb_salary_list.GroupBy(o => o.salaryYear).Select(s => s.First()).Where(w => w.status_id == 4).OrderBy(o => o.salaryID, )..Distinct().ToList();
                        //var ds_Data = (from c in db.tb_salary_list
                        //               where c.status_id != 4
                        //               orderby c.salaryID descending
                        //               select new
                        //               {
                        //                   c.salaryYear
                        //               }).FirstOrDefault();

                        if (ds_Data != null)
                        {
                            
                            List <PRYearModelResult> ResultObject = new List<PRYearModelResult>();
                            ResultObject = ds_Data.Select(c => new PRYearModelResult()
                            {
                                yearid = c.salaryYear == null ? "" : c.salaryYear.ToString(),
                                yearname = c.salaryYear == null ? "" : c.salaryYear.ToString(),
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PRBank")]
        public PRBankListResult PRBank(PRBankListParam data)
        {
            var ret = new PRBankListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = db.tb_paymentRecord.GroupBy(o => o.bankName).Select(s => s.FirstOrDefault()).Distinct().ToList();

                        if (ds_Data != null)
                        {
                            List<PRBankModelResult> ResultObject = new List<PRBankModelResult>();
                            ResultObject = ds_Data.Select(c => new PRBankModelResult()
                            {
                                bankid = c.bankName == null ? "" : c.bankName.ToString(),
                                bankname = c.bankName == null ? "" : c.bankName.ToString(),
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PRCostCenter")]
        public PRCostCenterListResult PRCostCenter(PRCostCenterListParam data)
        {
            var ret = new PRCostCenterListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = db.tb_paymentRecord.GroupBy(o => o.costCenterCode).Select(s => s.FirstOrDefault()).Distinct().ToList();

                        if (ds_Data != null)
                        {
                            List<PRCostCenterModelResult> ResultObject = new List<PRCostCenterModelResult>();
                            ResultObject = ds_Data.Select(c => new PRCostCenterModelResult()
                            {
                                costcentercode = c.costCenterCode == null ? "" : c.costCenterCode,
                                costcentername = c.costCenterText == null ? "" : c.costCenterText
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PaymentRecord")]
        public PaymentRecordListResult PaymentRecord(PaymentRecordListParam data)
        {
            var ret = new PaymentRecordListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_payment = (from c in db.tb_paymentRecord
                                              where c.YearCal == data.year && c.monthCal == data.month && c.status_id != 2
                                        //  where   c.status_id != 2
                                       
                                        
                                          select new
                                       {
                                           c.deptCode,
                                           c.deptName1,
                                           c.deptName2,
                                           c.unitCode,
                                           c.unitName1,
                                           c.unitName2,
                                           c.empNo,
                                           c.costCenterCode,
                                           c.costCenterText,
                                           c.grossSalaryBenefits,
                                           c.advanceBonus,
                                           c.deductEmpSSO,
                                           c.deductTaxs,
                                           c.grossIncome,
                                           c.deductOther,
                                           c.deductFHF,
                                           c.deduct_SLDRT_fun,
                                           c.canteenNET,
                                           c.severanceBook,
                                           c.NetToPay,
                                           c.employerSSO,
                                           c.grossLastMonth,
                                           c.bankName
                                       }).ToList();
                        //if (data.costcentercode != "" && data.costcentercode != "0")
                        //{
                        //    ds_payment = ds_payment.Where(w => w.costCenterCode == data.costcentercode).ToList();
                        //}
                        //if (data.bankname != "" && data.bankname != "0")
                        //{
                        //    ds_payment = ds_payment.Where(w => w.bankName == data.bankname).ToList();
                        //}

                        var ds_Data = (from c in ds_payment
                                           //group c by c.deptName2 into cb
                                       group c by new { c.deptName2, c.costCenterCode } into cb
                                       select new
                                       {
                                           deptname = cb.Key.deptName2,
                                           costCenterCode = cb.Key.costCenterCode,
                                           grossSalaryBenefits = cb.Sum(x => x.grossSalaryBenefits),
                                           advanceBonus = cb.Sum(x => x.advanceBonus),
                                           deductEmpSSO = cb.Sum(x => x.deductEmpSSO),
                                           deductTaxs = cb.Sum(x => x.deductTaxs),
                                           grossIncome = cb.Sum(x => x.grossIncome),
                                           deductFHF = cb.Sum(x => x.deductFHF),
                                           deduct_SLDRT_fun = cb.Sum(x => x.deduct_SLDRT_fun),
                                           deductOther = cb.Sum(x => x.deductOther),
                                           canteenNET = cb.Sum(x => x.canteenNET),
                                           severanceBook = cb.Sum(x => x.severanceBook),
                                           NetToPay = cb.Sum(x => x.NetToPay),
                                           employerSSO = cb.Sum(x => x.employerSSO),
                                           NetToPaymaster = 0,
                                           grossLastMonth = cb.Sum(x => x.grossLastMonth)

                                       }).ToList();
                        if (ds_Data.Count > 0)
                        {
                            List<PaymentRecordModelResult> ResultObject = new List<PaymentRecordModelResult>();
                            ResultObject = ds_Data.Select(c => new PaymentRecordModelResult()
                            {
                                deptname = c.deptname,
                                grossSalaryBenefits =  Convert.ToDouble(c.grossSalaryBenefits).ToString("N"),
                                advanceBonus =  Convert.ToDouble(c.advanceBonus).ToString("N"),
                                deductEmpSSO =   Convert.ToDouble(c.deductEmpSSO).ToString("N"),
                                deductTaxs =  Convert.ToDouble(c.deductTaxs).ToString("N"),
                                grossIncome =   Convert.ToDouble(c.grossIncome).ToString("N"),
                                deductFHFdeductOther = Convert.ToDouble(c.deductFHF + c.deductOther).ToString("N"),
                                deduct_SLDRT_fun =   Convert.ToDouble(c.deduct_SLDRT_fun).ToString("N"),
                                canteenNET =   Convert.ToDouble(c.canteenNET).ToString("N"),
                                severanceBook =   Convert.ToDouble(c.severanceBook).ToString("N"),
                                netToPay =   Convert.ToDouble(c.NetToPay).ToString("N"),
                                employerSSO =   Convert.ToDouble(c.employerSSO).ToString("N"),
                                netToPayMaster = c.NetToPaymaster.ToString(),
                                variance = Convert.ToDouble(c.grossIncome - c.grossLastMonth).ToString("N"),     
                                costCenterCode = c.costCenterCode,                    
                                prdetail = GetPRDetails(c.deptname, data.year, data.month, data.costcentercode, data.bankname, data.lang)
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private List<PaymentRecordDetailModelResult> GetPRDetails(string deptname, int nyear, int nmonth, string costcentercode, string bankname, string lang)
        {
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_Data = (from c in db.v_paymentReccordDetail
                                   where c.YearCal == nyear && c.monthCal == nmonth
                                   select new
                                   {
                                       c.deptCode,
                                       c.deptName1,
                                       c.deptName2,
                                       c.costCenterCode,
                                       c.costCenterText,
                                       c.unitCode,
                                       c.unitName1,
                                       c.unitName2,
                                       c.empNo,
                                       c.grossSalaryBenefits,
                                       c.advanceBonus,
                                       c.deductEmpSSO,
                                       c.deductTaxs,
                                       c.grossIncome,
                                       c.deductFHFdeductOther,
                                       c.deduct_SLDRT_fun,
                                       c.canteenNET,
                                       c.severanceBook,
                                       c.NetToPay,
                                       c.employerSSO,
                                       c.NetToPaymaster,
                                       c.Variance,
                                       c.bankName,
                                       c.YearCal,
                                       c.monthCal
                                   }).ToList();

                    if (deptname != "" && deptname != "0")
                    {
                        ds_Data = ds_Data.Where(w => w.deptName2 == deptname).ToList();
                    }
                    if (costcentercode != "" && costcentercode != "0")
                    {
                        ds_Data = ds_Data.Where(w => w.costCenterCode == costcentercode).ToList();
                    }
                    if (bankname != "" && bankname != "0")
                    {
                        ds_Data = ds_Data.Where(w => w.bankName == bankname).ToList();
                    }

                    if (ds_Data != null)
                    {
                        List<PaymentRecordDetailModelResult> ResultObject = new List<PaymentRecordDetailModelResult>();
                        ResultObject = ds_Data.Select(c => new PaymentRecordDetailModelResult()
                        {
                            costcentercode = costcentercode,
                            costcentername = c.costCenterText,
                            deptname = lang == "1" ? c.deptName1 : c.deptName2,
                            unitname = lang == "1" ? c.unitName1 : c.unitName2,
                            empno = c.empNo,
                            grossSalaryBenefits = c.grossSalaryBenefits == null ? "0" : Convert.ToDouble(c.grossSalaryBenefits).ToString("N"),
                            advanceBonus = c.advanceBonus == null ? "0" : Convert.ToDouble(c.advanceBonus).ToString("N"),
                            deductEmpSSO = c.deductEmpSSO == null ? "0" : Convert.ToDouble(c.deductEmpSSO).ToString("N"),
                            deductTaxs = c.deductTaxs == null ? "0" : Convert.ToDouble(c.deductTaxs).ToString("N"),
                            grossIncome = c.grossIncome == null ? "0" : Convert.ToDouble(c.grossIncome).ToString("N"),
                            deductFHFdeductOther = c.deductFHFdeductOther == null ? "0" : Convert.ToDouble(c.deductFHFdeductOther).ToString("N"),
                            deduct_SLDRT_fun = c.deduct_SLDRT_fun == null ? "0" : Convert.ToDouble(c.deduct_SLDRT_fun).ToString("N"),
                            canteenNET = c.canteenNET == null ? "0" : Convert.ToDouble(c.canteenNET).ToString("N"),
                            severanceBook = c.severanceBook == null ? "0" : Convert.ToDouble(c.severanceBook).ToString("N"),
                            netToPay = c.NetToPay == null ? "0" : Convert.ToDouble(c.NetToPay).ToString("N"),
                            employerSSO = c.employerSSO == null ? "0" : Convert.ToDouble(c.employerSSO).ToString("N"),
                            netToPayMaster = c.NetToPaymaster.ToString(),
                            variance = c.Variance == null ? "0" : Convert.ToDouble(c.Variance).ToString("N")
                        }).ToList();
                        return ResultObject;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                return null;
            }
        }

        [HttpPost]
        [Route("api/User/PaymentRecordDetail")]
        public PaymentRecordDetailsListResult PaymentRecordDetail(PaymentRecordDetailListParam data)
        {
            var ret = new PaymentRecordDetailsListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.v_paymentReccordDetail
                                       where c.costCenterCode == data.costcentercode & c.YearCal==9898989898
                                       select new
                                       {
                                           c.deptCode,
                                           c.deptName1,
                                           c.deptName2,
                                           c.costCenterCode,
                                           c.costCenterText,
                                           c.unitCode,
                                           c.unitName1,
                                           c.unitName2,
                                           c.empNo,
                                           c.grossSalaryBenefits,
                                           c.advanceBonus,
                                           c.deductEmpSSO,
                                           c.deductTaxs,
                                           c.grossIncome,
                                           c.deductFHFdeductOther,
                                           c.deduct_SLDRT_fun,
                                           c.canteenNET,
                                           c.severanceBook,
                                           c.NetToPay,
                                           c.employerSSO,
                                           c.NetToPaymaster,
                                           c.Variance,
                                           c.remark
                                       }).ToList();
                        if (data.costcentercode !="")
                        {
                            ds_Data = (from c in db.v_paymentReccordDetail
                                       where c.costCenterCode == data.costcentercode && c.monthCal == data.monthView && c.YearCal == data.yearView                                   
                                       select new
                                       {
                                           c.deptCode,
                                           c.deptName1,
                                           c.deptName2,
                                           c.costCenterCode,
                                           c.costCenterText,
                                           c.unitCode,
                                           c.unitName1,
                                           c.unitName2,
                                           c.empNo,
                                           c.grossSalaryBenefits,
                                           c.advanceBonus,
                                           c.deductEmpSSO,
                                           c.deductTaxs,
                                           c.grossIncome,
                                           c.deductFHFdeductOther,
                                           c.deduct_SLDRT_fun,
                                           c.canteenNET,
                                           c.severanceBook,
                                           c.NetToPay,
                                           c.employerSSO,
                                           c.NetToPaymaster,
                                           c.Variance,
                                           c.remark
                                       }).ToList();
                        } else
                        {
                            ds_Data = (from c in db.v_paymentReccordDetail
                                       where  c.monthCal == data.monthView && c.YearCal == data.yearView
                                       select new
                                       {
                                           c.deptCode,
                                           c.deptName1,
                                           c.deptName2,
                                           c.costCenterCode,
                                           c.costCenterText,
                                           c.unitCode,
                                           c.unitName1,
                                           c.unitName2,
                                           c.empNo,
                                           c.grossSalaryBenefits,
                                           c.advanceBonus,
                                           c.deductEmpSSO,
                                           c.deductTaxs,
                                           c.grossIncome,
                                           c.deductFHFdeductOther,
                                           c.deduct_SLDRT_fun,
                                           c.canteenNET,
                                           c.severanceBook,
                                           c.NetToPay,
                                           c.employerSSO,
                                           c.NetToPaymaster,
                                           c.Variance,
                                           c.remark
                                       }).ToList();
                        }
                        
                        if (ds_Data != null)
                        {
                            List<PaymentRecordDetailsResult> ResultObject = new List<PaymentRecordDetailsResult>();
                            ResultObject = ds_Data.Select(c => new PaymentRecordDetailsResult()
                            {
                                empno = c.empNo,
                                deptname = data.lang == "1" ? c.deptName1 : c.deptName2,
                                unitname = data.lang == "1" ? c.unitName1 : c.unitName2,
                                grossSalaryBenefits = c.grossSalaryBenefits == null ? "0" : Convert.ToDouble(c.grossSalaryBenefits).ToString("N"),
                                advanceBonus = c.advanceBonus == null ? "0" : Convert.ToDouble(c.advanceBonus).ToString("N"),
                                deductEmpSSO = c.deductEmpSSO == null ? "0" : Convert.ToDouble(c.deductEmpSSO).ToString("N"),
                                deductTaxs = c.deductTaxs == null ? "0" : Convert.ToDouble(c.deductTaxs).ToString("N"),
                                grossIncome = c.grossIncome == null ? "0" : Convert.ToDouble(c.grossIncome).ToString("N"),
                                deductFHFdeductOther = c.deductFHFdeductOther == null ? "0" : Convert.ToDouble(c.deductFHFdeductOther).ToString("N"),
                                deduct_SLDRT_fun = c.deduct_SLDRT_fun == null ? "0" : Convert.ToDouble(c.deduct_SLDRT_fun).ToString("N"),
                                canteenNET = c.canteenNET == null ? "0" : Convert.ToDouble(c.canteenNET).ToString("N"),
                                severanceBook = c.severanceBook == null ? "0" : Convert.ToDouble(c.severanceBook).ToString("N"),
                                netToPay = c.NetToPay == null ? "0" : Convert.ToDouble(c.NetToPay).ToString("N"),
                                employerSSO = c.employerSSO == null ? "0" : Convert.ToDouble(c.employerSSO).ToString("N"),
                                netToPayMaster = c.NetToPaymaster.ToString(),
                                variance = c.Variance == null ? "0" : Convert.ToDouble(c.Variance).ToString("N"),
                                remark = c.remark == null ? "" : c.remark.ToString(),
                                costCenterCode = c.costCenterCode == null ? "" : c.costCenterCode.ToString(),
                                costcentername = c.costCenterText == null ? "" :  c.costCenterText.ToString()
                                 
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/Months")]
        public MonthsListResult Months(MonthsListParam data)
        {
            var ret = new MonthsListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.tokenKey || c.webTokenKey == data.tokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.tb_month
                                       orderby c.monthid
                                       select new
                                       {
                                           c.monthid,
                                           c.monthname1,
                                           c.monthname2
                                       }).ToList();
                        if (ds_Data != null)
                        {
                            List<MonthsViewModelResult> ResultObject = new List<MonthsViewModelResult>();
                            ResultObject = ds_Data.Select(c => new MonthsViewModelResult()
                            {
                              monthid = c.monthid.ToString(),
                              monthname = data.lang == "1" ? c.monthname1 : c.monthname2
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ApprovePaymentRecord")]
        public PaymentRecordListResult ApprovePaymentRecord(ApprovePaymentRecordParam data)
        {
            var ret = new PaymentRecordListResult();
            //   WriteLogFile("NewDept " + data.TokenKey + ", companyCode:" + data.companyCode.ToString() + ", companyName1:" + data.companyName1.ToString() + ", companyName2:" + data.companyName2.ToString());
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_add == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID,
                                        c.userID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        //int deptid;
                        int maxlevel;
                        int nlevel;

                        var ds_update = db.tb_paymentRecord.Where(w => w.transactionNo == data.transactionNo && w.status_id == 1).ToList();

                        int? approve_id = ds_update.Where(w => w.approve_id == ds_tokey.empID).Select(s => s.approve_id).FirstOrDefault();

                        //deptid = db.v_dept_unit_employee.Where(w => w.empID == ds_tokey.empID).Select(s => s.deptID).FirstOrDefault();
                        maxlevel = db.tb_approvalSetting.Where(w => w.approveTypeID == 8 && w.status_id == 3).Count();
                        nlevel = db.tb_paymentRecordApprove.Where(w => w.transactionNo == data.transactionNo && w.status_ID == 3).Count() + 1;
                        var dbapp = db.tb_approvalSetting.Where(w => w.appLevel == nlevel && w.approveTypeID == 8 && w.empID == approve_id && w.status_id == 3).FirstOrDefault();

                        if (ds_update.Any() && maxlevel > 0 && dbapp != null)
                        {
                            DateTime dt = DateTime.Now;
                            string loanApproveNo = dt.ToString("yyyyMMddHHmmss") + ds_tokey.empID;

                            db.tb_paymentRecordApprove.Add(new tb_paymentRecordApprove
                            {
                                ApproveNo = loanApproveNo,
                                transactionNo = data.transactionNo,
                                noted = data.noted,
                                status_ID = 3,
                                user_add = ds_tokey.userID,
                                date_add = DateTime.Now
                            });

                            db.SaveChanges();

                            if (nlevel == maxlevel)
                            {
                                foreach (var item in ds_update)
                                {
                                    item.status_id = 3;

                                    db.SaveChanges();
                                }
                                //approve tb_salary_list
                                var tbsalary = db.tb_salary_list.Where(w => w.transactionNo == data.transactionNo).FirstOrDefault();
                                if (tbsalary != null)
                                {
                                    tbsalary.status_id = 3;
                                    db.SaveChanges();
                                }
                            }
                            else
                            {
                                var dbnextapp = db.tb_approvalSetting.Where(w => w.appLevel == nlevel + 1 && w.approveTypeID == 8 && w.status_id == 3).FirstOrDefault();
                                if(dbnextapp != null)
                                {
                                    foreach (var item in ds_update)
                                    {
                                        item.approve_id = dbnextapp.empID;
                                        db.SaveChanges();
                                    }
                                }
                            }

                            //This is save log
                            string logevent = "Approve";
                            string logmodules = "ApprovePaymentRecord";
                            string olddata = "";
                            string newdata = "ApproveNo = " + loanApproveNo + "; noted="+ data.noted +".";
                            insertLog(data.TokenKey, logevent, logmodules, olddata, newdata);


                            if (data.lang == "1")
                            {
                                ret.ModelErrors = "ອະນຸມັດຂໍ້ມູນສໍາເລັດ";
                            }
                            else
                            {
                                ret.ModelErrors = "Approve complete";
                            }
                            ret.ResultObject = null;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data not found. Please check approval setting...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 401;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "Save data error...!";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized or no permission";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ReportOTDetails")]
        public EmployeeOTDetails ReportOTDetails(EmployeeOTDetailParam data)
        {
            var ret = new EmployeeOTDetails();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.p_reportOTdetails(data.startdate, data.enddate, data.companyid, data.deptid, data.empid)
                                      select new
                                      {
                                          c.empid,
                                          c.empNo,
                                          c.emptitlename,
                                          c.firstname1,
                                          c.firstname2,
                                          c.lastname1,
                                          c.lastname2,
                                          c.unitname1,
                                          c.unitname2,
                                          c.deptname1,
                                          c.deptname2,
                                          c.companyname1,
                                          c.companyname2,
                                          c.normal150,
                                          c.normal200,
                                          c.p250,
                                          c.p300,
                                          c.p350,
                                          c.ot150,
                                          c.ot200,
                                          c.ot250,
                                          c.ot300,
                                          c.ot3001,
                                          c.Total
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmployeeOTDetailResult> ResultObject = new List<EmployeeOTDetailResult>();
                            ResultObject = ds_emp.Select(c => new EmployeeOTDetailResult()
                            {
                                empid = c.empid.ToString(),
                                empNo = c.empNo.ToString(),
                                emptitlename = c.emptitlename,
                                firstname = data.lang == "1" ? c.firstname1 : c.firstname2,
                                lastName = data.lang == "1" ? c.lastname1 : c.lastname2,
                                unitname = data.lang == "1" ? c.unitname1 : c.unitname2,
                                deptName = data.lang == "1" ? c.deptname1 : c.deptname2,
                                companyname = data.lang == "1" ? c.companyname1 : c.companyname2,
                                normal150 = c.normal150.ToString("N"),
                                normal200 = c.normal200.ToString("N"),
                                p250 = c.p250.ToString("N"),
                                p300= c.p300.ToString("N"),
                                p350= c.p350.ToString("N"),
                                ot150 = c.ot150.ToString("N"),
                                ot200= c.ot200.ToString("N"),
                                ot250 = c.ot250.ToString("N"),
                                ot300 = c.ot300.ToString("N"),
                                ot350 = c.ot3001.ToString("N"),
                                Total = c.Total.ToString("N")
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ReportOTDetailsbyEmp")]
        public EmployeeOTDetailsByEmpId ReportOTDetailsbyEmp(EmployeeOTDetailByEmpIdParam data)
        {
            var ret = new EmployeeOTDetailsByEmpId();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_reportOTDetailsbyEmp
                                      where c.stdatenoformat >= data.startdate && c.stdatenoformat <= data.enddate && c.empID == data.empid
                                      select new
                                      {
                                          c.empID,
                                          c.otRequestID,
                                          c.otRequestNo,
                                          c.otSettingType,
                                          c.startdate,
                                          c.stdatenoformat,
                                          c.startTime,
                                          c.endTime,
                                          c.qtyHour,
                                          c.otSettingValues,
                                          c.rateCode,
                                          c.noted,
                                          c.otTypeText,
                                          c.createdatetime
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmployeeOTDetailByEmpIdResult> ResultObject = new List<EmployeeOTDetailByEmpIdResult>();
                            ResultObject = ds_emp.Select(c => new EmployeeOTDetailByEmpIdResult()
                            {
                                empid = c.empID.ToString(),
                                otRequestID = c.otRequestID.ToString(),
                                otRequestNo = c.otRequestNo,
                                otSettingType = c.otSettingType,
                                startdate = c.startdate,
                                stdatenoformat = Convert.ToDateTime(c.stdatenoformat).ToString("yyyy-MM-dd"),
                                starttime = new DateTime(c.startTime.Ticks).ToString("HH:mm"),
                                endtime = new DateTime(c.endTime.Ticks).ToString("HH:mm"),
                                qtyHour = c.qtyHour.ToString(),
                                otSettingValues = c.otSettingValues.ToString(),
                                rateCode = c.rateCode,
                                noted = c.noted,
                                otTypeText = c.otTypeText,
                                createdatetime = c.createdatetime
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpPaymentRecord")]
        public EmpPaymentRecord EmpPaymentRecord(EmpPaymentRecordParam data)
        {
            var ret = new EmpPaymentRecord();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_empPaymentRecord
                                          //where c.endDateYM == data.enddate && c.deptID == data.deptid
                                      where c.Yearmonthly == data.enddate 
                                      select new
                                      {
                                          c.salaryID,
                                          c.empID,
                                          c.empNo,
                                          c.empTitleName,
                                          c.empEmail,
                                          c.firstName1,
                                          c.lastName1,
                                          c.firstName2,
                                          c.lastName2,
                                          c.deptCode,
                                          c.deptName1,
                                          c.deptName2,
                                          c.unitName1,
                                          c.unitName2,
                                          c.monthCal,
                                          c.YearCal,
                                          c.EmpWorkingDay,
                                          c.empPosition,
                                          c.strDate,
                                          c.endDate,
                                          c.nStrDate,
                                          c.nEnddate,
                                          c.deptID,
                                          c.deductTaxs,
                                          c.empDayID,
                                          c.empType,
                                          c.grossSalaryBenefits
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmpPaymentRecordResult> ResultObject = new List<EmpPaymentRecordResult>();
                            ResultObject = ds_emp.Select(c => new EmpPaymentRecordResult()
                            {
                                SalaryID = c.salaryID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empTitleName = c.empTitleName,
                                empEmail = c.empEmail,
                                firstname = data.lang == "1" ? c.firstName1 : c.firstName2,
                                lastname = data.lang == "1" ? c.lastName1 : c.lastName2,
                                deptCode = c.deptCode,
                                deptName = data.lang == "1" ? c.deptName1 : c.deptName2,
                                unitName = data.lang == "1" ? c.unitName1 : c.unitName2,
                                monthCal = c.monthCal.ToString(),
                                yearCal = c.YearCal.ToString(),
                                empworkingDay = c.EmpWorkingDay.ToString(),
                                empPosition = c.empPosition,
                                strDate = c.strDate,
                                endDate = c.endDate,
                                nStrDate = Convert.ToDateTime(c.nStrDate).ToString("yyyy-MM-dd"),
                                nEnddate = Convert.ToDateTime(c.nEnddate).ToString("yyyy-MM-dd"),
                                deductTaxs = Convert.ToDouble(c.deductTaxs).ToString("N"),
                                deptID = c.deptID.ToString(),
                                empDayID = c.empDayID,
                                empType = c.empType == null ? "" : c.empType,
                                grossSalaryBenefits = c.grossSalaryBenefits
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/EmpPaymentRecordMonthYear")]
        public EmpPaymentRecord EmpPaymentRecordMonthYear(EmpPaymentRecordMonthYearParam data)
        {
            var ret = new EmpPaymentRecord();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_empPaymentRecord
                                      where c.Yearmonthly == data.yearmonth
                                      select new
                                      {
                                          c.salaryID,
                                          c.empID,
                                          c.empNo,
                                          c.empTitleName,
                                          c.empEmail,
                                          c.firstName1,
                                          c.lastName1,
                                          c.firstName2,
                                          c.lastName2,
                                          c.deptCode,
                                          c.deptName1,
                                          c.deptName2,
                                          c.unitName1,
                                          c.unitName2,
                                          c.monthCal,
                                          c.YearCal,
                                          c.EmpWorkingDay,
                                          c.empPosition,
                                          c.strDate,
                                          c.endDate,
                                          c.nStrDate,
                                          c.nEnddate,
                                          c.deptID,
                                          c.deductTaxs,
                                          c.empDayID,
                                          c.empType,
                                          c.grossSalaryBenefits
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmpPaymentRecordResult> ResultObject = new List<EmpPaymentRecordResult>();
                            ResultObject = ds_emp.Select(c => new EmpPaymentRecordResult()
                            {
                                SalaryID = c.salaryID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empTitleName = c.empTitleName,
                                empEmail = c.empEmail,
                                firstname = data.lang == "1" ? c.firstName1 : c.firstName2,
                                lastname = data.lang == "1" ? c.lastName1 : c.lastName2,
                                deptCode = c.deptCode,
                                deptName = data.lang == "1" ? c.deptName1 : c.deptName2,
                                unitName = data.lang == "1" ? c.unitName1 : c.unitName2,
                                monthCal = c.monthCal.ToString(),
                                yearCal = c.YearCal.ToString(),
                                empworkingDay = c.EmpWorkingDay.ToString(),
                                empPosition = c.empPosition,
                                strDate = c.strDate,
                                endDate = c.endDate,
                                nStrDate = Convert.ToDateTime(c.nStrDate).ToString("yyyy-MM-dd"),
                                nEnddate = Convert.ToDateTime(c.nEnddate).ToString("yyyy-MM-dd"),
                                deductTaxs = Convert.ToDouble(c.deductTaxs).ToString("N"),
                                deptID = c.deptID.ToString(),
                                empDayID = c.empDayID,
                                empType = c.empType,
                                grossSalaryBenefits = c.grossSalaryBenefits
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }

                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PaySlip")]
        public EmpPaySlip PaySlip(PaySlipParam data)
        {
            var ret = new EmpPaySlip();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.p_Payslip2(data.yearmonth, data.empid, data.startdate, data.enddate)
                                      select new
                                      {
                                          c.SalaryID,
                                          c.empID,
                                          c.empNo,
                                          c.empTitleName,
                                          c.empEmail,
                                          c.firstname1,
                                          c.lastname1,
                                          c.firstname2,
                                          c.lastname2,
                                          c.deptCode,
                                          c.deptName1,
                                          c.deptName2,
                                          c.unitName1,
                                          c.unitname2,
                                          c.monthCal,
                                          c.yearCal,
                                          c.empPosition,
                                          c.empTypeText,
                                          c.basicSalary,
                                          c.strDate,
                                          c.endDate,
                                          c.nStrDate,
                                          c.nEnddate,
                                          c.workingmonth,
                                          c.costCenterCode,
                                          c.costcentertext,
                                          c.shiftincomeA,
                                          c.shiftincomeB,
                                          c.shiftincomeC,
                                          c.TotalShiftIncome,
                                          c.OT1,
                                          c.OT2,
                                          c.OT3,
                                          c.OT4,
                                          c.OT5,
                                          c.SumOT,
                                          c.leavedays,
                                          c.qyears,
                                          c.sickleavedays,
                                          c.allowance_phone,
                                          c.allowance_fuel,
                                          c.allowance_housing,
                                          c.allowance_car,
                                          c.totalAllowance,
                                          c.TotalTaxpaid,
                                          c.EmployeeSSO,
                                          c.deductFHF,
                                          c.SLDRTFund,
                                          c.severanceBook,
                                          c.grossVariance,
                                          c.Advancebonus,
                                          c.OtherAllowance,
                                          c.NetToPay,
                                          c.annualeavetotal,
                                          c.annualeaveused,
                                          c.annualeavebalance,
                                          c.empDayID,
                                          c.empType,
                                          c.overtimeincome1,
                                          c.overtimeincome2,
                                          c.overtimeincome3,
                                          c.overtimeincome4,
                                          c.overtimeincome5,
                                          c.Totalovertimeincome,
                                          c.NetIncome,
                                         // c.empworkingDay,
                                          c.ComposulyLeave
                                          

                                      }).ToList();

                        //if (data.empid != null && data.empid > 0)
                        //{
                        //    ds_emp = ds_emp.Where(w => w.empID == data.empid).ToList();
                        //}

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<EmpPaySlipResult> ResultObject = new List<EmpPaySlipResult>();
                            ResultObject = ds_emp.Select(c => new EmpPaySlipResult()
                            {
                                SalaryID = c.SalaryID.ToString(),
                                empID = c.empID.ToString(),
                                empNo = c.empNo,
                                empTitleName = c.empTitleName,
                                empEmail = c.empEmail,
                                firstname = data.lang == "1" ? c.firstname1 : c.firstname2,
                                lastname = data.lang == "1" ? c.lastname1 : c.lastname2,
                                deptCode = c.deptCode,
                                deptName = data.lang == "1" ? c.deptName1 : c.deptName2,
                                unitName = data.lang == "1" ? c.unitName1 : c.unitname2,
                                monthCal = c.monthCal.ToString(),
                                yearCal = c.yearCal.ToString(),
                                empPosition = c.empPosition,
                                empTypeText = c.empTypeText,
                                basicSalary = Convert.ToDouble(c.basicSalary).ToString("N"),
                                strDate = c.strDate,
                                endDate = c.endDate,
                                nStrDate = Convert.ToDateTime(c.nStrDate).ToString("yyyy-MM-dd"),
                                nEnddate = Convert.ToDateTime(c.nEnddate).ToString("yyyy-MM-dd"),
                                workingmonth = c.workingmonth.ToString(),
                                costCenterCode = c.costCenterCode,
                                costcentertext = c.costcentertext,
                                shiftincomeA = c.shiftincomeA,
                                shiftincomeB = c.shiftincomeB,
                                shiftincomeC = c.shiftincomeC,
                                TotalShiftIncome = c.TotalShiftIncome,
                                OT1 = c.OT1.ToString(),
                                OT2 = c.OT2.ToString(),
                                OT3 = c.OT3.ToString(),
                                OT4 = c.OT4.ToString(),
                                OT5 = c.OT5.ToString(),
                                SumOT = c.SumOT.ToString(),
                                leavedays = c.leavedays,
                                qyears = c.qyears,
                                sickleavedays = c.sickleavedays.ToString(),
                                allowance_phone = c.allowance_phone,
                                allowance_fuel = c.allowance_fuel,
                                allowance_housing = c.allowance_housing,
                                allowance_car = c.allowance_car,
                                totalAllowance = c.totalAllowance,
                                TotalTaxpaid = c.TotalTaxpaid,
                                EmployeeSSO = c.EmployeeSSO,
                                deductFHF = c.deductFHF,
                                SLDRTFund = c.SLDRTFund,
                                severanceBook = c.severanceBook,
                                grossVariance = c.grossVariance,
                                Advancebonus = c.Advancebonus,
                                OtherAllowance = c.OtherAllowance,
                                NetToPay = c.NetToPay,
                                annualeavetotal = c.annualeavetotal.ToString(),
                                annualeaveused = c.annualeaveused.ToString(),
                                annualeavebalance = c.annualeavebalance.ToString(),
                                empDayID = c.empDayID,
                                empType = c.empType,
                                overtimeincome1 = c.overtimeincome1,
                                overtimeincome2 = c.overtimeincome2,
                                overtimeincome3 = c.overtimeincome3,
                                overtimeincome4 = c.overtimeincome4,
                                overtimeincome5 = c.overtimeincome5,
                                Totalovertimeincome = c.Totalovertimeincome,
                                NetIncome = c.NetIncome,
                                //empworkingDay = c.empworkingDay.ToString(),
                                ComposulyLeave = Convert.ToDouble(c.ComposulyLeave).ToString("N")
                                

                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PaymentRecordYearmonth")]
        public PaymentRecordYearmonth PaymentRecordYearmonth(PRYearMonthParam data)
        {
            var ret = new PaymentRecordYearmonth();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        //where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_paymentYearmonth
                                      where c.yearmonth == data.yearmonth
                                      select new
                                      {
                                          c.strDate,
                                          c.endDate,
                                          c.yearmonth
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<PaymentRecordYearmonthResult> ResultObject = new List<PaymentRecordYearmonthResult>();
                            ResultObject = ds_emp.Select(c => new PaymentRecordYearmonthResult()
                            {
                                startate = Convert.ToDateTime(c.strDate).ToString("yyyy-MM-dd"),
                                enddate = Convert.ToDateTime(c.endDate).ToString("yyyy-MM-dd"),
                                yearmonth = c.yearmonth
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/PaymentRecordiBank")]
        public PaymentRecordBank PaymentRecordiBank(PaymentRecordBankParam data)
        {
            var ret = new PaymentRecordBank();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                        // where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) && c.app_permissionId == 19 && c.app_view == 1
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey) 
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.p_iBankbySum(data.yearmonth)
                                      select new
                                      {
                                          c.bankname,
                                          c.bankaccountname,
                                          c.bankaccountNo,
                                          c.nettopay,
                                          c.sumbcel,
                                          c.sumjdb,
                                          c.sumstbank,
                                          c.sumbfl,
                                          c.sumindochina,
                                          c.SumTotal
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<PaymentRecordBankResult> ResultObject = new List<PaymentRecordBankResult>();
                            ResultObject = ds_emp.Select(c => new PaymentRecordBankResult()
                            {
                                bankName = c.bankname,
                                bankAccountName = c.bankaccountname,
                                bankAccountNo = c.bankaccountNo,
                                nettopay = c.nettopay.ToString("#,##0"),
                                sumbcel = c.sumbcel.ToString("#,##0"),
                                sumjdb = c.sumjdb.ToString("#,##0"),
                                sumstbank = c.sumstbank.ToString("#,##0"),
                                sumbfl = c.sumbfl.ToString("#,##0"),
                                sumindochina = c.sumindochina.ToString("#,##0"),
                                SumTotal = c.SumTotal.ToString("#,##0"),
                                remark = "Salary " + data.yearmonth
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        [HttpPost]
        [Route("api/User/ReportSummaryLeave")]
        public ReportLeaveSummary ReportSummaryLeave(PaymentRecordBankParam data)
        {
            var ret = new ReportLeaveSummary();
            // WriteLogFile("IncomeTypeListResult " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_emp = (from c in db.v_empdept
                                      select new
                                      {
                                          c.empID,
                                          c.empNo,
                                          c.firstName1,
                                          c.firstName2,
                                          c.lastName1,
                                          c.lastName2,
                                          c.deptName1,
                                          c.deptName2
                                      }).ToList();

                        if (ds_emp != null && ds_emp.Any())
                        {
                            List<ReportLeaveSummaryResult> ResultObject = new List<ReportLeaveSummaryResult>();
                            ResultObject = ds_emp.Select(c => new ReportLeaveSummaryResult()
                            {
                                empno = c.empNo.ToString(),
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                deptname = data.lang == "1" ? c.deptName1 : c.deptName2,
                                leavecarriedforward = getleavesummary(c.empID).ToString(),

                                CLentitlement = CLentitlement.ToString(),
                                CLbalancelastmonth = CLbalancelastmonth.ToString(),
                                CLusedthismonth = CLusedthismonth.ToString(),
                                CLremain = CLremain.ToString(),
                                ALentitlement = ALentitlement.ToString(),
                                ALbalancelastmonth = ALbalancelastmonth.ToString(),
                                ALusedthismonth = ALusedthismonth.ToString(),
                                AEworkingthismonth = AEworkingthismonth.ToString(),
                                AKremain = AKremain.ToString(),
                                DILBalance = DILBalance.ToString(),
                                DILUsed = DILUsed.ToString()
                            }).ToList();

                            
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Don't have data...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }

        private float? getleavesummary(int? empid = 0)
        {
            float? leaveforward = 0;
            CLentitlement = 0;
            CLbalancelastmonth = 0;
            CLusedthismonth = 0;
            CLremain = 0;
            ALentitlement = 0;
            ALbalancelastmonth = 0;
            ALusedthismonth = 0;
            AEworkingthismonth = 0;
            AKremain = 0;
            DILBalance = 0;
            DILUsed = 0;
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_emp = (from c in db.p_reportLeaveSummary(empid)
                                  select new
                                  {
                                      c.leaveforward,
                                      c.CLentitlement,
                                      c.CLbalancelastmonth,
                                      c.CLusedthismonth,
                                      c.CLremain,
                                      c.ALentitlement,
                                      c.ALbalancelastmonth,
                                      c.ALusedthismonth,
                                      c.AEworkingthismonth,
                                      c.AKremain
                                  }).FirstOrDefault();
                    if (ds_emp != null)
                    {
                        leaveforward = ds_emp.leaveforward;
                        CLentitlement = ds_emp.CLentitlement;
                        CLbalancelastmonth = ds_emp.CLbalancelastmonth;
                        CLusedthismonth = ds_emp.CLusedthismonth;
                        CLremain = ds_emp.CLremain;
                        ALentitlement = ds_emp.ALentitlement;
                        ALbalancelastmonth = ds_emp.ALbalancelastmonth;
                        ALusedthismonth = ds_emp.ALusedthismonth;
                        AEworkingthismonth = ds_emp.AEworkingthismonth;
                        AKremain = ds_emp.AKremain;
                    }
                }
                return leaveforward;
            }

            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                return 0;
            }
        }

        [HttpPost]
        [Route("api/User/LeaveAdjustList")]
        public LeaveAdjustListResult LeaveAdjustList(LeaveAdjustListParam data)
        {
            var ret = new LeaveAdjustListResult();
            // WriteLogFile("deptList " + data.TokenKey);
            try
            {
                using (var db = new db_hrmsEntities())
                {
                    var ds_tokey = (from c in db.v_user_permission
                                    where (c.appTokenKey == data.TokenKey || c.webTokenKey == data.TokenKey)
                                    select new
                                    {
                                        c.empID
                                    }).FirstOrDefault();
                    if (ds_tokey != null)
                    {
                        var ds_Data = (from c in db.v_dept_unit_employee
                                       where c.status_id == 3
                                       orderby c.firstName2
                                       select new
                                       {
                                           c.empID,
                                           c.empNo,
                                           c.firstName1,
                                           c.firstName2,
                                           c.lastName1,
                                           c.lastName2,
                                           c.empPosition,
                                           c.deptName1,
                                           c.deptName2,
                                           c.companyID
                                       }).ToList();
                        if(data.empID > 0)
                        {
                            ds_Data = ds_Data.Where(w => w.empID == data.empID).ToList();
                        }
                        if (ds_Data != null)
                        {
                            var dblt = db.tb_leaveType.Where(w => w.status_ID == 3).ToList();

                            List<listAdjustListViewModelResult> ResultObject = new List<listAdjustListViewModelResult>();
                            ResultObject = ds_Data.Select(c => new listAdjustListViewModelResult()
                            {
                                empid = c.empID.ToString(),
                                empno = c.empNo,
                                empname = data.lang == "1" ? c.firstName1 + " " + c.lastName1 : c.firstName2 + " " + c.lastName2,
                                empposition = c.empPosition,
                                empdept = data.lang == "1" ? c.deptName1 : c.deptName2,
                                empcom = db.tb_company.Where(w => w.companyID == c.companyID).Select(s => s.companyName2).FirstOrDefault(),
                                leaveSL = dblt.Where(w => w.leaveTypeCode == "SL").Select(s => s.leaveTypeName2).FirstOrDefault(),
                                leaveSLAdd = addleave(1, c.empID),
                                leaveSLUsed = useleave(1, c.empID),
                                leaveSLBalance = gleavebalance.ToString(),
                                leaveAL = dblt.Where(w => w.leaveTypeCode == "AL").Select(s => s.leaveTypeName2).FirstOrDefault(),
                                leaveALAdd = addleave(2, c.empID),
                                leaveALUsed = useleave(2, c.empID),
                                leaveALBalance = gleavebalance.ToString(),
                                leaveCL = dblt.Where(w => w.leaveTypeCode == "CL").Select(s => s.leaveTypeName2).FirstOrDefault(),
                                leaveCLAdd = addleave(3, c.empID),
                                leaveCLUsed = useleave(3, c.empID),
                                leaveCLBalance = gleavebalance.ToString()
                            }).ToList();
                            ret.ModelErrors = null;
                            ret.ResultObject = ResultObject;
                            ret.StatusCode = 200;
                            ret.IsSuccess = true;
                            ret.CommonErrors = null;
                            return ret;
                        }
                        else
                        {
                            ret.ModelErrors = "Data is not found ...!";
                            ret.ResultObject = null;
                            ret.StatusCode = 405;
                            ret.IsSuccess = false;
                            ret.CommonErrors = "No leave data";
                            return ret;
                        }
                    }
                    else
                    {
                        ret.ModelErrors = "Unauthorized";
                        ret.ResultObject = null;
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Token key not correct ...!";
                        return ret;
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLogFile(ex.Message);
                ret.ModelErrors = "Error" + ex.Message;
                ret.ResultObject = null;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


        protected static string FindEMPEmailUpdate(int empid)
        {
            string newEmail = "";
            try
            {

                return newEmail;
            } catch
            {

            }
            return newEmail;
        }


        [HttpPost]
        [Route("api/User/testLeave")]
        public testLeaveResult ResetAllUser(testLeaveParam data)
        {
            
            var ret = new testLeaveResult();
            string loweruserlogin = ""; // userlogin.ToLower();
            string pass = ""; // data.UserPassword;    
            if (data.publicKey != "yhgbeagfsdxuhbesf839403432432")
            {
                ret.ModelErrors = "publicKey key fail";             
                ret.StatusCode = 400;
                ret.IsSuccess = false;
                ret.CommonErrors = "publicKey not correct";
                return ret;
            }
            if (data.privateKey != "345trhgxv-090u8yh4dfw3tyh")
            {
                ret.ModelErrors = "privateKey key fail";
                ret.StatusCode = 400;
                ret.IsSuccess = false;
                ret.CommonErrors = "privateKey not correct";
                return ret;
            }

            try
            {
                using (var db = new db_hrmsEntities())
                {
                    // check user if not new insert
                    int Get_empID = 0;
                    string Get_empEmail = "";
                    var dsEmp = (from c in db.tb_employees
                              where c.status_id == 3 
                              select new
                              {
                                  c.empID
                              }).ToList();
                    if (dsEmp.Count > 0)
                    {
                        var ds_ChEMP1 = (from c in db.tb_employees
                                        where c.status_id == 3 
                                        orderby c.empID ascending
                                        select c).FirstOrDefault();
                        if (ds_ChEMP1 != null)
                        {
                            Get_empID = int.Parse(ds_ChEMP1.empID.ToString());
                        }
                        //==============
                        for (int i = 0; i < dsEmp.Count; i++)
                        {
                            // loop check employee
                            var ds_ChEMP = (from c in db.tb_employees
                                             where c.status_id == 3 & c.empID > Get_empID
                                              orderby c.empID ascending
                                             select c).FirstOrDefault();
                            if (ds_ChEMP != null)
                            {
                                Get_empID = int.Parse(ds_ChEMP.empID.ToString());
                                // check User                               
                                    var ds_NewUser = (from c in db.tb_users
                                                      where c.status_id == 3 & c.empID == Get_empID
                                                 select c).FirstOrDefault();
                                if (ds_NewUser == null)
                                {
                                    Get_empID = ds_ChEMP.empID;
                                    Get_empEmail = ds_ChEMP.empEmail == null ? "" : ds_ChEMP.empEmail.ToString().ToLower();
                                    if (Get_empEmail == "")
                                    {
                                        Get_empEmail = ds_ChEMP.lastName2 == null ? "" : ds_ChEMP.lastName2.ToString().Length > 0 ? ds_ChEMP.lastName2.Substring(1).ToLower() + ds_ChEMP.firstName2.ToLower() : ds_ChEMP.firstName2.ToLower();
                                    }
                                    var chUserName = (from c in db.tb_users
                                                      where c.status_id == 3 & c.username == Get_empEmail
                                                      select c).FirstOrDefault();
                                    if (chUserName != null)
                                    {
                                        Get_empEmail = Get_empEmail + ds_ChEMP.empID.ToString().Substring(1);
                                    }

                                    pass = Base64Encode("123456" + Get_empEmail);
                                    // insert new User
                                    db.tb_users.Add(new tb_users
                                    {
                                        username = Get_empEmail.ToLower(),
                                        pwd = pass,
                                        empID = Get_empID,
                                        roleID = 9,
                                        sendNoti = 0,
                                        status_id = 3,
                                        strDate = DateTime.Now.AddDays(1),
                                        expDate = DateTime.Now.AddYears(1),
                                        user_add = 1,
                                        date_add = DateTime.Now
                                    });
                                    db.SaveChanges();

                                }
                            } 


                            // end loop
                        }
                    }

                        // reset password
                        var ds = (from c in db.tb_users
                              where c.status_id == 3 && c.resetCode == 1
                              select new
                              {
                                  c.userID,
                                  c.empID,
                                  c.username                                 
                              }).ToList();

                    if (ds.Count > 0)
                    {                       
                        for (int i = 0; i < ds.Count; i++)
                        {
                            var ds_Update = (from c in db.tb_users
                                             where c.status_id == 3 & c.resetCode == 1
                                             orderby c.userID ascending
                                             select c).FirstOrDefault();
                            if (ds_Update != null)
                            {
                                loweruserlogin = ds_Update.username.ToString().ToLower();
                                pass = Base64Encode("123456" + loweruserlogin);
                                ds_Update.username = loweruserlogin;
                                ds_Update.pwd = pass;
                                ds_Update.resetCode = 0;
                            }
                            db.SaveChanges();
                        }
                        
                        ret.ModelErrors = null;                        
                        ret.StatusCode = 200;
                        ret.IsSuccess = true;
                        ret.CommonErrors = null;                        

                        return ret;
                    }
                    else
                    {
                        WriteLogFile("not found user ");
                        ret.ModelErrors = "Unauthorized";
                        ret.StatusCode = 401;
                        ret.IsSuccess = false;
                        ret.CommonErrors = "Error";
                        return ret;
                    }
                }

            }
            catch (Exception ex)
            {
                var st = new StackTrace(ex, true);
                var frame = st.GetFrame(0);
                ret.ModelErrors = "Error user : "+ loweruserlogin + ", Error details: " + ex.Message;
                ret.StatusCode = 417;
                ret.IsSuccess = false;
                ret.CommonErrors = "Expectation Failed";
                return ret;
            }
        }


    }
}

